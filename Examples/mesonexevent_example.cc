//***********************************************************************
//***********************************************************************
//    ____  ____  _____  _______     ___      ______       __
//   |_   ||   _||_   _||_   __ \  .'   `.   / ____ `.    /  |
//     | |__| |    | |    | |__) |/  .-.  \  `'  __) |    `| |
//     |  __  |    | |    |  ___/ | |   | |  _  |__ '.     | |
//    _| |  | |_  _| |_  _| |_    \  `-'  / | \____) | _  _| |_
//   |____||____||_____||_____|    `.___.'   \______.'(_)|_____|
//
//=======================================================================
// Autogenerated code by HIPO 3.1 io library
// Modify the main loop to suite your needs
// Date: 07/17/2018
// Author: G.Gavalian D. Glazier
//***********************************************************************
#include <cstdlib>
#include <iostream>
#include <chrono>
#include "reader.h"
#include "mesonex_event.h"


int main(int argc, char** argv) {
  // Record start time
  auto start = std::chrono::high_resolution_clock::now();

   std::cout << " reading file example program (HIPO) "  << __cplusplus << std::endl;

   char inputFile[256];
   char outputFile[256];

   if(argc>1) {
      sprintf(inputFile,"%s",argv[1]);
   } else {
      std::cout << " *** please provide a file name..." << std::endl;
     exit(0);
   }

   hipo::reader  reader;
   reader.open(inputFile);

   clas12::mesonex_event  event(reader);
   clas12::calorimeter* cal=event.calorimeter_ptr();
   clas12::cherenkov* cher=event.cherenkov_ptr();
   clas12::particle* part=event.particles_ptr();

   //clas12::vector3      electron;

   int counter=0;
   while(reader.next()==true){
     event.reset();
     int np = part->getSize();
    
     double starttime = event.header().getStartTime();
     int pcount=0;
     while(event.next_particle()){
       //std::cout<<" particle "<<pcount++<<" "<<event.tof().getSize()<<std::endl ;
       int  pid = part->getPid();
       float time=event.getTime()-starttime;
       float ECal=event.getCalTotEnergy();
       float PCalE=cal->getEnergy(); //precal by default
       event.getPCAL();
       float PCalTime=cal->getTime();
       event.getHTCC();
       int nHTCC=cher->getNphe();
       event.getLTCC();
       int nLTCC=cher->getNphe();
       float trchi2=event.getTrackChi2();
       // if(event.isFT()) std::cout<< "    FT HIT "<<std::endl;
       //printf("pid = %8d time = %8.3f ec = %8.3f  pcal = %8.3f pcaltime=%8.3f htcc = %d ltcc=%d track = %8.3f\n", pid,time,ECal,PCalE,PCalTime,nHTCC,nLTCC,trchi2);
     }
   
      counter++;
    }
   auto finish = std::chrono::high_resolution_clock::now();
   std::chrono::duration<double> elapsed = finish - start;
   std::cout << "Elapsed time: " << elapsed.count() << " s\n";
}
//### END OF GENERATED CODE
