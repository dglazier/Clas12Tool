//***********************************************************************
//***********************************************************************
//    ____  ____  _____  _______     ___      ______       __
//   |_   ||   _||_   _||_   __ \  .'   `.   / ____ `.    /  |
//     | |__| |    | |    | |__) |/  .-.  \  `'  __) |    `| |
//     |  __  |    | |    |  ___/ | |   | |  _  |__ '.     | |
//    _| |  | |_  _| |_  _| |_    \  `-'  / | \____) | _  _| |_
//   |____||____||_____||_____|    `.___.'   \______.'(_)|_____|
//
//=======================================================================
// Autogenerated code by HIPO 3.1 io library
// Modify the main loop to suite your needs
// Date: 07/17/2018
// Author: G.Gavalian
//***********************************************************************
#include <cstdlib>
#include <iostream>
#include "TFile.h"
#include "TTree.h"
#include "reader.h"
#include "node.h"

int main(int argc, char** argv) {

   std::cout << " reading file example program (HIPO) " << std::endl;
   char inputFile[256];
   char outputFile[256];

   if(argc>2) {
      sprintf(inputFile,"%s",argv[1]);
      sprintf(outputFile,"%s",argv[2]);
   } else {
      std::cout << " *** please provide a file name..." << std::endl;
     exit(0);
   }

   hipo::reader  reader;
   reader.open(inputFile);


   hipo::dictionary *dictionary = reader.getSchemaDictionary();
   TFile *f = TFile::Open(outputFile,"CREATE");
   TTree *tree = new TTree("clas12","CLAS12 ROOT Tree");


   hipo::node<int32_t>   *BMT__adc_ADC;
   std::vector<Int_t>   vec_BMT__adc_ADC;
   hipo::node<int16_t>   *BMT__adc_component;
   std::vector<Short_t>   vec_BMT__adc_component;
   hipo::node<int32_t>   *BMT__adc_integral;
   std::vector<Int_t>   vec_BMT__adc_integral;
   hipo::node<int8_t>    *BMT__adc_layer;
   std::vector<Char_t>   vec_BMT__adc_layer;
   hipo::node<int8_t>    *BMT__adc_order;
   std::vector<Char_t>   vec_BMT__adc_order;
   hipo::node<int16_t>   *BMT__adc_ped;
   std::vector<Short_t>   vec_BMT__adc_ped;
   hipo::node<int8_t>    *BMT__adc_sector;
   std::vector<Char_t>   vec_BMT__adc_sector;
   hipo::node<float>     *BMT__adc_time;
   std::vector<Float_t>   vec_BMT__adc_time;
   hipo::node<int64_t>   *BMT__adc_timestamp;
   std::vector<Long64_t>   vec_BMT__adc_timestamp;
   if(dictionary->hasSchema("BMT::adc")==true){
      if(dictionary->hasEntry("BMT::adc","ADC")==true){
         BMT__adc_ADC = reader.getBranch<int32_t>   ("BMT::adc","ADC");
         tree->Branch("BMT__adc_ADC",&vec_BMT__adc_ADC);
      }
      if(dictionary->hasEntry("BMT::adc","component")==true){
         BMT__adc_component = reader.getBranch<int16_t>   ("BMT::adc","component");
         tree->Branch("BMT__adc_component",&vec_BMT__adc_component);
      }
      if(dictionary->hasEntry("BMT::adc","integral")==true){
         BMT__adc_integral = reader.getBranch<int32_t>   ("BMT::adc","integral");
         tree->Branch("BMT__adc_integral",&vec_BMT__adc_integral);
      }
      if(dictionary->hasEntry("BMT::adc","layer")==true){
         BMT__adc_layer = reader.getBranch<int8_t>    ("BMT::adc","layer");
         tree->Branch("BMT__adc_layer",&vec_BMT__adc_layer);
      }
      if(dictionary->hasEntry("BMT::adc","order")==true){
         BMT__adc_order = reader.getBranch<int8_t>    ("BMT::adc","order");
         tree->Branch("BMT__adc_order",&vec_BMT__adc_order);
      }
      if(dictionary->hasEntry("BMT::adc","ped")==true){
         BMT__adc_ped = reader.getBranch<int16_t>   ("BMT::adc","ped");
         tree->Branch("BMT__adc_ped",&vec_BMT__adc_ped);
      }
      if(dictionary->hasEntry("BMT::adc","sector")==true){
         BMT__adc_sector = reader.getBranch<int8_t>    ("BMT::adc","sector");
         tree->Branch("BMT__adc_sector",&vec_BMT__adc_sector);
      }
      if(dictionary->hasEntry("BMT::adc","time")==true){
         BMT__adc_time = reader.getBranch<float>     ("BMT::adc","time");
         tree->Branch("BMT__adc_time",&vec_BMT__adc_time);
      }
      if(dictionary->hasEntry("BMT::adc","timestamp")==true){
         BMT__adc_timestamp = reader.getBranch<int64_t>   ("BMT::adc","timestamp");
         tree->Branch("BMT__adc_timestamp",&vec_BMT__adc_timestamp);
      }
   }
   hipo::node<float>     *BMTRec__Clusters_ETot;
   std::vector<Float_t>   vec_BMTRec__Clusters_ETot;
   hipo::node<int16_t>   *BMTRec__Clusters_Hit1_ID;
   std::vector<Short_t>   vec_BMTRec__Clusters_Hit1_ID;
   hipo::node<int16_t>   *BMTRec__Clusters_Hit2_ID;
   std::vector<Short_t>   vec_BMTRec__Clusters_Hit2_ID;
   hipo::node<int16_t>   *BMTRec__Clusters_Hit3_ID;
   std::vector<Short_t>   vec_BMTRec__Clusters_Hit3_ID;
   hipo::node<int16_t>   *BMTRec__Clusters_Hit4_ID;
   std::vector<Short_t>   vec_BMTRec__Clusters_Hit4_ID;
   hipo::node<int16_t>   *BMTRec__Clusters_Hit5_ID;
   std::vector<Short_t>   vec_BMTRec__Clusters_Hit5_ID;
   hipo::node<int16_t>   *BMTRec__Clusters_ID;
   std::vector<Short_t>   vec_BMTRec__Clusters_ID;
   hipo::node<float>     *BMTRec__Clusters_centroid;
   std::vector<Float_t>   vec_BMTRec__Clusters_centroid;
   hipo::node<float>     *BMTRec__Clusters_centroidResidual;
   std::vector<Float_t>   vec_BMTRec__Clusters_centroidResidual;
   hipo::node<int8_t>    *BMTRec__Clusters_layer;
   std::vector<Char_t>   vec_BMTRec__Clusters_layer;
   hipo::node<int8_t>    *BMTRec__Clusters_sector;
   std::vector<Char_t>   vec_BMTRec__Clusters_sector;
   hipo::node<float>     *BMTRec__Clusters_seedE;
   std::vector<Float_t>   vec_BMTRec__Clusters_seedE;
   hipo::node<float>     *BMTRec__Clusters_seedResidual;
   std::vector<Float_t>   vec_BMTRec__Clusters_seedResidual;
   hipo::node<int32_t>   *BMTRec__Clusters_seedStrip;
   std::vector<Int_t>   vec_BMTRec__Clusters_seedStrip;
   hipo::node<int16_t>   *BMTRec__Clusters_size;
   std::vector<Short_t>   vec_BMTRec__Clusters_size;
   hipo::node<int16_t>   *BMTRec__Clusters_trkID;
   std::vector<Short_t>   vec_BMTRec__Clusters_trkID;
   if(dictionary->hasSchema("BMTRec::Clusters")==true){
      if(dictionary->hasEntry("BMTRec::Clusters","ETot")==true){
         BMTRec__Clusters_ETot = reader.getBranch<float>     ("BMTRec::Clusters","ETot");
         tree->Branch("BMTRec__Clusters_ETot",&vec_BMTRec__Clusters_ETot);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit1_ID")==true){
         BMTRec__Clusters_Hit1_ID = reader.getBranch<int16_t>   ("BMTRec::Clusters","Hit1_ID");
         tree->Branch("BMTRec__Clusters_Hit1_ID",&vec_BMTRec__Clusters_Hit1_ID);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit2_ID")==true){
         BMTRec__Clusters_Hit2_ID = reader.getBranch<int16_t>   ("BMTRec::Clusters","Hit2_ID");
         tree->Branch("BMTRec__Clusters_Hit2_ID",&vec_BMTRec__Clusters_Hit2_ID);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit3_ID")==true){
         BMTRec__Clusters_Hit3_ID = reader.getBranch<int16_t>   ("BMTRec::Clusters","Hit3_ID");
         tree->Branch("BMTRec__Clusters_Hit3_ID",&vec_BMTRec__Clusters_Hit3_ID);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit4_ID")==true){
         BMTRec__Clusters_Hit4_ID = reader.getBranch<int16_t>   ("BMTRec::Clusters","Hit4_ID");
         tree->Branch("BMTRec__Clusters_Hit4_ID",&vec_BMTRec__Clusters_Hit4_ID);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit5_ID")==true){
         BMTRec__Clusters_Hit5_ID = reader.getBranch<int16_t>   ("BMTRec::Clusters","Hit5_ID");
         tree->Branch("BMTRec__Clusters_Hit5_ID",&vec_BMTRec__Clusters_Hit5_ID);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","ID")==true){
         BMTRec__Clusters_ID = reader.getBranch<int16_t>   ("BMTRec::Clusters","ID");
         tree->Branch("BMTRec__Clusters_ID",&vec_BMTRec__Clusters_ID);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","centroid")==true){
         BMTRec__Clusters_centroid = reader.getBranch<float>     ("BMTRec::Clusters","centroid");
         tree->Branch("BMTRec__Clusters_centroid",&vec_BMTRec__Clusters_centroid);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","centroidResidual")==true){
         BMTRec__Clusters_centroidResidual = reader.getBranch<float>     ("BMTRec::Clusters","centroidResidual");
         tree->Branch("BMTRec__Clusters_centroidResidual",&vec_BMTRec__Clusters_centroidResidual);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","layer")==true){
         BMTRec__Clusters_layer = reader.getBranch<int8_t>    ("BMTRec::Clusters","layer");
         tree->Branch("BMTRec__Clusters_layer",&vec_BMTRec__Clusters_layer);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","sector")==true){
         BMTRec__Clusters_sector = reader.getBranch<int8_t>    ("BMTRec::Clusters","sector");
         tree->Branch("BMTRec__Clusters_sector",&vec_BMTRec__Clusters_sector);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","seedE")==true){
         BMTRec__Clusters_seedE = reader.getBranch<float>     ("BMTRec::Clusters","seedE");
         tree->Branch("BMTRec__Clusters_seedE",&vec_BMTRec__Clusters_seedE);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","seedResidual")==true){
         BMTRec__Clusters_seedResidual = reader.getBranch<float>     ("BMTRec::Clusters","seedResidual");
         tree->Branch("BMTRec__Clusters_seedResidual",&vec_BMTRec__Clusters_seedResidual);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","seedStrip")==true){
         BMTRec__Clusters_seedStrip = reader.getBranch<int32_t>   ("BMTRec::Clusters","seedStrip");
         tree->Branch("BMTRec__Clusters_seedStrip",&vec_BMTRec__Clusters_seedStrip);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","size")==true){
         BMTRec__Clusters_size = reader.getBranch<int16_t>   ("BMTRec::Clusters","size");
         tree->Branch("BMTRec__Clusters_size",&vec_BMTRec__Clusters_size);
      }
      if(dictionary->hasEntry("BMTRec::Clusters","trkID")==true){
         BMTRec__Clusters_trkID = reader.getBranch<int16_t>   ("BMTRec::Clusters","trkID");
         tree->Branch("BMTRec__Clusters_trkID",&vec_BMTRec__Clusters_trkID);
      }
   }
   hipo::node<int16_t>   *BMTRec__Crosses_Cluster1_ID;
   std::vector<Short_t>   vec_BMTRec__Crosses_Cluster1_ID;
   hipo::node<int16_t>   *BMTRec__Crosses_Cluster2_ID;
   std::vector<Short_t>   vec_BMTRec__Crosses_Cluster2_ID;
   hipo::node<int16_t>   *BMTRec__Crosses_ID;
   std::vector<Short_t>   vec_BMTRec__Crosses_ID;
   hipo::node<float>     *BMTRec__Crosses_err_x;
   std::vector<Float_t>   vec_BMTRec__Crosses_err_x;
   hipo::node<float>     *BMTRec__Crosses_err_y;
   std::vector<Float_t>   vec_BMTRec__Crosses_err_y;
   hipo::node<float>     *BMTRec__Crosses_err_z;
   std::vector<Float_t>   vec_BMTRec__Crosses_err_z;
   hipo::node<int8_t>    *BMTRec__Crosses_region;
   std::vector<Char_t>   vec_BMTRec__Crosses_region;
   hipo::node<int8_t>    *BMTRec__Crosses_sector;
   std::vector<Char_t>   vec_BMTRec__Crosses_sector;
   hipo::node<int16_t>   *BMTRec__Crosses_trkID;
   std::vector<Short_t>   vec_BMTRec__Crosses_trkID;
   hipo::node<float>     *BMTRec__Crosses_ux;
   std::vector<Float_t>   vec_BMTRec__Crosses_ux;
   hipo::node<float>     *BMTRec__Crosses_uy;
   std::vector<Float_t>   vec_BMTRec__Crosses_uy;
   hipo::node<float>     *BMTRec__Crosses_uz;
   std::vector<Float_t>   vec_BMTRec__Crosses_uz;
   hipo::node<float>     *BMTRec__Crosses_x;
   std::vector<Float_t>   vec_BMTRec__Crosses_x;
   hipo::node<float>     *BMTRec__Crosses_y;
   std::vector<Float_t>   vec_BMTRec__Crosses_y;
   hipo::node<float>     *BMTRec__Crosses_z;
   std::vector<Float_t>   vec_BMTRec__Crosses_z;
   if(dictionary->hasSchema("BMTRec::Crosses")==true){
      if(dictionary->hasEntry("BMTRec::Crosses","Cluster1_ID")==true){
         BMTRec__Crosses_Cluster1_ID = reader.getBranch<int16_t>   ("BMTRec::Crosses","Cluster1_ID");
         tree->Branch("BMTRec__Crosses_Cluster1_ID",&vec_BMTRec__Crosses_Cluster1_ID);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","Cluster2_ID")==true){
         BMTRec__Crosses_Cluster2_ID = reader.getBranch<int16_t>   ("BMTRec::Crosses","Cluster2_ID");
         tree->Branch("BMTRec__Crosses_Cluster2_ID",&vec_BMTRec__Crosses_Cluster2_ID);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","ID")==true){
         BMTRec__Crosses_ID = reader.getBranch<int16_t>   ("BMTRec::Crosses","ID");
         tree->Branch("BMTRec__Crosses_ID",&vec_BMTRec__Crosses_ID);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","err_x")==true){
         BMTRec__Crosses_err_x = reader.getBranch<float>     ("BMTRec::Crosses","err_x");
         tree->Branch("BMTRec__Crosses_err_x",&vec_BMTRec__Crosses_err_x);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","err_y")==true){
         BMTRec__Crosses_err_y = reader.getBranch<float>     ("BMTRec::Crosses","err_y");
         tree->Branch("BMTRec__Crosses_err_y",&vec_BMTRec__Crosses_err_y);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","err_z")==true){
         BMTRec__Crosses_err_z = reader.getBranch<float>     ("BMTRec::Crosses","err_z");
         tree->Branch("BMTRec__Crosses_err_z",&vec_BMTRec__Crosses_err_z);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","region")==true){
         BMTRec__Crosses_region = reader.getBranch<int8_t>    ("BMTRec::Crosses","region");
         tree->Branch("BMTRec__Crosses_region",&vec_BMTRec__Crosses_region);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","sector")==true){
         BMTRec__Crosses_sector = reader.getBranch<int8_t>    ("BMTRec::Crosses","sector");
         tree->Branch("BMTRec__Crosses_sector",&vec_BMTRec__Crosses_sector);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","trkID")==true){
         BMTRec__Crosses_trkID = reader.getBranch<int16_t>   ("BMTRec::Crosses","trkID");
         tree->Branch("BMTRec__Crosses_trkID",&vec_BMTRec__Crosses_trkID);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","ux")==true){
         BMTRec__Crosses_ux = reader.getBranch<float>     ("BMTRec::Crosses","ux");
         tree->Branch("BMTRec__Crosses_ux",&vec_BMTRec__Crosses_ux);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","uy")==true){
         BMTRec__Crosses_uy = reader.getBranch<float>     ("BMTRec::Crosses","uy");
         tree->Branch("BMTRec__Crosses_uy",&vec_BMTRec__Crosses_uy);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","uz")==true){
         BMTRec__Crosses_uz = reader.getBranch<float>     ("BMTRec::Crosses","uz");
         tree->Branch("BMTRec__Crosses_uz",&vec_BMTRec__Crosses_uz);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","x")==true){
         BMTRec__Crosses_x = reader.getBranch<float>     ("BMTRec::Crosses","x");
         tree->Branch("BMTRec__Crosses_x",&vec_BMTRec__Crosses_x);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","y")==true){
         BMTRec__Crosses_y = reader.getBranch<float>     ("BMTRec::Crosses","y");
         tree->Branch("BMTRec__Crosses_y",&vec_BMTRec__Crosses_y);
      }
      if(dictionary->hasEntry("BMTRec::Crosses","z")==true){
         BMTRec__Crosses_z = reader.getBranch<float>     ("BMTRec::Crosses","z");
         tree->Branch("BMTRec__Crosses_z",&vec_BMTRec__Crosses_z);
      }
   }
   hipo::node<int16_t>   *BMTRec__Hits_ID;
   std::vector<Short_t>   vec_BMTRec__Hits_ID;
   hipo::node<int16_t>   *BMTRec__Hits_clusterID;
   std::vector<Short_t>   vec_BMTRec__Hits_clusterID;
   hipo::node<float>     *BMTRec__Hits_fitResidual;
   std::vector<Float_t>   vec_BMTRec__Hits_fitResidual;
   hipo::node<int8_t>    *BMTRec__Hits_layer;
   std::vector<Char_t>   vec_BMTRec__Hits_layer;
   hipo::node<int8_t>    *BMTRec__Hits_sector;
   std::vector<Char_t>   vec_BMTRec__Hits_sector;
   hipo::node<int32_t>   *BMTRec__Hits_strip;
   std::vector<Int_t>   vec_BMTRec__Hits_strip;
   hipo::node<int16_t>   *BMTRec__Hits_trkID;
   std::vector<Short_t>   vec_BMTRec__Hits_trkID;
   hipo::node<int32_t>   *BMTRec__Hits_trkingStat;
   std::vector<Int_t>   vec_BMTRec__Hits_trkingStat;
   if(dictionary->hasSchema("BMTRec::Hits")==true){
      if(dictionary->hasEntry("BMTRec::Hits","ID")==true){
         BMTRec__Hits_ID = reader.getBranch<int16_t>   ("BMTRec::Hits","ID");
         tree->Branch("BMTRec__Hits_ID",&vec_BMTRec__Hits_ID);
      }
      if(dictionary->hasEntry("BMTRec::Hits","clusterID")==true){
         BMTRec__Hits_clusterID = reader.getBranch<int16_t>   ("BMTRec::Hits","clusterID");
         tree->Branch("BMTRec__Hits_clusterID",&vec_BMTRec__Hits_clusterID);
      }
      if(dictionary->hasEntry("BMTRec::Hits","fitResidual")==true){
         BMTRec__Hits_fitResidual = reader.getBranch<float>     ("BMTRec::Hits","fitResidual");
         tree->Branch("BMTRec__Hits_fitResidual",&vec_BMTRec__Hits_fitResidual);
      }
      if(dictionary->hasEntry("BMTRec::Hits","layer")==true){
         BMTRec__Hits_layer = reader.getBranch<int8_t>    ("BMTRec::Hits","layer");
         tree->Branch("BMTRec__Hits_layer",&vec_BMTRec__Hits_layer);
      }
      if(dictionary->hasEntry("BMTRec::Hits","sector")==true){
         BMTRec__Hits_sector = reader.getBranch<int8_t>    ("BMTRec::Hits","sector");
         tree->Branch("BMTRec__Hits_sector",&vec_BMTRec__Hits_sector);
      }
      if(dictionary->hasEntry("BMTRec::Hits","strip")==true){
         BMTRec__Hits_strip = reader.getBranch<int32_t>   ("BMTRec::Hits","strip");
         tree->Branch("BMTRec__Hits_strip",&vec_BMTRec__Hits_strip);
      }
      if(dictionary->hasEntry("BMTRec::Hits","trkID")==true){
         BMTRec__Hits_trkID = reader.getBranch<int16_t>   ("BMTRec::Hits","trkID");
         tree->Branch("BMTRec__Hits_trkID",&vec_BMTRec__Hits_trkID);
      }
      if(dictionary->hasEntry("BMTRec::Hits","trkingStat")==true){
         BMTRec__Hits_trkingStat = reader.getBranch<int32_t>   ("BMTRec::Hits","trkingStat");
         tree->Branch("BMTRec__Hits_trkingStat",&vec_BMTRec__Hits_trkingStat);
      }
   }
   hipo::node<int8_t>    *BMTRec__LayerEffs_layer;
   std::vector<Char_t>   vec_BMTRec__LayerEffs_layer;
   hipo::node<float>     *BMTRec__LayerEffs_residual;
   std::vector<Float_t>   vec_BMTRec__LayerEffs_residual;
   hipo::node<int8_t>    *BMTRec__LayerEffs_sector;
   std::vector<Char_t>   vec_BMTRec__LayerEffs_sector;
   hipo::node<int8_t>    *BMTRec__LayerEffs_status;
   std::vector<Char_t>   vec_BMTRec__LayerEffs_status;
   if(dictionary->hasSchema("BMTRec::LayerEffs")==true){
      if(dictionary->hasEntry("BMTRec::LayerEffs","layer")==true){
         BMTRec__LayerEffs_layer = reader.getBranch<int8_t>    ("BMTRec::LayerEffs","layer");
         tree->Branch("BMTRec__LayerEffs_layer",&vec_BMTRec__LayerEffs_layer);
      }
      if(dictionary->hasEntry("BMTRec::LayerEffs","residual")==true){
         BMTRec__LayerEffs_residual = reader.getBranch<float>     ("BMTRec::LayerEffs","residual");
         tree->Branch("BMTRec__LayerEffs_residual",&vec_BMTRec__LayerEffs_residual);
      }
      if(dictionary->hasEntry("BMTRec::LayerEffs","sector")==true){
         BMTRec__LayerEffs_sector = reader.getBranch<int8_t>    ("BMTRec::LayerEffs","sector");
         tree->Branch("BMTRec__LayerEffs_sector",&vec_BMTRec__LayerEffs_sector);
      }
      if(dictionary->hasEntry("BMTRec::LayerEffs","status")==true){
         BMTRec__LayerEffs_status = reader.getBranch<int8_t>    ("BMTRec::LayerEffs","status");
         tree->Branch("BMTRec__LayerEffs_status",&vec_BMTRec__LayerEffs_status);
      }
   }
   hipo::node<int32_t>   *BST__adc_ADC;
   std::vector<Int_t>   vec_BST__adc_ADC;
   hipo::node<int16_t>   *BST__adc_component;
   std::vector<Short_t>   vec_BST__adc_component;
   hipo::node<int8_t>    *BST__adc_layer;
   std::vector<Char_t>   vec_BST__adc_layer;
   hipo::node<int8_t>    *BST__adc_order;
   std::vector<Char_t>   vec_BST__adc_order;
   hipo::node<int16_t>   *BST__adc_ped;
   std::vector<Short_t>   vec_BST__adc_ped;
   hipo::node<int8_t>    *BST__adc_sector;
   std::vector<Char_t>   vec_BST__adc_sector;
   hipo::node<float>     *BST__adc_time;
   std::vector<Float_t>   vec_BST__adc_time;
   hipo::node<int64_t>   *BST__adc_timestamp;
   std::vector<Long64_t>   vec_BST__adc_timestamp;
   if(dictionary->hasSchema("BST::adc")==true){
      if(dictionary->hasEntry("BST::adc","ADC")==true){
         BST__adc_ADC = reader.getBranch<int32_t>   ("BST::adc","ADC");
         tree->Branch("BST__adc_ADC",&vec_BST__adc_ADC);
      }
      if(dictionary->hasEntry("BST::adc","component")==true){
         BST__adc_component = reader.getBranch<int16_t>   ("BST::adc","component");
         tree->Branch("BST__adc_component",&vec_BST__adc_component);
      }
      if(dictionary->hasEntry("BST::adc","layer")==true){
         BST__adc_layer = reader.getBranch<int8_t>    ("BST::adc","layer");
         tree->Branch("BST__adc_layer",&vec_BST__adc_layer);
      }
      if(dictionary->hasEntry("BST::adc","order")==true){
         BST__adc_order = reader.getBranch<int8_t>    ("BST::adc","order");
         tree->Branch("BST__adc_order",&vec_BST__adc_order);
      }
      if(dictionary->hasEntry("BST::adc","ped")==true){
         BST__adc_ped = reader.getBranch<int16_t>   ("BST::adc","ped");
         tree->Branch("BST__adc_ped",&vec_BST__adc_ped);
      }
      if(dictionary->hasEntry("BST::adc","sector")==true){
         BST__adc_sector = reader.getBranch<int8_t>    ("BST::adc","sector");
         tree->Branch("BST__adc_sector",&vec_BST__adc_sector);
      }
      if(dictionary->hasEntry("BST::adc","time")==true){
         BST__adc_time = reader.getBranch<float>     ("BST::adc","time");
         tree->Branch("BST__adc_time",&vec_BST__adc_time);
      }
      if(dictionary->hasEntry("BST::adc","timestamp")==true){
         BST__adc_timestamp = reader.getBranch<int64_t>   ("BST::adc","timestamp");
         tree->Branch("BST__adc_timestamp",&vec_BST__adc_timestamp);
      }
   }
   hipo::node<float>     *BSTRec__Clusters_ETot;
   std::vector<Float_t>   vec_BSTRec__Clusters_ETot;
   hipo::node<int16_t>   *BSTRec__Clusters_Hit1_ID;
   std::vector<Short_t>   vec_BSTRec__Clusters_Hit1_ID;
   hipo::node<int16_t>   *BSTRec__Clusters_Hit2_ID;
   std::vector<Short_t>   vec_BSTRec__Clusters_Hit2_ID;
   hipo::node<int16_t>   *BSTRec__Clusters_Hit3_ID;
   std::vector<Short_t>   vec_BSTRec__Clusters_Hit3_ID;
   hipo::node<int16_t>   *BSTRec__Clusters_Hit4_ID;
   std::vector<Short_t>   vec_BSTRec__Clusters_Hit4_ID;
   hipo::node<int16_t>   *BSTRec__Clusters_Hit5_ID;
   std::vector<Short_t>   vec_BSTRec__Clusters_Hit5_ID;
   hipo::node<int16_t>   *BSTRec__Clusters_ID;
   std::vector<Short_t>   vec_BSTRec__Clusters_ID;
   hipo::node<float>     *BSTRec__Clusters_centroid;
   std::vector<Float_t>   vec_BSTRec__Clusters_centroid;
   hipo::node<float>     *BSTRec__Clusters_centroidResidual;
   std::vector<Float_t>   vec_BSTRec__Clusters_centroidResidual;
   hipo::node<int8_t>    *BSTRec__Clusters_layer;
   std::vector<Char_t>   vec_BSTRec__Clusters_layer;
   hipo::node<int8_t>    *BSTRec__Clusters_sector;
   std::vector<Char_t>   vec_BSTRec__Clusters_sector;
   hipo::node<float>     *BSTRec__Clusters_seedE;
   std::vector<Float_t>   vec_BSTRec__Clusters_seedE;
   hipo::node<float>     *BSTRec__Clusters_seedResidual;
   std::vector<Float_t>   vec_BSTRec__Clusters_seedResidual;
   hipo::node<int32_t>   *BSTRec__Clusters_seedStrip;
   std::vector<Int_t>   vec_BSTRec__Clusters_seedStrip;
   hipo::node<int16_t>   *BSTRec__Clusters_size;
   std::vector<Short_t>   vec_BSTRec__Clusters_size;
   hipo::node<int16_t>   *BSTRec__Clusters_trkID;
   std::vector<Short_t>   vec_BSTRec__Clusters_trkID;
   if(dictionary->hasSchema("BSTRec::Clusters")==true){
      if(dictionary->hasEntry("BSTRec::Clusters","ETot")==true){
         BSTRec__Clusters_ETot = reader.getBranch<float>     ("BSTRec::Clusters","ETot");
         tree->Branch("BSTRec__Clusters_ETot",&vec_BSTRec__Clusters_ETot);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit1_ID")==true){
         BSTRec__Clusters_Hit1_ID = reader.getBranch<int16_t>   ("BSTRec::Clusters","Hit1_ID");
         tree->Branch("BSTRec__Clusters_Hit1_ID",&vec_BSTRec__Clusters_Hit1_ID);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit2_ID")==true){
         BSTRec__Clusters_Hit2_ID = reader.getBranch<int16_t>   ("BSTRec::Clusters","Hit2_ID");
         tree->Branch("BSTRec__Clusters_Hit2_ID",&vec_BSTRec__Clusters_Hit2_ID);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit3_ID")==true){
         BSTRec__Clusters_Hit3_ID = reader.getBranch<int16_t>   ("BSTRec::Clusters","Hit3_ID");
         tree->Branch("BSTRec__Clusters_Hit3_ID",&vec_BSTRec__Clusters_Hit3_ID);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit4_ID")==true){
         BSTRec__Clusters_Hit4_ID = reader.getBranch<int16_t>   ("BSTRec::Clusters","Hit4_ID");
         tree->Branch("BSTRec__Clusters_Hit4_ID",&vec_BSTRec__Clusters_Hit4_ID);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit5_ID")==true){
         BSTRec__Clusters_Hit5_ID = reader.getBranch<int16_t>   ("BSTRec::Clusters","Hit5_ID");
         tree->Branch("BSTRec__Clusters_Hit5_ID",&vec_BSTRec__Clusters_Hit5_ID);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","ID")==true){
         BSTRec__Clusters_ID = reader.getBranch<int16_t>   ("BSTRec::Clusters","ID");
         tree->Branch("BSTRec__Clusters_ID",&vec_BSTRec__Clusters_ID);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","centroid")==true){
         BSTRec__Clusters_centroid = reader.getBranch<float>     ("BSTRec::Clusters","centroid");
         tree->Branch("BSTRec__Clusters_centroid",&vec_BSTRec__Clusters_centroid);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","centroidResidual")==true){
         BSTRec__Clusters_centroidResidual = reader.getBranch<float>     ("BSTRec::Clusters","centroidResidual");
         tree->Branch("BSTRec__Clusters_centroidResidual",&vec_BSTRec__Clusters_centroidResidual);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","layer")==true){
         BSTRec__Clusters_layer = reader.getBranch<int8_t>    ("BSTRec::Clusters","layer");
         tree->Branch("BSTRec__Clusters_layer",&vec_BSTRec__Clusters_layer);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","sector")==true){
         BSTRec__Clusters_sector = reader.getBranch<int8_t>    ("BSTRec::Clusters","sector");
         tree->Branch("BSTRec__Clusters_sector",&vec_BSTRec__Clusters_sector);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","seedE")==true){
         BSTRec__Clusters_seedE = reader.getBranch<float>     ("BSTRec::Clusters","seedE");
         tree->Branch("BSTRec__Clusters_seedE",&vec_BSTRec__Clusters_seedE);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","seedResidual")==true){
         BSTRec__Clusters_seedResidual = reader.getBranch<float>     ("BSTRec::Clusters","seedResidual");
         tree->Branch("BSTRec__Clusters_seedResidual",&vec_BSTRec__Clusters_seedResidual);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","seedStrip")==true){
         BSTRec__Clusters_seedStrip = reader.getBranch<int32_t>   ("BSTRec::Clusters","seedStrip");
         tree->Branch("BSTRec__Clusters_seedStrip",&vec_BSTRec__Clusters_seedStrip);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","size")==true){
         BSTRec__Clusters_size = reader.getBranch<int16_t>   ("BSTRec::Clusters","size");
         tree->Branch("BSTRec__Clusters_size",&vec_BSTRec__Clusters_size);
      }
      if(dictionary->hasEntry("BSTRec::Clusters","trkID")==true){
         BSTRec__Clusters_trkID = reader.getBranch<int16_t>   ("BSTRec::Clusters","trkID");
         tree->Branch("BSTRec__Clusters_trkID",&vec_BSTRec__Clusters_trkID);
      }
   }
   hipo::node<int16_t>   *BSTRec__Crosses_Cluster1_ID;
   std::vector<Short_t>   vec_BSTRec__Crosses_Cluster1_ID;
   hipo::node<int16_t>   *BSTRec__Crosses_Cluster2_ID;
   std::vector<Short_t>   vec_BSTRec__Crosses_Cluster2_ID;
   hipo::node<int16_t>   *BSTRec__Crosses_ID;
   std::vector<Short_t>   vec_BSTRec__Crosses_ID;
   hipo::node<float>     *BSTRec__Crosses_err_x;
   std::vector<Float_t>   vec_BSTRec__Crosses_err_x;
   hipo::node<float>     *BSTRec__Crosses_err_y;
   std::vector<Float_t>   vec_BSTRec__Crosses_err_y;
   hipo::node<float>     *BSTRec__Crosses_err_z;
   std::vector<Float_t>   vec_BSTRec__Crosses_err_z;
   hipo::node<int8_t>    *BSTRec__Crosses_region;
   std::vector<Char_t>   vec_BSTRec__Crosses_region;
   hipo::node<int8_t>    *BSTRec__Crosses_sector;
   std::vector<Char_t>   vec_BSTRec__Crosses_sector;
   hipo::node<int16_t>   *BSTRec__Crosses_trkID;
   std::vector<Short_t>   vec_BSTRec__Crosses_trkID;
   hipo::node<float>     *BSTRec__Crosses_ux;
   std::vector<Float_t>   vec_BSTRec__Crosses_ux;
   hipo::node<float>     *BSTRec__Crosses_uy;
   std::vector<Float_t>   vec_BSTRec__Crosses_uy;
   hipo::node<float>     *BSTRec__Crosses_uz;
   std::vector<Float_t>   vec_BSTRec__Crosses_uz;
   hipo::node<float>     *BSTRec__Crosses_x;
   std::vector<Float_t>   vec_BSTRec__Crosses_x;
   hipo::node<float>     *BSTRec__Crosses_y;
   std::vector<Float_t>   vec_BSTRec__Crosses_y;
   hipo::node<float>     *BSTRec__Crosses_z;
   std::vector<Float_t>   vec_BSTRec__Crosses_z;
   if(dictionary->hasSchema("BSTRec::Crosses")==true){
      if(dictionary->hasEntry("BSTRec::Crosses","Cluster1_ID")==true){
         BSTRec__Crosses_Cluster1_ID = reader.getBranch<int16_t>   ("BSTRec::Crosses","Cluster1_ID");
         tree->Branch("BSTRec__Crosses_Cluster1_ID",&vec_BSTRec__Crosses_Cluster1_ID);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","Cluster2_ID")==true){
         BSTRec__Crosses_Cluster2_ID = reader.getBranch<int16_t>   ("BSTRec::Crosses","Cluster2_ID");
         tree->Branch("BSTRec__Crosses_Cluster2_ID",&vec_BSTRec__Crosses_Cluster2_ID);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","ID")==true){
         BSTRec__Crosses_ID = reader.getBranch<int16_t>   ("BSTRec::Crosses","ID");
         tree->Branch("BSTRec__Crosses_ID",&vec_BSTRec__Crosses_ID);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","err_x")==true){
         BSTRec__Crosses_err_x = reader.getBranch<float>     ("BSTRec::Crosses","err_x");
         tree->Branch("BSTRec__Crosses_err_x",&vec_BSTRec__Crosses_err_x);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","err_y")==true){
         BSTRec__Crosses_err_y = reader.getBranch<float>     ("BSTRec::Crosses","err_y");
         tree->Branch("BSTRec__Crosses_err_y",&vec_BSTRec__Crosses_err_y);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","err_z")==true){
         BSTRec__Crosses_err_z = reader.getBranch<float>     ("BSTRec::Crosses","err_z");
         tree->Branch("BSTRec__Crosses_err_z",&vec_BSTRec__Crosses_err_z);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","region")==true){
         BSTRec__Crosses_region = reader.getBranch<int8_t>    ("BSTRec::Crosses","region");
         tree->Branch("BSTRec__Crosses_region",&vec_BSTRec__Crosses_region);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","sector")==true){
         BSTRec__Crosses_sector = reader.getBranch<int8_t>    ("BSTRec::Crosses","sector");
         tree->Branch("BSTRec__Crosses_sector",&vec_BSTRec__Crosses_sector);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","trkID")==true){
         BSTRec__Crosses_trkID = reader.getBranch<int16_t>   ("BSTRec::Crosses","trkID");
         tree->Branch("BSTRec__Crosses_trkID",&vec_BSTRec__Crosses_trkID);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","ux")==true){
         BSTRec__Crosses_ux = reader.getBranch<float>     ("BSTRec::Crosses","ux");
         tree->Branch("BSTRec__Crosses_ux",&vec_BSTRec__Crosses_ux);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","uy")==true){
         BSTRec__Crosses_uy = reader.getBranch<float>     ("BSTRec::Crosses","uy");
         tree->Branch("BSTRec__Crosses_uy",&vec_BSTRec__Crosses_uy);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","uz")==true){
         BSTRec__Crosses_uz = reader.getBranch<float>     ("BSTRec::Crosses","uz");
         tree->Branch("BSTRec__Crosses_uz",&vec_BSTRec__Crosses_uz);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","x")==true){
         BSTRec__Crosses_x = reader.getBranch<float>     ("BSTRec::Crosses","x");
         tree->Branch("BSTRec__Crosses_x",&vec_BSTRec__Crosses_x);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","y")==true){
         BSTRec__Crosses_y = reader.getBranch<float>     ("BSTRec::Crosses","y");
         tree->Branch("BSTRec__Crosses_y",&vec_BSTRec__Crosses_y);
      }
      if(dictionary->hasEntry("BSTRec::Crosses","z")==true){
         BSTRec__Crosses_z = reader.getBranch<float>     ("BSTRec::Crosses","z");
         tree->Branch("BSTRec__Crosses_z",&vec_BSTRec__Crosses_z);
      }
   }
   hipo::node<int16_t>   *BSTRec__Hits_ID;
   std::vector<Short_t>   vec_BSTRec__Hits_ID;
   hipo::node<int16_t>   *BSTRec__Hits_clusterID;
   std::vector<Short_t>   vec_BSTRec__Hits_clusterID;
   hipo::node<float>     *BSTRec__Hits_fitResidual;
   std::vector<Float_t>   vec_BSTRec__Hits_fitResidual;
   hipo::node<int8_t>    *BSTRec__Hits_layer;
   std::vector<Char_t>   vec_BSTRec__Hits_layer;
   hipo::node<int8_t>    *BSTRec__Hits_sector;
   std::vector<Char_t>   vec_BSTRec__Hits_sector;
   hipo::node<int32_t>   *BSTRec__Hits_strip;
   std::vector<Int_t>   vec_BSTRec__Hits_strip;
   hipo::node<int16_t>   *BSTRec__Hits_trkID;
   std::vector<Short_t>   vec_BSTRec__Hits_trkID;
   hipo::node<int32_t>   *BSTRec__Hits_trkingStat;
   std::vector<Int_t>   vec_BSTRec__Hits_trkingStat;
   if(dictionary->hasSchema("BSTRec::Hits")==true){
      if(dictionary->hasEntry("BSTRec::Hits","ID")==true){
         BSTRec__Hits_ID = reader.getBranch<int16_t>   ("BSTRec::Hits","ID");
         tree->Branch("BSTRec__Hits_ID",&vec_BSTRec__Hits_ID);
      }
      if(dictionary->hasEntry("BSTRec::Hits","clusterID")==true){
         BSTRec__Hits_clusterID = reader.getBranch<int16_t>   ("BSTRec::Hits","clusterID");
         tree->Branch("BSTRec__Hits_clusterID",&vec_BSTRec__Hits_clusterID);
      }
      if(dictionary->hasEntry("BSTRec::Hits","fitResidual")==true){
         BSTRec__Hits_fitResidual = reader.getBranch<float>     ("BSTRec::Hits","fitResidual");
         tree->Branch("BSTRec__Hits_fitResidual",&vec_BSTRec__Hits_fitResidual);
      }
      if(dictionary->hasEntry("BSTRec::Hits","layer")==true){
         BSTRec__Hits_layer = reader.getBranch<int8_t>    ("BSTRec::Hits","layer");
         tree->Branch("BSTRec__Hits_layer",&vec_BSTRec__Hits_layer);
      }
      if(dictionary->hasEntry("BSTRec::Hits","sector")==true){
         BSTRec__Hits_sector = reader.getBranch<int8_t>    ("BSTRec::Hits","sector");
         tree->Branch("BSTRec__Hits_sector",&vec_BSTRec__Hits_sector);
      }
      if(dictionary->hasEntry("BSTRec::Hits","strip")==true){
         BSTRec__Hits_strip = reader.getBranch<int32_t>   ("BSTRec::Hits","strip");
         tree->Branch("BSTRec__Hits_strip",&vec_BSTRec__Hits_strip);
      }
      if(dictionary->hasEntry("BSTRec::Hits","trkID")==true){
         BSTRec__Hits_trkID = reader.getBranch<int16_t>   ("BSTRec::Hits","trkID");
         tree->Branch("BSTRec__Hits_trkID",&vec_BSTRec__Hits_trkID);
      }
      if(dictionary->hasEntry("BSTRec::Hits","trkingStat")==true){
         BSTRec__Hits_trkingStat = reader.getBranch<int32_t>   ("BSTRec::Hits","trkingStat");
         tree->Branch("BSTRec__Hits_trkingStat",&vec_BSTRec__Hits_trkingStat);
      }
   }
   hipo::node<int8_t>    *BSTRec__LayerEffs_layer;
   std::vector<Char_t>   vec_BSTRec__LayerEffs_layer;
   hipo::node<float>     *BSTRec__LayerEffs_residual;
   std::vector<Float_t>   vec_BSTRec__LayerEffs_residual;
   hipo::node<int8_t>    *BSTRec__LayerEffs_sector;
   std::vector<Char_t>   vec_BSTRec__LayerEffs_sector;
   hipo::node<int8_t>    *BSTRec__LayerEffs_status;
   std::vector<Char_t>   vec_BSTRec__LayerEffs_status;
   if(dictionary->hasSchema("BSTRec::LayerEffs")==true){
      if(dictionary->hasEntry("BSTRec::LayerEffs","layer")==true){
         BSTRec__LayerEffs_layer = reader.getBranch<int8_t>    ("BSTRec::LayerEffs","layer");
         tree->Branch("BSTRec__LayerEffs_layer",&vec_BSTRec__LayerEffs_layer);
      }
      if(dictionary->hasEntry("BSTRec::LayerEffs","residual")==true){
         BSTRec__LayerEffs_residual = reader.getBranch<float>     ("BSTRec::LayerEffs","residual");
         tree->Branch("BSTRec__LayerEffs_residual",&vec_BSTRec__LayerEffs_residual);
      }
      if(dictionary->hasEntry("BSTRec::LayerEffs","sector")==true){
         BSTRec__LayerEffs_sector = reader.getBranch<int8_t>    ("BSTRec::LayerEffs","sector");
         tree->Branch("BSTRec__LayerEffs_sector",&vec_BSTRec__LayerEffs_sector);
      }
      if(dictionary->hasEntry("BSTRec::LayerEffs","status")==true){
         BSTRec__LayerEffs_status = reader.getBranch<int8_t>    ("BSTRec::LayerEffs","status");
         tree->Branch("BSTRec__LayerEffs_status",&vec_BSTRec__LayerEffs_status);
      }
   }
   hipo::node<int32_t>   *CND__adc_ADC;
   std::vector<Int_t>   vec_CND__adc_ADC;
   hipo::node<int16_t>   *CND__adc_component;
   std::vector<Short_t>   vec_CND__adc_component;
   hipo::node<int8_t>    *CND__adc_layer;
   std::vector<Char_t>   vec_CND__adc_layer;
   hipo::node<int8_t>    *CND__adc_order;
   std::vector<Char_t>   vec_CND__adc_order;
   hipo::node<int16_t>   *CND__adc_ped;
   std::vector<Short_t>   vec_CND__adc_ped;
   hipo::node<int8_t>    *CND__adc_sector;
   std::vector<Char_t>   vec_CND__adc_sector;
   hipo::node<float>     *CND__adc_time;
   std::vector<Float_t>   vec_CND__adc_time;
   if(dictionary->hasSchema("CND::adc")==true){
      if(dictionary->hasEntry("CND::adc","ADC")==true){
         CND__adc_ADC = reader.getBranch<int32_t>   ("CND::adc","ADC");
         tree->Branch("CND__adc_ADC",&vec_CND__adc_ADC);
      }
      if(dictionary->hasEntry("CND::adc","component")==true){
         CND__adc_component = reader.getBranch<int16_t>   ("CND::adc","component");
         tree->Branch("CND__adc_component",&vec_CND__adc_component);
      }
      if(dictionary->hasEntry("CND::adc","layer")==true){
         CND__adc_layer = reader.getBranch<int8_t>    ("CND::adc","layer");
         tree->Branch("CND__adc_layer",&vec_CND__adc_layer);
      }
      if(dictionary->hasEntry("CND::adc","order")==true){
         CND__adc_order = reader.getBranch<int8_t>    ("CND::adc","order");
         tree->Branch("CND__adc_order",&vec_CND__adc_order);
      }
      if(dictionary->hasEntry("CND::adc","ped")==true){
         CND__adc_ped = reader.getBranch<int16_t>   ("CND::adc","ped");
         tree->Branch("CND__adc_ped",&vec_CND__adc_ped);
      }
      if(dictionary->hasEntry("CND::adc","sector")==true){
         CND__adc_sector = reader.getBranch<int8_t>    ("CND::adc","sector");
         tree->Branch("CND__adc_sector",&vec_CND__adc_sector);
      }
      if(dictionary->hasEntry("CND::adc","time")==true){
         CND__adc_time = reader.getBranch<float>     ("CND::adc","time");
         tree->Branch("CND__adc_time",&vec_CND__adc_time);
      }
   }
   hipo::node<int16_t>   *CND__clusters_component;
   std::vector<Short_t>   vec_CND__clusters_component;
   hipo::node<float>     *CND__clusters_energy;
   std::vector<Float_t>   vec_CND__clusters_energy;
   hipo::node<int16_t>   *CND__clusters_id;
   std::vector<Short_t>   vec_CND__clusters_id;
   hipo::node<int8_t>    *CND__clusters_layer;
   std::vector<Char_t>   vec_CND__clusters_layer;
   hipo::node<int16_t>   *CND__clusters_nhits;
   std::vector<Short_t>   vec_CND__clusters_nhits;
   hipo::node<int8_t>    *CND__clusters_sector;
   std::vector<Char_t>   vec_CND__clusters_sector;
   hipo::node<int16_t>   *CND__clusters_status;
   std::vector<Short_t>   vec_CND__clusters_status;
   hipo::node<float>     *CND__clusters_time;
   std::vector<Float_t>   vec_CND__clusters_time;
   hipo::node<float>     *CND__clusters_x;
   std::vector<Float_t>   vec_CND__clusters_x;
   hipo::node<float>     *CND__clusters_y;
   std::vector<Float_t>   vec_CND__clusters_y;
   hipo::node<float>     *CND__clusters_z;
   std::vector<Float_t>   vec_CND__clusters_z;
   if(dictionary->hasSchema("CND::clusters")==true){
      if(dictionary->hasEntry("CND::clusters","component")==true){
         CND__clusters_component = reader.getBranch<int16_t>   ("CND::clusters","component");
         tree->Branch("CND__clusters_component",&vec_CND__clusters_component);
      }
      if(dictionary->hasEntry("CND::clusters","energy")==true){
         CND__clusters_energy = reader.getBranch<float>     ("CND::clusters","energy");
         tree->Branch("CND__clusters_energy",&vec_CND__clusters_energy);
      }
      if(dictionary->hasEntry("CND::clusters","id")==true){
         CND__clusters_id = reader.getBranch<int16_t>   ("CND::clusters","id");
         tree->Branch("CND__clusters_id",&vec_CND__clusters_id);
      }
      if(dictionary->hasEntry("CND::clusters","layer")==true){
         CND__clusters_layer = reader.getBranch<int8_t>    ("CND::clusters","layer");
         tree->Branch("CND__clusters_layer",&vec_CND__clusters_layer);
      }
      if(dictionary->hasEntry("CND::clusters","nhits")==true){
         CND__clusters_nhits = reader.getBranch<int16_t>   ("CND::clusters","nhits");
         tree->Branch("CND__clusters_nhits",&vec_CND__clusters_nhits);
      }
      if(dictionary->hasEntry("CND::clusters","sector")==true){
         CND__clusters_sector = reader.getBranch<int8_t>    ("CND::clusters","sector");
         tree->Branch("CND__clusters_sector",&vec_CND__clusters_sector);
      }
      if(dictionary->hasEntry("CND::clusters","status")==true){
         CND__clusters_status = reader.getBranch<int16_t>   ("CND::clusters","status");
         tree->Branch("CND__clusters_status",&vec_CND__clusters_status);
      }
      if(dictionary->hasEntry("CND::clusters","time")==true){
         CND__clusters_time = reader.getBranch<float>     ("CND::clusters","time");
         tree->Branch("CND__clusters_time",&vec_CND__clusters_time);
      }
      if(dictionary->hasEntry("CND::clusters","x")==true){
         CND__clusters_x = reader.getBranch<float>     ("CND::clusters","x");
         tree->Branch("CND__clusters_x",&vec_CND__clusters_x);
      }
      if(dictionary->hasEntry("CND::clusters","y")==true){
         CND__clusters_y = reader.getBranch<float>     ("CND::clusters","y");
         tree->Branch("CND__clusters_y",&vec_CND__clusters_y);
      }
      if(dictionary->hasEntry("CND::clusters","z")==true){
         CND__clusters_z = reader.getBranch<float>     ("CND::clusters","z");
         tree->Branch("CND__clusters_z",&vec_CND__clusters_z);
      }
   }
   hipo::node<int16_t>   *CND__hits_component;
   std::vector<Short_t>   vec_CND__hits_component;
   hipo::node<float>     *CND__hits_energy;
   std::vector<Float_t>   vec_CND__hits_energy;
   hipo::node<float>     *CND__hits_energy_unc;
   std::vector<Float_t>   vec_CND__hits_energy_unc;
   hipo::node<int16_t>   *CND__hits_id;
   std::vector<Short_t>   vec_CND__hits_id;
   hipo::node<int16_t>   *CND__hits_indexLadc;
   std::vector<Short_t>   vec_CND__hits_indexLadc;
   hipo::node<int16_t>   *CND__hits_indexLtdc;
   std::vector<Short_t>   vec_CND__hits_indexLtdc;
   hipo::node<int16_t>   *CND__hits_indexRadc;
   std::vector<Short_t>   vec_CND__hits_indexRadc;
   hipo::node<int16_t>   *CND__hits_indexRtdc;
   std::vector<Short_t>   vec_CND__hits_indexRtdc;
   hipo::node<int8_t>    *CND__hits_layer;
   std::vector<Char_t>   vec_CND__hits_layer;
   hipo::node<float>     *CND__hits_pathlength;
   std::vector<Float_t>   vec_CND__hits_pathlength;
   hipo::node<int8_t>    *CND__hits_sector;
   std::vector<Char_t>   vec_CND__hits_sector;
   hipo::node<int16_t>   *CND__hits_status;
   std::vector<Short_t>   vec_CND__hits_status;
   hipo::node<float>     *CND__hits_time;
   std::vector<Float_t>   vec_CND__hits_time;
   hipo::node<float>     *CND__hits_time_unc;
   std::vector<Float_t>   vec_CND__hits_time_unc;
   hipo::node<float>     *CND__hits_tlength;
   std::vector<Float_t>   vec_CND__hits_tlength;
   hipo::node<int16_t>   *CND__hits_trkID;
   std::vector<Short_t>   vec_CND__hits_trkID;
   hipo::node<float>     *CND__hits_tx;
   std::vector<Float_t>   vec_CND__hits_tx;
   hipo::node<float>     *CND__hits_ty;
   std::vector<Float_t>   vec_CND__hits_ty;
   hipo::node<float>     *CND__hits_tz;
   std::vector<Float_t>   vec_CND__hits_tz;
   hipo::node<float>     *CND__hits_x;
   std::vector<Float_t>   vec_CND__hits_x;
   hipo::node<float>     *CND__hits_x_unc;
   std::vector<Float_t>   vec_CND__hits_x_unc;
   hipo::node<float>     *CND__hits_y;
   std::vector<Float_t>   vec_CND__hits_y;
   hipo::node<float>     *CND__hits_y_unc;
   std::vector<Float_t>   vec_CND__hits_y_unc;
   hipo::node<float>     *CND__hits_z;
   std::vector<Float_t>   vec_CND__hits_z;
   hipo::node<float>     *CND__hits_z_unc;
   std::vector<Float_t>   vec_CND__hits_z_unc;
   if(dictionary->hasSchema("CND::hits")==true){
      if(dictionary->hasEntry("CND::hits","component")==true){
         CND__hits_component = reader.getBranch<int16_t>   ("CND::hits","component");
         tree->Branch("CND__hits_component",&vec_CND__hits_component);
      }
      if(dictionary->hasEntry("CND::hits","energy")==true){
         CND__hits_energy = reader.getBranch<float>     ("CND::hits","energy");
         tree->Branch("CND__hits_energy",&vec_CND__hits_energy);
      }
      if(dictionary->hasEntry("CND::hits","energy_unc")==true){
         CND__hits_energy_unc = reader.getBranch<float>     ("CND::hits","energy_unc");
         tree->Branch("CND__hits_energy_unc",&vec_CND__hits_energy_unc);
      }
      if(dictionary->hasEntry("CND::hits","id")==true){
         CND__hits_id = reader.getBranch<int16_t>   ("CND::hits","id");
         tree->Branch("CND__hits_id",&vec_CND__hits_id);
      }
      if(dictionary->hasEntry("CND::hits","indexLadc")==true){
         CND__hits_indexLadc = reader.getBranch<int16_t>   ("CND::hits","indexLadc");
         tree->Branch("CND__hits_indexLadc",&vec_CND__hits_indexLadc);
      }
      if(dictionary->hasEntry("CND::hits","indexLtdc")==true){
         CND__hits_indexLtdc = reader.getBranch<int16_t>   ("CND::hits","indexLtdc");
         tree->Branch("CND__hits_indexLtdc",&vec_CND__hits_indexLtdc);
      }
      if(dictionary->hasEntry("CND::hits","indexRadc")==true){
         CND__hits_indexRadc = reader.getBranch<int16_t>   ("CND::hits","indexRadc");
         tree->Branch("CND__hits_indexRadc",&vec_CND__hits_indexRadc);
      }
      if(dictionary->hasEntry("CND::hits","indexRtdc")==true){
         CND__hits_indexRtdc = reader.getBranch<int16_t>   ("CND::hits","indexRtdc");
         tree->Branch("CND__hits_indexRtdc",&vec_CND__hits_indexRtdc);
      }
      if(dictionary->hasEntry("CND::hits","layer")==true){
         CND__hits_layer = reader.getBranch<int8_t>    ("CND::hits","layer");
         tree->Branch("CND__hits_layer",&vec_CND__hits_layer);
      }
      if(dictionary->hasEntry("CND::hits","pathlength")==true){
         CND__hits_pathlength = reader.getBranch<float>     ("CND::hits","pathlength");
         tree->Branch("CND__hits_pathlength",&vec_CND__hits_pathlength);
      }
      if(dictionary->hasEntry("CND::hits","sector")==true){
         CND__hits_sector = reader.getBranch<int8_t>    ("CND::hits","sector");
         tree->Branch("CND__hits_sector",&vec_CND__hits_sector);
      }
      if(dictionary->hasEntry("CND::hits","status")==true){
         CND__hits_status = reader.getBranch<int16_t>   ("CND::hits","status");
         tree->Branch("CND__hits_status",&vec_CND__hits_status);
      }
      if(dictionary->hasEntry("CND::hits","time")==true){
         CND__hits_time = reader.getBranch<float>     ("CND::hits","time");
         tree->Branch("CND__hits_time",&vec_CND__hits_time);
      }
      if(dictionary->hasEntry("CND::hits","time_unc")==true){
         CND__hits_time_unc = reader.getBranch<float>     ("CND::hits","time_unc");
         tree->Branch("CND__hits_time_unc",&vec_CND__hits_time_unc);
      }
      if(dictionary->hasEntry("CND::hits","tlength")==true){
         CND__hits_tlength = reader.getBranch<float>     ("CND::hits","tlength");
         tree->Branch("CND__hits_tlength",&vec_CND__hits_tlength);
      }
      if(dictionary->hasEntry("CND::hits","trkID")==true){
         CND__hits_trkID = reader.getBranch<int16_t>   ("CND::hits","trkID");
         tree->Branch("CND__hits_trkID",&vec_CND__hits_trkID);
      }
      if(dictionary->hasEntry("CND::hits","tx")==true){
         CND__hits_tx = reader.getBranch<float>     ("CND::hits","tx");
         tree->Branch("CND__hits_tx",&vec_CND__hits_tx);
      }
      if(dictionary->hasEntry("CND::hits","ty")==true){
         CND__hits_ty = reader.getBranch<float>     ("CND::hits","ty");
         tree->Branch("CND__hits_ty",&vec_CND__hits_ty);
      }
      if(dictionary->hasEntry("CND::hits","tz")==true){
         CND__hits_tz = reader.getBranch<float>     ("CND::hits","tz");
         tree->Branch("CND__hits_tz",&vec_CND__hits_tz);
      }
      if(dictionary->hasEntry("CND::hits","x")==true){
         CND__hits_x = reader.getBranch<float>     ("CND::hits","x");
         tree->Branch("CND__hits_x",&vec_CND__hits_x);
      }
      if(dictionary->hasEntry("CND::hits","x_unc")==true){
         CND__hits_x_unc = reader.getBranch<float>     ("CND::hits","x_unc");
         tree->Branch("CND__hits_x_unc",&vec_CND__hits_x_unc);
      }
      if(dictionary->hasEntry("CND::hits","y")==true){
         CND__hits_y = reader.getBranch<float>     ("CND::hits","y");
         tree->Branch("CND__hits_y",&vec_CND__hits_y);
      }
      if(dictionary->hasEntry("CND::hits","y_unc")==true){
         CND__hits_y_unc = reader.getBranch<float>     ("CND::hits","y_unc");
         tree->Branch("CND__hits_y_unc",&vec_CND__hits_y_unc);
      }
      if(dictionary->hasEntry("CND::hits","z")==true){
         CND__hits_z = reader.getBranch<float>     ("CND::hits","z");
         tree->Branch("CND__hits_z",&vec_CND__hits_z);
      }
      if(dictionary->hasEntry("CND::hits","z_unc")==true){
         CND__hits_z_unc = reader.getBranch<float>     ("CND::hits","z_unc");
         tree->Branch("CND__hits_z_unc",&vec_CND__hits_z_unc);
      }
   }
   hipo::node<int32_t>   *CND__tdc_TDC;
   std::vector<Int_t>   vec_CND__tdc_TDC;
   hipo::node<int16_t>   *CND__tdc_component;
   std::vector<Short_t>   vec_CND__tdc_component;
   hipo::node<int8_t>    *CND__tdc_layer;
   std::vector<Char_t>   vec_CND__tdc_layer;
   hipo::node<int8_t>    *CND__tdc_order;
   std::vector<Char_t>   vec_CND__tdc_order;
   hipo::node<int8_t>    *CND__tdc_sector;
   std::vector<Char_t>   vec_CND__tdc_sector;
   if(dictionary->hasSchema("CND::tdc")==true){
      if(dictionary->hasEntry("CND::tdc","TDC")==true){
         CND__tdc_TDC = reader.getBranch<int32_t>   ("CND::tdc","TDC");
         tree->Branch("CND__tdc_TDC",&vec_CND__tdc_TDC);
      }
      if(dictionary->hasEntry("CND::tdc","component")==true){
         CND__tdc_component = reader.getBranch<int16_t>   ("CND::tdc","component");
         tree->Branch("CND__tdc_component",&vec_CND__tdc_component);
      }
      if(dictionary->hasEntry("CND::tdc","layer")==true){
         CND__tdc_layer = reader.getBranch<int8_t>    ("CND::tdc","layer");
         tree->Branch("CND__tdc_layer",&vec_CND__tdc_layer);
      }
      if(dictionary->hasEntry("CND::tdc","order")==true){
         CND__tdc_order = reader.getBranch<int8_t>    ("CND::tdc","order");
         tree->Branch("CND__tdc_order",&vec_CND__tdc_order);
      }
      if(dictionary->hasEntry("CND::tdc","sector")==true){
         CND__tdc_sector = reader.getBranch<int8_t>    ("CND::tdc","sector");
         tree->Branch("CND__tdc_sector",&vec_CND__tdc_sector);
      }
   }
   hipo::node<int32_t>   *CTOF__adc_ADC;
   std::vector<Int_t>   vec_CTOF__adc_ADC;
   hipo::node<int16_t>   *CTOF__adc_component;
   std::vector<Short_t>   vec_CTOF__adc_component;
   hipo::node<int8_t>    *CTOF__adc_layer;
   std::vector<Char_t>   vec_CTOF__adc_layer;
   hipo::node<int8_t>    *CTOF__adc_order;
   std::vector<Char_t>   vec_CTOF__adc_order;
   hipo::node<int16_t>   *CTOF__adc_ped;
   std::vector<Short_t>   vec_CTOF__adc_ped;
   hipo::node<int8_t>    *CTOF__adc_sector;
   std::vector<Char_t>   vec_CTOF__adc_sector;
   hipo::node<float>     *CTOF__adc_time;
   std::vector<Float_t>   vec_CTOF__adc_time;
   if(dictionary->hasSchema("CTOF::adc")==true){
      if(dictionary->hasEntry("CTOF::adc","ADC")==true){
         CTOF__adc_ADC = reader.getBranch<int32_t>   ("CTOF::adc","ADC");
         tree->Branch("CTOF__adc_ADC",&vec_CTOF__adc_ADC);
      }
      if(dictionary->hasEntry("CTOF::adc","component")==true){
         CTOF__adc_component = reader.getBranch<int16_t>   ("CTOF::adc","component");
         tree->Branch("CTOF__adc_component",&vec_CTOF__adc_component);
      }
      if(dictionary->hasEntry("CTOF::adc","layer")==true){
         CTOF__adc_layer = reader.getBranch<int8_t>    ("CTOF::adc","layer");
         tree->Branch("CTOF__adc_layer",&vec_CTOF__adc_layer);
      }
      if(dictionary->hasEntry("CTOF::adc","order")==true){
         CTOF__adc_order = reader.getBranch<int8_t>    ("CTOF::adc","order");
         tree->Branch("CTOF__adc_order",&vec_CTOF__adc_order);
      }
      if(dictionary->hasEntry("CTOF::adc","ped")==true){
         CTOF__adc_ped = reader.getBranch<int16_t>   ("CTOF::adc","ped");
         tree->Branch("CTOF__adc_ped",&vec_CTOF__adc_ped);
      }
      if(dictionary->hasEntry("CTOF::adc","sector")==true){
         CTOF__adc_sector = reader.getBranch<int8_t>    ("CTOF::adc","sector");
         tree->Branch("CTOF__adc_sector",&vec_CTOF__adc_sector);
      }
      if(dictionary->hasEntry("CTOF::adc","time")==true){
         CTOF__adc_time = reader.getBranch<float>     ("CTOF::adc","time");
         tree->Branch("CTOF__adc_time",&vec_CTOF__adc_time);
      }
   }
   hipo::node<int16_t>   *CTOF__hits_adc_idx1;
   std::vector<Short_t>   vec_CTOF__hits_adc_idx1;
   hipo::node<int16_t>   *CTOF__hits_adc_idx2;
   std::vector<Short_t>   vec_CTOF__hits_adc_idx2;
   hipo::node<int16_t>   *CTOF__hits_component;
   std::vector<Short_t>   vec_CTOF__hits_component;
   hipo::node<float>     *CTOF__hits_energy;
   std::vector<Float_t>   vec_CTOF__hits_energy;
   hipo::node<float>     *CTOF__hits_energy_unc;
   std::vector<Float_t>   vec_CTOF__hits_energy_unc;
   hipo::node<int16_t>   *CTOF__hits_id;
   std::vector<Short_t>   vec_CTOF__hits_id;
   hipo::node<int8_t>    *CTOF__hits_layer;
   std::vector<Char_t>   vec_CTOF__hits_layer;
   hipo::node<float>     *CTOF__hits_pathLength;
   std::vector<Float_t>   vec_CTOF__hits_pathLength;
   hipo::node<float>     *CTOF__hits_pathLengthThruBar;
   std::vector<Float_t>   vec_CTOF__hits_pathLengthThruBar;
   hipo::node<int8_t>    *CTOF__hits_sector;
   std::vector<Char_t>   vec_CTOF__hits_sector;
   hipo::node<int16_t>   *CTOF__hits_status;
   std::vector<Short_t>   vec_CTOF__hits_status;
   hipo::node<int16_t>   *CTOF__hits_tdc_idx1;
   std::vector<Short_t>   vec_CTOF__hits_tdc_idx1;
   hipo::node<int16_t>   *CTOF__hits_tdc_idx2;
   std::vector<Short_t>   vec_CTOF__hits_tdc_idx2;
   hipo::node<float>     *CTOF__hits_time;
   std::vector<Float_t>   vec_CTOF__hits_time;
   hipo::node<float>     *CTOF__hits_time_unc;
   std::vector<Float_t>   vec_CTOF__hits_time_unc;
   hipo::node<int16_t>   *CTOF__hits_trkID;
   std::vector<Short_t>   vec_CTOF__hits_trkID;
   hipo::node<float>     *CTOF__hits_tx;
   std::vector<Float_t>   vec_CTOF__hits_tx;
   hipo::node<float>     *CTOF__hits_ty;
   std::vector<Float_t>   vec_CTOF__hits_ty;
   hipo::node<float>     *CTOF__hits_tz;
   std::vector<Float_t>   vec_CTOF__hits_tz;
   hipo::node<float>     *CTOF__hits_x;
   std::vector<Float_t>   vec_CTOF__hits_x;
   hipo::node<float>     *CTOF__hits_x_unc;
   std::vector<Float_t>   vec_CTOF__hits_x_unc;
   hipo::node<float>     *CTOF__hits_y;
   std::vector<Float_t>   vec_CTOF__hits_y;
   hipo::node<float>     *CTOF__hits_y_unc;
   std::vector<Float_t>   vec_CTOF__hits_y_unc;
   hipo::node<float>     *CTOF__hits_z;
   std::vector<Float_t>   vec_CTOF__hits_z;
   hipo::node<float>     *CTOF__hits_z_unc;
   std::vector<Float_t>   vec_CTOF__hits_z_unc;
   if(dictionary->hasSchema("CTOF::hits")==true){
      if(dictionary->hasEntry("CTOF::hits","adc_idx1")==true){
         CTOF__hits_adc_idx1 = reader.getBranch<int16_t>   ("CTOF::hits","adc_idx1");
         tree->Branch("CTOF__hits_adc_idx1",&vec_CTOF__hits_adc_idx1);
      }
      if(dictionary->hasEntry("CTOF::hits","adc_idx2")==true){
         CTOF__hits_adc_idx2 = reader.getBranch<int16_t>   ("CTOF::hits","adc_idx2");
         tree->Branch("CTOF__hits_adc_idx2",&vec_CTOF__hits_adc_idx2);
      }
      if(dictionary->hasEntry("CTOF::hits","component")==true){
         CTOF__hits_component = reader.getBranch<int16_t>   ("CTOF::hits","component");
         tree->Branch("CTOF__hits_component",&vec_CTOF__hits_component);
      }
      if(dictionary->hasEntry("CTOF::hits","energy")==true){
         CTOF__hits_energy = reader.getBranch<float>     ("CTOF::hits","energy");
         tree->Branch("CTOF__hits_energy",&vec_CTOF__hits_energy);
      }
      if(dictionary->hasEntry("CTOF::hits","energy_unc")==true){
         CTOF__hits_energy_unc = reader.getBranch<float>     ("CTOF::hits","energy_unc");
         tree->Branch("CTOF__hits_energy_unc",&vec_CTOF__hits_energy_unc);
      }
      if(dictionary->hasEntry("CTOF::hits","id")==true){
         CTOF__hits_id = reader.getBranch<int16_t>   ("CTOF::hits","id");
         tree->Branch("CTOF__hits_id",&vec_CTOF__hits_id);
      }
      if(dictionary->hasEntry("CTOF::hits","layer")==true){
         CTOF__hits_layer = reader.getBranch<int8_t>    ("CTOF::hits","layer");
         tree->Branch("CTOF__hits_layer",&vec_CTOF__hits_layer);
      }
      if(dictionary->hasEntry("CTOF::hits","pathLength")==true){
         CTOF__hits_pathLength = reader.getBranch<float>     ("CTOF::hits","pathLength");
         tree->Branch("CTOF__hits_pathLength",&vec_CTOF__hits_pathLength);
      }
      if(dictionary->hasEntry("CTOF::hits","pathLengthThruBar")==true){
         CTOF__hits_pathLengthThruBar = reader.getBranch<float>     ("CTOF::hits","pathLengthThruBar");
         tree->Branch("CTOF__hits_pathLengthThruBar",&vec_CTOF__hits_pathLengthThruBar);
      }
      if(dictionary->hasEntry("CTOF::hits","sector")==true){
         CTOF__hits_sector = reader.getBranch<int8_t>    ("CTOF::hits","sector");
         tree->Branch("CTOF__hits_sector",&vec_CTOF__hits_sector);
      }
      if(dictionary->hasEntry("CTOF::hits","status")==true){
         CTOF__hits_status = reader.getBranch<int16_t>   ("CTOF::hits","status");
         tree->Branch("CTOF__hits_status",&vec_CTOF__hits_status);
      }
      if(dictionary->hasEntry("CTOF::hits","tdc_idx1")==true){
         CTOF__hits_tdc_idx1 = reader.getBranch<int16_t>   ("CTOF::hits","tdc_idx1");
         tree->Branch("CTOF__hits_tdc_idx1",&vec_CTOF__hits_tdc_idx1);
      }
      if(dictionary->hasEntry("CTOF::hits","tdc_idx2")==true){
         CTOF__hits_tdc_idx2 = reader.getBranch<int16_t>   ("CTOF::hits","tdc_idx2");
         tree->Branch("CTOF__hits_tdc_idx2",&vec_CTOF__hits_tdc_idx2);
      }
      if(dictionary->hasEntry("CTOF::hits","time")==true){
         CTOF__hits_time = reader.getBranch<float>     ("CTOF::hits","time");
         tree->Branch("CTOF__hits_time",&vec_CTOF__hits_time);
      }
      if(dictionary->hasEntry("CTOF::hits","time_unc")==true){
         CTOF__hits_time_unc = reader.getBranch<float>     ("CTOF::hits","time_unc");
         tree->Branch("CTOF__hits_time_unc",&vec_CTOF__hits_time_unc);
      }
      if(dictionary->hasEntry("CTOF::hits","trkID")==true){
         CTOF__hits_trkID = reader.getBranch<int16_t>   ("CTOF::hits","trkID");
         tree->Branch("CTOF__hits_trkID",&vec_CTOF__hits_trkID);
      }
      if(dictionary->hasEntry("CTOF::hits","tx")==true){
         CTOF__hits_tx = reader.getBranch<float>     ("CTOF::hits","tx");
         tree->Branch("CTOF__hits_tx",&vec_CTOF__hits_tx);
      }
      if(dictionary->hasEntry("CTOF::hits","ty")==true){
         CTOF__hits_ty = reader.getBranch<float>     ("CTOF::hits","ty");
         tree->Branch("CTOF__hits_ty",&vec_CTOF__hits_ty);
      }
      if(dictionary->hasEntry("CTOF::hits","tz")==true){
         CTOF__hits_tz = reader.getBranch<float>     ("CTOF::hits","tz");
         tree->Branch("CTOF__hits_tz",&vec_CTOF__hits_tz);
      }
      if(dictionary->hasEntry("CTOF::hits","x")==true){
         CTOF__hits_x = reader.getBranch<float>     ("CTOF::hits","x");
         tree->Branch("CTOF__hits_x",&vec_CTOF__hits_x);
      }
      if(dictionary->hasEntry("CTOF::hits","x_unc")==true){
         CTOF__hits_x_unc = reader.getBranch<float>     ("CTOF::hits","x_unc");
         tree->Branch("CTOF__hits_x_unc",&vec_CTOF__hits_x_unc);
      }
      if(dictionary->hasEntry("CTOF::hits","y")==true){
         CTOF__hits_y = reader.getBranch<float>     ("CTOF::hits","y");
         tree->Branch("CTOF__hits_y",&vec_CTOF__hits_y);
      }
      if(dictionary->hasEntry("CTOF::hits","y_unc")==true){
         CTOF__hits_y_unc = reader.getBranch<float>     ("CTOF::hits","y_unc");
         tree->Branch("CTOF__hits_y_unc",&vec_CTOF__hits_y_unc);
      }
      if(dictionary->hasEntry("CTOF::hits","z")==true){
         CTOF__hits_z = reader.getBranch<float>     ("CTOF::hits","z");
         tree->Branch("CTOF__hits_z",&vec_CTOF__hits_z);
      }
      if(dictionary->hasEntry("CTOF::hits","z_unc")==true){
         CTOF__hits_z_unc = reader.getBranch<float>     ("CTOF::hits","z_unc");
         tree->Branch("CTOF__hits_z_unc",&vec_CTOF__hits_z_unc);
      }
   }
   hipo::node<int16_t>   *CTOF__rawhits_component;
   std::vector<Short_t>   vec_CTOF__rawhits_component;
   hipo::node<float>     *CTOF__rawhits_energy_down;
   std::vector<Float_t>   vec_CTOF__rawhits_energy_down;
   hipo::node<float>     *CTOF__rawhits_energy_down_unc;
   std::vector<Float_t>   vec_CTOF__rawhits_energy_down_unc;
   hipo::node<float>     *CTOF__rawhits_energy_up;
   std::vector<Float_t>   vec_CTOF__rawhits_energy_up;
   hipo::node<float>     *CTOF__rawhits_energy_up_unc;
   std::vector<Float_t>   vec_CTOF__rawhits_energy_up_unc;
   hipo::node<int16_t>   *CTOF__rawhits_id;
   std::vector<Short_t>   vec_CTOF__rawhits_id;
   hipo::node<int16_t>   *CTOF__rawhits_status;
   std::vector<Short_t>   vec_CTOF__rawhits_status;
   hipo::node<float>     *CTOF__rawhits_time_down;
   std::vector<Float_t>   vec_CTOF__rawhits_time_down;
   hipo::node<float>     *CTOF__rawhits_time_down_unc;
   std::vector<Float_t>   vec_CTOF__rawhits_time_down_unc;
   hipo::node<float>     *CTOF__rawhits_time_up;
   std::vector<Float_t>   vec_CTOF__rawhits_time_up;
   hipo::node<float>     *CTOF__rawhits_time_up_unc;
   std::vector<Float_t>   vec_CTOF__rawhits_time_up_unc;
   if(dictionary->hasSchema("CTOF::rawhits")==true){
      if(dictionary->hasEntry("CTOF::rawhits","component")==true){
         CTOF__rawhits_component = reader.getBranch<int16_t>   ("CTOF::rawhits","component");
         tree->Branch("CTOF__rawhits_component",&vec_CTOF__rawhits_component);
      }
      if(dictionary->hasEntry("CTOF::rawhits","energy_down")==true){
         CTOF__rawhits_energy_down = reader.getBranch<float>     ("CTOF::rawhits","energy_down");
         tree->Branch("CTOF__rawhits_energy_down",&vec_CTOF__rawhits_energy_down);
      }
      if(dictionary->hasEntry("CTOF::rawhits","energy_down_unc")==true){
         CTOF__rawhits_energy_down_unc = reader.getBranch<float>     ("CTOF::rawhits","energy_down_unc");
         tree->Branch("CTOF__rawhits_energy_down_unc",&vec_CTOF__rawhits_energy_down_unc);
      }
      if(dictionary->hasEntry("CTOF::rawhits","energy_up")==true){
         CTOF__rawhits_energy_up = reader.getBranch<float>     ("CTOF::rawhits","energy_up");
         tree->Branch("CTOF__rawhits_energy_up",&vec_CTOF__rawhits_energy_up);
      }
      if(dictionary->hasEntry("CTOF::rawhits","energy_up_unc")==true){
         CTOF__rawhits_energy_up_unc = reader.getBranch<float>     ("CTOF::rawhits","energy_up_unc");
         tree->Branch("CTOF__rawhits_energy_up_unc",&vec_CTOF__rawhits_energy_up_unc);
      }
      if(dictionary->hasEntry("CTOF::rawhits","id")==true){
         CTOF__rawhits_id = reader.getBranch<int16_t>   ("CTOF::rawhits","id");
         tree->Branch("CTOF__rawhits_id",&vec_CTOF__rawhits_id);
      }
      if(dictionary->hasEntry("CTOF::rawhits","status")==true){
         CTOF__rawhits_status = reader.getBranch<int16_t>   ("CTOF::rawhits","status");
         tree->Branch("CTOF__rawhits_status",&vec_CTOF__rawhits_status);
      }
      if(dictionary->hasEntry("CTOF::rawhits","time_down")==true){
         CTOF__rawhits_time_down = reader.getBranch<float>     ("CTOF::rawhits","time_down");
         tree->Branch("CTOF__rawhits_time_down",&vec_CTOF__rawhits_time_down);
      }
      if(dictionary->hasEntry("CTOF::rawhits","time_down_unc")==true){
         CTOF__rawhits_time_down_unc = reader.getBranch<float>     ("CTOF::rawhits","time_down_unc");
         tree->Branch("CTOF__rawhits_time_down_unc",&vec_CTOF__rawhits_time_down_unc);
      }
      if(dictionary->hasEntry("CTOF::rawhits","time_up")==true){
         CTOF__rawhits_time_up = reader.getBranch<float>     ("CTOF::rawhits","time_up");
         tree->Branch("CTOF__rawhits_time_up",&vec_CTOF__rawhits_time_up);
      }
      if(dictionary->hasEntry("CTOF::rawhits","time_up_unc")==true){
         CTOF__rawhits_time_up_unc = reader.getBranch<float>     ("CTOF::rawhits","time_up_unc");
         tree->Branch("CTOF__rawhits_time_up_unc",&vec_CTOF__rawhits_time_up_unc);
      }
   }
   hipo::node<int32_t>   *CTOF__tdc_TDC;
   std::vector<Int_t>   vec_CTOF__tdc_TDC;
   hipo::node<int16_t>   *CTOF__tdc_component;
   std::vector<Short_t>   vec_CTOF__tdc_component;
   hipo::node<int8_t>    *CTOF__tdc_layer;
   std::vector<Char_t>   vec_CTOF__tdc_layer;
   hipo::node<int8_t>    *CTOF__tdc_order;
   std::vector<Char_t>   vec_CTOF__tdc_order;
   hipo::node<int8_t>    *CTOF__tdc_sector;
   std::vector<Char_t>   vec_CTOF__tdc_sector;
   if(dictionary->hasSchema("CTOF::tdc")==true){
      if(dictionary->hasEntry("CTOF::tdc","TDC")==true){
         CTOF__tdc_TDC = reader.getBranch<int32_t>   ("CTOF::tdc","TDC");
         tree->Branch("CTOF__tdc_TDC",&vec_CTOF__tdc_TDC);
      }
      if(dictionary->hasEntry("CTOF::tdc","component")==true){
         CTOF__tdc_component = reader.getBranch<int16_t>   ("CTOF::tdc","component");
         tree->Branch("CTOF__tdc_component",&vec_CTOF__tdc_component);
      }
      if(dictionary->hasEntry("CTOF::tdc","layer")==true){
         CTOF__tdc_layer = reader.getBranch<int8_t>    ("CTOF::tdc","layer");
         tree->Branch("CTOF__tdc_layer",&vec_CTOF__tdc_layer);
      }
      if(dictionary->hasEntry("CTOF::tdc","order")==true){
         CTOF__tdc_order = reader.getBranch<int8_t>    ("CTOF::tdc","order");
         tree->Branch("CTOF__tdc_order",&vec_CTOF__tdc_order);
      }
      if(dictionary->hasEntry("CTOF::tdc","sector")==true){
         CTOF__tdc_sector = reader.getBranch<int8_t>    ("CTOF::tdc","sector");
         tree->Branch("CTOF__tdc_sector",&vec_CTOF__tdc_sector);
      }
   }
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross10_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross10_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross11_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross11_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross12_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross12_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross13_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross13_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross14_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross14_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross15_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross15_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross16_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross16_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross17_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross17_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross18_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross18_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross1_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross1_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross2_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross2_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross3_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross3_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross4_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross4_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross5_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross5_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross6_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross6_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross7_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross7_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross8_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross8_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_Cross9_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_Cross9_ID;
   hipo::node<int16_t>   *CVTRec__Cosmics_ID;
   std::vector<Short_t>   vec_CVTRec__Cosmics_ID;
   hipo::node<float>     *CVTRec__Cosmics_chi2;
   std::vector<Float_t>   vec_CVTRec__Cosmics_chi2;
   hipo::node<int16_t>   *CVTRec__Cosmics_ndf;
   std::vector<Short_t>   vec_CVTRec__Cosmics_ndf;
   hipo::node<float>     *CVTRec__Cosmics_phi;
   std::vector<Float_t>   vec_CVTRec__Cosmics_phi;
   hipo::node<float>     *CVTRec__Cosmics_theta;
   std::vector<Float_t>   vec_CVTRec__Cosmics_theta;
   hipo::node<float>     *CVTRec__Cosmics_trkline_yx_interc;
   std::vector<Float_t>   vec_CVTRec__Cosmics_trkline_yx_interc;
   hipo::node<float>     *CVTRec__Cosmics_trkline_yx_slope;
   std::vector<Float_t>   vec_CVTRec__Cosmics_trkline_yx_slope;
   hipo::node<float>     *CVTRec__Cosmics_trkline_yz_interc;
   std::vector<Float_t>   vec_CVTRec__Cosmics_trkline_yz_interc;
   hipo::node<float>     *CVTRec__Cosmics_trkline_yz_slope;
   std::vector<Float_t>   vec_CVTRec__Cosmics_trkline_yz_slope;
   if(dictionary->hasSchema("CVTRec::Cosmics")==true){
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross10_ID")==true){
         CVTRec__Cosmics_Cross10_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross10_ID");
         tree->Branch("CVTRec__Cosmics_Cross10_ID",&vec_CVTRec__Cosmics_Cross10_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross11_ID")==true){
         CVTRec__Cosmics_Cross11_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross11_ID");
         tree->Branch("CVTRec__Cosmics_Cross11_ID",&vec_CVTRec__Cosmics_Cross11_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross12_ID")==true){
         CVTRec__Cosmics_Cross12_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross12_ID");
         tree->Branch("CVTRec__Cosmics_Cross12_ID",&vec_CVTRec__Cosmics_Cross12_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross13_ID")==true){
         CVTRec__Cosmics_Cross13_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross13_ID");
         tree->Branch("CVTRec__Cosmics_Cross13_ID",&vec_CVTRec__Cosmics_Cross13_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross14_ID")==true){
         CVTRec__Cosmics_Cross14_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross14_ID");
         tree->Branch("CVTRec__Cosmics_Cross14_ID",&vec_CVTRec__Cosmics_Cross14_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross15_ID")==true){
         CVTRec__Cosmics_Cross15_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross15_ID");
         tree->Branch("CVTRec__Cosmics_Cross15_ID",&vec_CVTRec__Cosmics_Cross15_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross16_ID")==true){
         CVTRec__Cosmics_Cross16_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross16_ID");
         tree->Branch("CVTRec__Cosmics_Cross16_ID",&vec_CVTRec__Cosmics_Cross16_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross17_ID")==true){
         CVTRec__Cosmics_Cross17_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross17_ID");
         tree->Branch("CVTRec__Cosmics_Cross17_ID",&vec_CVTRec__Cosmics_Cross17_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross18_ID")==true){
         CVTRec__Cosmics_Cross18_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross18_ID");
         tree->Branch("CVTRec__Cosmics_Cross18_ID",&vec_CVTRec__Cosmics_Cross18_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross1_ID")==true){
         CVTRec__Cosmics_Cross1_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross1_ID");
         tree->Branch("CVTRec__Cosmics_Cross1_ID",&vec_CVTRec__Cosmics_Cross1_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross2_ID")==true){
         CVTRec__Cosmics_Cross2_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross2_ID");
         tree->Branch("CVTRec__Cosmics_Cross2_ID",&vec_CVTRec__Cosmics_Cross2_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross3_ID")==true){
         CVTRec__Cosmics_Cross3_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross3_ID");
         tree->Branch("CVTRec__Cosmics_Cross3_ID",&vec_CVTRec__Cosmics_Cross3_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross4_ID")==true){
         CVTRec__Cosmics_Cross4_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross4_ID");
         tree->Branch("CVTRec__Cosmics_Cross4_ID",&vec_CVTRec__Cosmics_Cross4_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross5_ID")==true){
         CVTRec__Cosmics_Cross5_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross5_ID");
         tree->Branch("CVTRec__Cosmics_Cross5_ID",&vec_CVTRec__Cosmics_Cross5_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross6_ID")==true){
         CVTRec__Cosmics_Cross6_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross6_ID");
         tree->Branch("CVTRec__Cosmics_Cross6_ID",&vec_CVTRec__Cosmics_Cross6_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross7_ID")==true){
         CVTRec__Cosmics_Cross7_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross7_ID");
         tree->Branch("CVTRec__Cosmics_Cross7_ID",&vec_CVTRec__Cosmics_Cross7_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross8_ID")==true){
         CVTRec__Cosmics_Cross8_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross8_ID");
         tree->Branch("CVTRec__Cosmics_Cross8_ID",&vec_CVTRec__Cosmics_Cross8_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross9_ID")==true){
         CVTRec__Cosmics_Cross9_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","Cross9_ID");
         tree->Branch("CVTRec__Cosmics_Cross9_ID",&vec_CVTRec__Cosmics_Cross9_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","ID")==true){
         CVTRec__Cosmics_ID = reader.getBranch<int16_t>   ("CVTRec::Cosmics","ID");
         tree->Branch("CVTRec__Cosmics_ID",&vec_CVTRec__Cosmics_ID);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","chi2")==true){
         CVTRec__Cosmics_chi2 = reader.getBranch<float>     ("CVTRec::Cosmics","chi2");
         tree->Branch("CVTRec__Cosmics_chi2",&vec_CVTRec__Cosmics_chi2);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","ndf")==true){
         CVTRec__Cosmics_ndf = reader.getBranch<int16_t>   ("CVTRec::Cosmics","ndf");
         tree->Branch("CVTRec__Cosmics_ndf",&vec_CVTRec__Cosmics_ndf);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","phi")==true){
         CVTRec__Cosmics_phi = reader.getBranch<float>     ("CVTRec::Cosmics","phi");
         tree->Branch("CVTRec__Cosmics_phi",&vec_CVTRec__Cosmics_phi);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","theta")==true){
         CVTRec__Cosmics_theta = reader.getBranch<float>     ("CVTRec::Cosmics","theta");
         tree->Branch("CVTRec__Cosmics_theta",&vec_CVTRec__Cosmics_theta);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","trkline_yx_interc")==true){
         CVTRec__Cosmics_trkline_yx_interc = reader.getBranch<float>     ("CVTRec::Cosmics","trkline_yx_interc");
         tree->Branch("CVTRec__Cosmics_trkline_yx_interc",&vec_CVTRec__Cosmics_trkline_yx_interc);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","trkline_yx_slope")==true){
         CVTRec__Cosmics_trkline_yx_slope = reader.getBranch<float>     ("CVTRec::Cosmics","trkline_yx_slope");
         tree->Branch("CVTRec__Cosmics_trkline_yx_slope",&vec_CVTRec__Cosmics_trkline_yx_slope);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","trkline_yz_interc")==true){
         CVTRec__Cosmics_trkline_yz_interc = reader.getBranch<float>     ("CVTRec::Cosmics","trkline_yz_interc");
         tree->Branch("CVTRec__Cosmics_trkline_yz_interc",&vec_CVTRec__Cosmics_trkline_yz_interc);
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","trkline_yz_slope")==true){
         CVTRec__Cosmics_trkline_yz_slope = reader.getBranch<float>     ("CVTRec::Cosmics","trkline_yz_slope");
         tree->Branch("CVTRec__Cosmics_trkline_yz_slope",&vec_CVTRec__Cosmics_trkline_yz_slope);
      }
   }
   hipo::node<int16_t>   *CVTRec__Tracks_Cross1_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross1_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_Cross2_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross2_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_Cross3_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross3_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_Cross4_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross4_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_Cross5_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross5_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_Cross6_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross6_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_Cross7_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross7_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_Cross8_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross8_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_Cross9_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_Cross9_ID;
   hipo::node<int16_t>   *CVTRec__Tracks_ID;
   std::vector<Short_t>   vec_CVTRec__Tracks_ID;
   hipo::node<float>     *CVTRec__Tracks_c_ux;
   std::vector<Float_t>   vec_CVTRec__Tracks_c_ux;
   hipo::node<float>     *CVTRec__Tracks_c_uy;
   std::vector<Float_t>   vec_CVTRec__Tracks_c_uy;
   hipo::node<float>     *CVTRec__Tracks_c_uz;
   std::vector<Float_t>   vec_CVTRec__Tracks_c_uz;
   hipo::node<float>     *CVTRec__Tracks_c_x;
   std::vector<Float_t>   vec_CVTRec__Tracks_c_x;
   hipo::node<float>     *CVTRec__Tracks_c_y;
   std::vector<Float_t>   vec_CVTRec__Tracks_c_y;
   hipo::node<float>     *CVTRec__Tracks_c_z;
   std::vector<Float_t>   vec_CVTRec__Tracks_c_z;
   hipo::node<float>     *CVTRec__Tracks_chi2;
   std::vector<Float_t>   vec_CVTRec__Tracks_chi2;
   hipo::node<float>     *CVTRec__Tracks_circlefit_chi2_per_ndf;
   std::vector<Float_t>   vec_CVTRec__Tracks_circlefit_chi2_per_ndf;
   hipo::node<float>     *CVTRec__Tracks_cov_d02;
   std::vector<Float_t>   vec_CVTRec__Tracks_cov_d02;
   hipo::node<float>     *CVTRec__Tracks_cov_d0phi0;
   std::vector<Float_t>   vec_CVTRec__Tracks_cov_d0phi0;
   hipo::node<float>     *CVTRec__Tracks_cov_d0rho;
   std::vector<Float_t>   vec_CVTRec__Tracks_cov_d0rho;
   hipo::node<float>     *CVTRec__Tracks_cov_phi02;
   std::vector<Float_t>   vec_CVTRec__Tracks_cov_phi02;
   hipo::node<float>     *CVTRec__Tracks_cov_phi0rho;
   std::vector<Float_t>   vec_CVTRec__Tracks_cov_phi0rho;
   hipo::node<float>     *CVTRec__Tracks_cov_rho2;
   std::vector<Float_t>   vec_CVTRec__Tracks_cov_rho2;
   hipo::node<float>     *CVTRec__Tracks_cov_tandip2;
   std::vector<Float_t>   vec_CVTRec__Tracks_cov_tandip2;
   hipo::node<float>     *CVTRec__Tracks_cov_z02;
   std::vector<Float_t>   vec_CVTRec__Tracks_cov_z02;
   hipo::node<float>     *CVTRec__Tracks_d0;
   std::vector<Float_t>   vec_CVTRec__Tracks_d0;
   hipo::node<int8_t>    *CVTRec__Tracks_fittingMethod;
   std::vector<Char_t>   vec_CVTRec__Tracks_fittingMethod;
   hipo::node<float>     *CVTRec__Tracks_linefit_chi2_per_ndf;
   std::vector<Float_t>   vec_CVTRec__Tracks_linefit_chi2_per_ndf;
   hipo::node<int16_t>   *CVTRec__Tracks_ndf;
   std::vector<Short_t>   vec_CVTRec__Tracks_ndf;
   hipo::node<float>     *CVTRec__Tracks_p;
   std::vector<Float_t>   vec_CVTRec__Tracks_p;
   hipo::node<float>     *CVTRec__Tracks_pathlength;
   std::vector<Float_t>   vec_CVTRec__Tracks_pathlength;
   hipo::node<float>     *CVTRec__Tracks_phi0;
   std::vector<Float_t>   vec_CVTRec__Tracks_phi0;
   hipo::node<float>     *CVTRec__Tracks_pt;
   std::vector<Float_t>   vec_CVTRec__Tracks_pt;
   hipo::node<int8_t>    *CVTRec__Tracks_q;
   std::vector<Char_t>   vec_CVTRec__Tracks_q;
   hipo::node<float>     *CVTRec__Tracks_tandip;
   std::vector<Float_t>   vec_CVTRec__Tracks_tandip;
   hipo::node<float>     *CVTRec__Tracks_z0;
   std::vector<Float_t>   vec_CVTRec__Tracks_z0;
   if(dictionary->hasSchema("CVTRec::Tracks")==true){
      if(dictionary->hasEntry("CVTRec::Tracks","Cross1_ID")==true){
         CVTRec__Tracks_Cross1_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross1_ID");
         tree->Branch("CVTRec__Tracks_Cross1_ID",&vec_CVTRec__Tracks_Cross1_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross2_ID")==true){
         CVTRec__Tracks_Cross2_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross2_ID");
         tree->Branch("CVTRec__Tracks_Cross2_ID",&vec_CVTRec__Tracks_Cross2_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross3_ID")==true){
         CVTRec__Tracks_Cross3_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross3_ID");
         tree->Branch("CVTRec__Tracks_Cross3_ID",&vec_CVTRec__Tracks_Cross3_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross4_ID")==true){
         CVTRec__Tracks_Cross4_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross4_ID");
         tree->Branch("CVTRec__Tracks_Cross4_ID",&vec_CVTRec__Tracks_Cross4_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross5_ID")==true){
         CVTRec__Tracks_Cross5_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross5_ID");
         tree->Branch("CVTRec__Tracks_Cross5_ID",&vec_CVTRec__Tracks_Cross5_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross6_ID")==true){
         CVTRec__Tracks_Cross6_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross6_ID");
         tree->Branch("CVTRec__Tracks_Cross6_ID",&vec_CVTRec__Tracks_Cross6_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross7_ID")==true){
         CVTRec__Tracks_Cross7_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross7_ID");
         tree->Branch("CVTRec__Tracks_Cross7_ID",&vec_CVTRec__Tracks_Cross7_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross8_ID")==true){
         CVTRec__Tracks_Cross8_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross8_ID");
         tree->Branch("CVTRec__Tracks_Cross8_ID",&vec_CVTRec__Tracks_Cross8_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross9_ID")==true){
         CVTRec__Tracks_Cross9_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","Cross9_ID");
         tree->Branch("CVTRec__Tracks_Cross9_ID",&vec_CVTRec__Tracks_Cross9_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","ID")==true){
         CVTRec__Tracks_ID = reader.getBranch<int16_t>   ("CVTRec::Tracks","ID");
         tree->Branch("CVTRec__Tracks_ID",&vec_CVTRec__Tracks_ID);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_ux")==true){
         CVTRec__Tracks_c_ux = reader.getBranch<float>     ("CVTRec::Tracks","c_ux");
         tree->Branch("CVTRec__Tracks_c_ux",&vec_CVTRec__Tracks_c_ux);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_uy")==true){
         CVTRec__Tracks_c_uy = reader.getBranch<float>     ("CVTRec::Tracks","c_uy");
         tree->Branch("CVTRec__Tracks_c_uy",&vec_CVTRec__Tracks_c_uy);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_uz")==true){
         CVTRec__Tracks_c_uz = reader.getBranch<float>     ("CVTRec::Tracks","c_uz");
         tree->Branch("CVTRec__Tracks_c_uz",&vec_CVTRec__Tracks_c_uz);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_x")==true){
         CVTRec__Tracks_c_x = reader.getBranch<float>     ("CVTRec::Tracks","c_x");
         tree->Branch("CVTRec__Tracks_c_x",&vec_CVTRec__Tracks_c_x);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_y")==true){
         CVTRec__Tracks_c_y = reader.getBranch<float>     ("CVTRec::Tracks","c_y");
         tree->Branch("CVTRec__Tracks_c_y",&vec_CVTRec__Tracks_c_y);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_z")==true){
         CVTRec__Tracks_c_z = reader.getBranch<float>     ("CVTRec::Tracks","c_z");
         tree->Branch("CVTRec__Tracks_c_z",&vec_CVTRec__Tracks_c_z);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","chi2")==true){
         CVTRec__Tracks_chi2 = reader.getBranch<float>     ("CVTRec::Tracks","chi2");
         tree->Branch("CVTRec__Tracks_chi2",&vec_CVTRec__Tracks_chi2);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","circlefit_chi2_per_ndf")==true){
         CVTRec__Tracks_circlefit_chi2_per_ndf = reader.getBranch<float>     ("CVTRec::Tracks","circlefit_chi2_per_ndf");
         tree->Branch("CVTRec__Tracks_circlefit_chi2_per_ndf",&vec_CVTRec__Tracks_circlefit_chi2_per_ndf);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_d02")==true){
         CVTRec__Tracks_cov_d02 = reader.getBranch<float>     ("CVTRec::Tracks","cov_d02");
         tree->Branch("CVTRec__Tracks_cov_d02",&vec_CVTRec__Tracks_cov_d02);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_d0phi0")==true){
         CVTRec__Tracks_cov_d0phi0 = reader.getBranch<float>     ("CVTRec::Tracks","cov_d0phi0");
         tree->Branch("CVTRec__Tracks_cov_d0phi0",&vec_CVTRec__Tracks_cov_d0phi0);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_d0rho")==true){
         CVTRec__Tracks_cov_d0rho = reader.getBranch<float>     ("CVTRec::Tracks","cov_d0rho");
         tree->Branch("CVTRec__Tracks_cov_d0rho",&vec_CVTRec__Tracks_cov_d0rho);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_phi02")==true){
         CVTRec__Tracks_cov_phi02 = reader.getBranch<float>     ("CVTRec::Tracks","cov_phi02");
         tree->Branch("CVTRec__Tracks_cov_phi02",&vec_CVTRec__Tracks_cov_phi02);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_phi0rho")==true){
         CVTRec__Tracks_cov_phi0rho = reader.getBranch<float>     ("CVTRec::Tracks","cov_phi0rho");
         tree->Branch("CVTRec__Tracks_cov_phi0rho",&vec_CVTRec__Tracks_cov_phi0rho);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_rho2")==true){
         CVTRec__Tracks_cov_rho2 = reader.getBranch<float>     ("CVTRec::Tracks","cov_rho2");
         tree->Branch("CVTRec__Tracks_cov_rho2",&vec_CVTRec__Tracks_cov_rho2);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_tandip2")==true){
         CVTRec__Tracks_cov_tandip2 = reader.getBranch<float>     ("CVTRec::Tracks","cov_tandip2");
         tree->Branch("CVTRec__Tracks_cov_tandip2",&vec_CVTRec__Tracks_cov_tandip2);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_z02")==true){
         CVTRec__Tracks_cov_z02 = reader.getBranch<float>     ("CVTRec::Tracks","cov_z02");
         tree->Branch("CVTRec__Tracks_cov_z02",&vec_CVTRec__Tracks_cov_z02);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","d0")==true){
         CVTRec__Tracks_d0 = reader.getBranch<float>     ("CVTRec::Tracks","d0");
         tree->Branch("CVTRec__Tracks_d0",&vec_CVTRec__Tracks_d0);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","fittingMethod")==true){
         CVTRec__Tracks_fittingMethod = reader.getBranch<int8_t>    ("CVTRec::Tracks","fittingMethod");
         tree->Branch("CVTRec__Tracks_fittingMethod",&vec_CVTRec__Tracks_fittingMethod);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","linefit_chi2_per_ndf")==true){
         CVTRec__Tracks_linefit_chi2_per_ndf = reader.getBranch<float>     ("CVTRec::Tracks","linefit_chi2_per_ndf");
         tree->Branch("CVTRec__Tracks_linefit_chi2_per_ndf",&vec_CVTRec__Tracks_linefit_chi2_per_ndf);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","ndf")==true){
         CVTRec__Tracks_ndf = reader.getBranch<int16_t>   ("CVTRec::Tracks","ndf");
         tree->Branch("CVTRec__Tracks_ndf",&vec_CVTRec__Tracks_ndf);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","p")==true){
         CVTRec__Tracks_p = reader.getBranch<float>     ("CVTRec::Tracks","p");
         tree->Branch("CVTRec__Tracks_p",&vec_CVTRec__Tracks_p);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","pathlength")==true){
         CVTRec__Tracks_pathlength = reader.getBranch<float>     ("CVTRec::Tracks","pathlength");
         tree->Branch("CVTRec__Tracks_pathlength",&vec_CVTRec__Tracks_pathlength);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","phi0")==true){
         CVTRec__Tracks_phi0 = reader.getBranch<float>     ("CVTRec::Tracks","phi0");
         tree->Branch("CVTRec__Tracks_phi0",&vec_CVTRec__Tracks_phi0);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","pt")==true){
         CVTRec__Tracks_pt = reader.getBranch<float>     ("CVTRec::Tracks","pt");
         tree->Branch("CVTRec__Tracks_pt",&vec_CVTRec__Tracks_pt);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","q")==true){
         CVTRec__Tracks_q = reader.getBranch<int8_t>    ("CVTRec::Tracks","q");
         tree->Branch("CVTRec__Tracks_q",&vec_CVTRec__Tracks_q);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","tandip")==true){
         CVTRec__Tracks_tandip = reader.getBranch<float>     ("CVTRec::Tracks","tandip");
         tree->Branch("CVTRec__Tracks_tandip",&vec_CVTRec__Tracks_tandip);
      }
      if(dictionary->hasEntry("CVTRec::Tracks","z0")==true){
         CVTRec__Tracks_z0 = reader.getBranch<float>     ("CVTRec::Tracks","z0");
         tree->Branch("CVTRec__Tracks_z0",&vec_CVTRec__Tracks_z0);
      }
   }
   hipo::node<float>     *CVTRec__Trajectory_CalcCentroidStrip;
   std::vector<Float_t>   vec_CVTRec__Trajectory_CalcCentroidStrip;
   hipo::node<int16_t>   *CVTRec__Trajectory_ID;
   std::vector<Short_t>   vec_CVTRec__Trajectory_ID;
   hipo::node<int8_t>    *CVTRec__Trajectory_LayerTrackIntersPlane;
   std::vector<Char_t>   vec_CVTRec__Trajectory_LayerTrackIntersPlane;
   hipo::node<float>     *CVTRec__Trajectory_PhiTrackIntersPlane;
   std::vector<Float_t>   vec_CVTRec__Trajectory_PhiTrackIntersPlane;
   hipo::node<int8_t>    *CVTRec__Trajectory_SectorTrackIntersPlane;
   std::vector<Char_t>   vec_CVTRec__Trajectory_SectorTrackIntersPlane;
   hipo::node<float>     *CVTRec__Trajectory_ThetaTrackIntersPlane;
   std::vector<Float_t>   vec_CVTRec__Trajectory_ThetaTrackIntersPlane;
   hipo::node<float>     *CVTRec__Trajectory_XtrackIntersPlane;
   std::vector<Float_t>   vec_CVTRec__Trajectory_XtrackIntersPlane;
   hipo::node<float>     *CVTRec__Trajectory_YtrackIntersPlane;
   std::vector<Float_t>   vec_CVTRec__Trajectory_YtrackIntersPlane;
   hipo::node<float>     *CVTRec__Trajectory_ZtrackIntersPlane;
   std::vector<Float_t>   vec_CVTRec__Trajectory_ZtrackIntersPlane;
   hipo::node<float>     *CVTRec__Trajectory_trkToMPlnAngl;
   std::vector<Float_t>   vec_CVTRec__Trajectory_trkToMPlnAngl;
   if(dictionary->hasSchema("CVTRec::Trajectory")==true){
      if(dictionary->hasEntry("CVTRec::Trajectory","CalcCentroidStrip")==true){
         CVTRec__Trajectory_CalcCentroidStrip = reader.getBranch<float>     ("CVTRec::Trajectory","CalcCentroidStrip");
         tree->Branch("CVTRec__Trajectory_CalcCentroidStrip",&vec_CVTRec__Trajectory_CalcCentroidStrip);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","ID")==true){
         CVTRec__Trajectory_ID = reader.getBranch<int16_t>   ("CVTRec::Trajectory","ID");
         tree->Branch("CVTRec__Trajectory_ID",&vec_CVTRec__Trajectory_ID);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","LayerTrackIntersPlane")==true){
         CVTRec__Trajectory_LayerTrackIntersPlane = reader.getBranch<int8_t>    ("CVTRec::Trajectory","LayerTrackIntersPlane");
         tree->Branch("CVTRec__Trajectory_LayerTrackIntersPlane",&vec_CVTRec__Trajectory_LayerTrackIntersPlane);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","PhiTrackIntersPlane")==true){
         CVTRec__Trajectory_PhiTrackIntersPlane = reader.getBranch<float>     ("CVTRec::Trajectory","PhiTrackIntersPlane");
         tree->Branch("CVTRec__Trajectory_PhiTrackIntersPlane",&vec_CVTRec__Trajectory_PhiTrackIntersPlane);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","SectorTrackIntersPlane")==true){
         CVTRec__Trajectory_SectorTrackIntersPlane = reader.getBranch<int8_t>    ("CVTRec::Trajectory","SectorTrackIntersPlane");
         tree->Branch("CVTRec__Trajectory_SectorTrackIntersPlane",&vec_CVTRec__Trajectory_SectorTrackIntersPlane);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","ThetaTrackIntersPlane")==true){
         CVTRec__Trajectory_ThetaTrackIntersPlane = reader.getBranch<float>     ("CVTRec::Trajectory","ThetaTrackIntersPlane");
         tree->Branch("CVTRec__Trajectory_ThetaTrackIntersPlane",&vec_CVTRec__Trajectory_ThetaTrackIntersPlane);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","XtrackIntersPlane")==true){
         CVTRec__Trajectory_XtrackIntersPlane = reader.getBranch<float>     ("CVTRec::Trajectory","XtrackIntersPlane");
         tree->Branch("CVTRec__Trajectory_XtrackIntersPlane",&vec_CVTRec__Trajectory_XtrackIntersPlane);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","YtrackIntersPlane")==true){
         CVTRec__Trajectory_YtrackIntersPlane = reader.getBranch<float>     ("CVTRec::Trajectory","YtrackIntersPlane");
         tree->Branch("CVTRec__Trajectory_YtrackIntersPlane",&vec_CVTRec__Trajectory_YtrackIntersPlane);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","ZtrackIntersPlane")==true){
         CVTRec__Trajectory_ZtrackIntersPlane = reader.getBranch<float>     ("CVTRec::Trajectory","ZtrackIntersPlane");
         tree->Branch("CVTRec__Trajectory_ZtrackIntersPlane",&vec_CVTRec__Trajectory_ZtrackIntersPlane);
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","trkToMPlnAngl")==true){
         CVTRec__Trajectory_trkToMPlnAngl = reader.getBranch<float>     ("CVTRec::Trajectory","trkToMPlnAngl");
         tree->Branch("CVTRec__Trajectory_trkToMPlnAngl",&vec_CVTRec__Trajectory_trkToMPlnAngl);
      }
   }
   hipo::node<int8_t>    *DC__doca_LR;
   std::vector<Char_t>   vec_DC__doca_LR;
   hipo::node<float>     *DC__doca_doca;
   std::vector<Float_t>   vec_DC__doca_doca;
   hipo::node<float>     *DC__doca_sdoca;
   std::vector<Float_t>   vec_DC__doca_sdoca;
   hipo::node<float>     *DC__doca_stime;
   std::vector<Float_t>   vec_DC__doca_stime;
   hipo::node<float>     *DC__doca_time;
   std::vector<Float_t>   vec_DC__doca_time;
   if(dictionary->hasSchema("DC::doca")==true){
      if(dictionary->hasEntry("DC::doca","LR")==true){
         DC__doca_LR = reader.getBranch<int8_t>    ("DC::doca","LR");
         tree->Branch("DC__doca_LR",&vec_DC__doca_LR);
      }
      if(dictionary->hasEntry("DC::doca","doca")==true){
         DC__doca_doca = reader.getBranch<float>     ("DC::doca","doca");
         tree->Branch("DC__doca_doca",&vec_DC__doca_doca);
      }
      if(dictionary->hasEntry("DC::doca","sdoca")==true){
         DC__doca_sdoca = reader.getBranch<float>     ("DC::doca","sdoca");
         tree->Branch("DC__doca_sdoca",&vec_DC__doca_sdoca);
      }
      if(dictionary->hasEntry("DC::doca","stime")==true){
         DC__doca_stime = reader.getBranch<float>     ("DC::doca","stime");
         tree->Branch("DC__doca_stime",&vec_DC__doca_stime);
      }
      if(dictionary->hasEntry("DC::doca","time")==true){
         DC__doca_time = reader.getBranch<float>     ("DC::doca","time");
         tree->Branch("DC__doca_time",&vec_DC__doca_time);
      }
   }
   hipo::node<int32_t>   *DC__tdc_TDC;
   std::vector<Int_t>   vec_DC__tdc_TDC;
   hipo::node<int16_t>   *DC__tdc_component;
   std::vector<Short_t>   vec_DC__tdc_component;
   hipo::node<int8_t>    *DC__tdc_layer;
   std::vector<Char_t>   vec_DC__tdc_layer;
   hipo::node<int8_t>    *DC__tdc_order;
   std::vector<Char_t>   vec_DC__tdc_order;
   hipo::node<int8_t>    *DC__tdc_sector;
   std::vector<Char_t>   vec_DC__tdc_sector;
   if(dictionary->hasSchema("DC::tdc")==true){
      if(dictionary->hasEntry("DC::tdc","TDC")==true){
         DC__tdc_TDC = reader.getBranch<int32_t>   ("DC::tdc","TDC");
         tree->Branch("DC__tdc_TDC",&vec_DC__tdc_TDC);
      }
      if(dictionary->hasEntry("DC::tdc","component")==true){
         DC__tdc_component = reader.getBranch<int16_t>   ("DC::tdc","component");
         tree->Branch("DC__tdc_component",&vec_DC__tdc_component);
      }
      if(dictionary->hasEntry("DC::tdc","layer")==true){
         DC__tdc_layer = reader.getBranch<int8_t>    ("DC::tdc","layer");
         tree->Branch("DC__tdc_layer",&vec_DC__tdc_layer);
      }
      if(dictionary->hasEntry("DC::tdc","order")==true){
         DC__tdc_order = reader.getBranch<int8_t>    ("DC::tdc","order");
         tree->Branch("DC__tdc_order",&vec_DC__tdc_order);
      }
      if(dictionary->hasEntry("DC::tdc","sector")==true){
         DC__tdc_sector = reader.getBranch<int8_t>    ("DC::tdc","sector");
         tree->Branch("DC__tdc_sector",&vec_DC__tdc_sector);
      }
   }
   hipo::node<int16_t>   *DETECTOR__Hits_component;
   std::vector<Short_t>   vec_DETECTOR__Hits_component;
   hipo::node<int16_t>   *DETECTOR__Hits_detector;
   std::vector<Short_t>   vec_DETECTOR__Hits_detector;
   hipo::node<float>     *DETECTOR__Hits_energy;
   std::vector<Float_t>   vec_DETECTOR__Hits_energy;
   hipo::node<int16_t>   *DETECTOR__Hits_layer;
   std::vector<Short_t>   vec_DETECTOR__Hits_layer;
   hipo::node<float>     *DETECTOR__Hits_path;
   std::vector<Float_t>   vec_DETECTOR__Hits_path;
   hipo::node<int16_t>   *DETECTOR__Hits_sector;
   std::vector<Short_t>   vec_DETECTOR__Hits_sector;
   hipo::node<float>     *DETECTOR__Hits_time;
   std::vector<Float_t>   vec_DETECTOR__Hits_time;
   if(dictionary->hasSchema("DETECTOR::Hits")==true){
      if(dictionary->hasEntry("DETECTOR::Hits","component")==true){
         DETECTOR__Hits_component = reader.getBranch<int16_t>   ("DETECTOR::Hits","component");
         tree->Branch("DETECTOR__Hits_component",&vec_DETECTOR__Hits_component);
      }
      if(dictionary->hasEntry("DETECTOR::Hits","detector")==true){
         DETECTOR__Hits_detector = reader.getBranch<int16_t>   ("DETECTOR::Hits","detector");
         tree->Branch("DETECTOR__Hits_detector",&vec_DETECTOR__Hits_detector);
      }
      if(dictionary->hasEntry("DETECTOR::Hits","energy")==true){
         DETECTOR__Hits_energy = reader.getBranch<float>     ("DETECTOR::Hits","energy");
         tree->Branch("DETECTOR__Hits_energy",&vec_DETECTOR__Hits_energy);
      }
      if(dictionary->hasEntry("DETECTOR::Hits","layer")==true){
         DETECTOR__Hits_layer = reader.getBranch<int16_t>   ("DETECTOR::Hits","layer");
         tree->Branch("DETECTOR__Hits_layer",&vec_DETECTOR__Hits_layer);
      }
      if(dictionary->hasEntry("DETECTOR::Hits","path")==true){
         DETECTOR__Hits_path = reader.getBranch<float>     ("DETECTOR::Hits","path");
         tree->Branch("DETECTOR__Hits_path",&vec_DETECTOR__Hits_path);
      }
      if(dictionary->hasEntry("DETECTOR::Hits","sector")==true){
         DETECTOR__Hits_sector = reader.getBranch<int16_t>   ("DETECTOR::Hits","sector");
         tree->Branch("DETECTOR__Hits_sector",&vec_DETECTOR__Hits_sector);
      }
      if(dictionary->hasEntry("DETECTOR::Hits","time")==true){
         DETECTOR__Hits_time = reader.getBranch<float>     ("DETECTOR::Hits","time");
         tree->Branch("DETECTOR__Hits_time",&vec_DETECTOR__Hits_time);
      }
   }
   hipo::node<float>     *DETECTOR__ccpb_nphe;
   std::vector<Float_t>   vec_DETECTOR__ccpb_nphe;
   hipo::node<float>     *DETECTOR__ccpb_path;
   std::vector<Float_t>   vec_DETECTOR__ccpb_path;
   hipo::node<int8_t>    *DETECTOR__ccpb_sector;
   std::vector<Char_t>   vec_DETECTOR__ccpb_sector;
   hipo::node<float>     *DETECTOR__ccpb_time;
   std::vector<Float_t>   vec_DETECTOR__ccpb_time;
   if(dictionary->hasSchema("DETECTOR::ccpb")==true){
      if(dictionary->hasEntry("DETECTOR::ccpb","nphe")==true){
         DETECTOR__ccpb_nphe = reader.getBranch<float>     ("DETECTOR::ccpb","nphe");
         tree->Branch("DETECTOR__ccpb_nphe",&vec_DETECTOR__ccpb_nphe);
      }
      if(dictionary->hasEntry("DETECTOR::ccpb","path")==true){
         DETECTOR__ccpb_path = reader.getBranch<float>     ("DETECTOR::ccpb","path");
         tree->Branch("DETECTOR__ccpb_path",&vec_DETECTOR__ccpb_path);
      }
      if(dictionary->hasEntry("DETECTOR::ccpb","sector")==true){
         DETECTOR__ccpb_sector = reader.getBranch<int8_t>    ("DETECTOR::ccpb","sector");
         tree->Branch("DETECTOR__ccpb_sector",&vec_DETECTOR__ccpb_sector);
      }
      if(dictionary->hasEntry("DETECTOR::ccpb","time")==true){
         DETECTOR__ccpb_time = reader.getBranch<float>     ("DETECTOR::ccpb","time");
         tree->Branch("DETECTOR__ccpb_time",&vec_DETECTOR__ccpb_time);
      }
   }
   hipo::node<float>     *DETECTOR__ecpb_ein;
   std::vector<Float_t>   vec_DETECTOR__ecpb_ein;
   hipo::node<float>     *DETECTOR__ecpb_eout;
   std::vector<Float_t>   vec_DETECTOR__ecpb_eout;
   hipo::node<float>     *DETECTOR__ecpb_etot;
   std::vector<Float_t>   vec_DETECTOR__ecpb_etot;
   hipo::node<float>     *DETECTOR__ecpb_path;
   std::vector<Float_t>   vec_DETECTOR__ecpb_path;
   hipo::node<int8_t>    *DETECTOR__ecpb_sector;
   std::vector<Char_t>   vec_DETECTOR__ecpb_sector;
   hipo::node<float>     *DETECTOR__ecpb_time;
   std::vector<Float_t>   vec_DETECTOR__ecpb_time;
   hipo::node<float>     *DETECTOR__ecpb_x;
   std::vector<Float_t>   vec_DETECTOR__ecpb_x;
   hipo::node<float>     *DETECTOR__ecpb_y;
   std::vector<Float_t>   vec_DETECTOR__ecpb_y;
   hipo::node<float>     *DETECTOR__ecpb_z;
   std::vector<Float_t>   vec_DETECTOR__ecpb_z;
   if(dictionary->hasSchema("DETECTOR::ecpb")==true){
      if(dictionary->hasEntry("DETECTOR::ecpb","ein")==true){
         DETECTOR__ecpb_ein = reader.getBranch<float>     ("DETECTOR::ecpb","ein");
         tree->Branch("DETECTOR__ecpb_ein",&vec_DETECTOR__ecpb_ein);
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","eout")==true){
         DETECTOR__ecpb_eout = reader.getBranch<float>     ("DETECTOR::ecpb","eout");
         tree->Branch("DETECTOR__ecpb_eout",&vec_DETECTOR__ecpb_eout);
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","etot")==true){
         DETECTOR__ecpb_etot = reader.getBranch<float>     ("DETECTOR::ecpb","etot");
         tree->Branch("DETECTOR__ecpb_etot",&vec_DETECTOR__ecpb_etot);
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","path")==true){
         DETECTOR__ecpb_path = reader.getBranch<float>     ("DETECTOR::ecpb","path");
         tree->Branch("DETECTOR__ecpb_path",&vec_DETECTOR__ecpb_path);
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","sector")==true){
         DETECTOR__ecpb_sector = reader.getBranch<int8_t>    ("DETECTOR::ecpb","sector");
         tree->Branch("DETECTOR__ecpb_sector",&vec_DETECTOR__ecpb_sector);
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","time")==true){
         DETECTOR__ecpb_time = reader.getBranch<float>     ("DETECTOR::ecpb","time");
         tree->Branch("DETECTOR__ecpb_time",&vec_DETECTOR__ecpb_time);
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","x")==true){
         DETECTOR__ecpb_x = reader.getBranch<float>     ("DETECTOR::ecpb","x");
         tree->Branch("DETECTOR__ecpb_x",&vec_DETECTOR__ecpb_x);
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","y")==true){
         DETECTOR__ecpb_y = reader.getBranch<float>     ("DETECTOR::ecpb","y");
         tree->Branch("DETECTOR__ecpb_y",&vec_DETECTOR__ecpb_y);
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","z")==true){
         DETECTOR__ecpb_z = reader.getBranch<float>     ("DETECTOR::ecpb","z");
         tree->Branch("DETECTOR__ecpb_z",&vec_DETECTOR__ecpb_z);
      }
   }
   hipo::node<float>     *DETECTOR__icpb_ecc;
   std::vector<Float_t>   vec_DETECTOR__icpb_ecc;
   hipo::node<float>     *DETECTOR__icpb_etc;
   std::vector<Float_t>   vec_DETECTOR__icpb_etc;
   hipo::node<float>     *DETECTOR__icpb_tc;
   std::vector<Float_t>   vec_DETECTOR__icpb_tc;
   hipo::node<float>     *DETECTOR__icpb_xc;
   std::vector<Float_t>   vec_DETECTOR__icpb_xc;
   hipo::node<float>     *DETECTOR__icpb_yc;
   std::vector<Float_t>   vec_DETECTOR__icpb_yc;
   if(dictionary->hasSchema("DETECTOR::icpb")==true){
      if(dictionary->hasEntry("DETECTOR::icpb","ecc")==true){
         DETECTOR__icpb_ecc = reader.getBranch<float>     ("DETECTOR::icpb","ecc");
         tree->Branch("DETECTOR__icpb_ecc",&vec_DETECTOR__icpb_ecc);
      }
      if(dictionary->hasEntry("DETECTOR::icpb","etc")==true){
         DETECTOR__icpb_etc = reader.getBranch<float>     ("DETECTOR::icpb","etc");
         tree->Branch("DETECTOR__icpb_etc",&vec_DETECTOR__icpb_etc);
      }
      if(dictionary->hasEntry("DETECTOR::icpb","tc")==true){
         DETECTOR__icpb_tc = reader.getBranch<float>     ("DETECTOR::icpb","tc");
         tree->Branch("DETECTOR__icpb_tc",&vec_DETECTOR__icpb_tc);
      }
      if(dictionary->hasEntry("DETECTOR::icpb","xc")==true){
         DETECTOR__icpb_xc = reader.getBranch<float>     ("DETECTOR::icpb","xc");
         tree->Branch("DETECTOR__icpb_xc",&vec_DETECTOR__icpb_xc);
      }
      if(dictionary->hasEntry("DETECTOR::icpb","yc")==true){
         DETECTOR__icpb_yc = reader.getBranch<float>     ("DETECTOR::icpb","yc");
         tree->Branch("DETECTOR__icpb_yc",&vec_DETECTOR__icpb_yc);
      }
   }
   hipo::node<float>     *DETECTOR__lcpb_ein;
   std::vector<Float_t>   vec_DETECTOR__lcpb_ein;
   hipo::node<float>     *DETECTOR__lcpb_etot;
   std::vector<Float_t>   vec_DETECTOR__lcpb_etot;
   hipo::node<float>     *DETECTOR__lcpb_path;
   std::vector<Float_t>   vec_DETECTOR__lcpb_path;
   hipo::node<int8_t>    *DETECTOR__lcpb_sector;
   std::vector<Char_t>   vec_DETECTOR__lcpb_sector;
   hipo::node<float>     *DETECTOR__lcpb_time;
   std::vector<Float_t>   vec_DETECTOR__lcpb_time;
   hipo::node<float>     *DETECTOR__lcpb_x;
   std::vector<Float_t>   vec_DETECTOR__lcpb_x;
   hipo::node<float>     *DETECTOR__lcpb_y;
   std::vector<Float_t>   vec_DETECTOR__lcpb_y;
   hipo::node<float>     *DETECTOR__lcpb_z;
   std::vector<Float_t>   vec_DETECTOR__lcpb_z;
   if(dictionary->hasSchema("DETECTOR::lcpb")==true){
      if(dictionary->hasEntry("DETECTOR::lcpb","ein")==true){
         DETECTOR__lcpb_ein = reader.getBranch<float>     ("DETECTOR::lcpb","ein");
         tree->Branch("DETECTOR__lcpb_ein",&vec_DETECTOR__lcpb_ein);
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","etot")==true){
         DETECTOR__lcpb_etot = reader.getBranch<float>     ("DETECTOR::lcpb","etot");
         tree->Branch("DETECTOR__lcpb_etot",&vec_DETECTOR__lcpb_etot);
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","path")==true){
         DETECTOR__lcpb_path = reader.getBranch<float>     ("DETECTOR::lcpb","path");
         tree->Branch("DETECTOR__lcpb_path",&vec_DETECTOR__lcpb_path);
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","sector")==true){
         DETECTOR__lcpb_sector = reader.getBranch<int8_t>    ("DETECTOR::lcpb","sector");
         tree->Branch("DETECTOR__lcpb_sector",&vec_DETECTOR__lcpb_sector);
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","time")==true){
         DETECTOR__lcpb_time = reader.getBranch<float>     ("DETECTOR::lcpb","time");
         tree->Branch("DETECTOR__lcpb_time",&vec_DETECTOR__lcpb_time);
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","x")==true){
         DETECTOR__lcpb_x = reader.getBranch<float>     ("DETECTOR::lcpb","x");
         tree->Branch("DETECTOR__lcpb_x",&vec_DETECTOR__lcpb_x);
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","y")==true){
         DETECTOR__lcpb_y = reader.getBranch<float>     ("DETECTOR::lcpb","y");
         tree->Branch("DETECTOR__lcpb_y",&vec_DETECTOR__lcpb_y);
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","z")==true){
         DETECTOR__lcpb_z = reader.getBranch<float>     ("DETECTOR::lcpb","z");
         tree->Branch("DETECTOR__lcpb_z",&vec_DETECTOR__lcpb_z);
      }
   }
   hipo::node<float>     *DETECTOR__scpb_edep;
   std::vector<Float_t>   vec_DETECTOR__scpb_edep;
   hipo::node<int8_t>    *DETECTOR__scpb_paddle;
   std::vector<Char_t>   vec_DETECTOR__scpb_paddle;
   hipo::node<float>     *DETECTOR__scpb_path;
   std::vector<Float_t>   vec_DETECTOR__scpb_path;
   hipo::node<int8_t>    *DETECTOR__scpb_sector;
   std::vector<Char_t>   vec_DETECTOR__scpb_sector;
   hipo::node<float>     *DETECTOR__scpb_time;
   std::vector<Float_t>   vec_DETECTOR__scpb_time;
   if(dictionary->hasSchema("DETECTOR::scpb")==true){
      if(dictionary->hasEntry("DETECTOR::scpb","edep")==true){
         DETECTOR__scpb_edep = reader.getBranch<float>     ("DETECTOR::scpb","edep");
         tree->Branch("DETECTOR__scpb_edep",&vec_DETECTOR__scpb_edep);
      }
      if(dictionary->hasEntry("DETECTOR::scpb","paddle")==true){
         DETECTOR__scpb_paddle = reader.getBranch<int8_t>    ("DETECTOR::scpb","paddle");
         tree->Branch("DETECTOR__scpb_paddle",&vec_DETECTOR__scpb_paddle);
      }
      if(dictionary->hasEntry("DETECTOR::scpb","path")==true){
         DETECTOR__scpb_path = reader.getBranch<float>     ("DETECTOR::scpb","path");
         tree->Branch("DETECTOR__scpb_path",&vec_DETECTOR__scpb_path);
      }
      if(dictionary->hasEntry("DETECTOR::scpb","sector")==true){
         DETECTOR__scpb_sector = reader.getBranch<int8_t>    ("DETECTOR::scpb","sector");
         tree->Branch("DETECTOR__scpb_sector",&vec_DETECTOR__scpb_sector);
      }
      if(dictionary->hasEntry("DETECTOR::scpb","time")==true){
         DETECTOR__scpb_time = reader.getBranch<float>     ("DETECTOR::scpb","time");
         tree->Branch("DETECTOR__scpb_time",&vec_DETECTOR__scpb_time);
      }
   }
   hipo::node<int32_t>   *ECAL__adc_ADC;
   std::vector<Int_t>   vec_ECAL__adc_ADC;
   hipo::node<int16_t>   *ECAL__adc_component;
   std::vector<Short_t>   vec_ECAL__adc_component;
   hipo::node<int8_t>    *ECAL__adc_layer;
   std::vector<Char_t>   vec_ECAL__adc_layer;
   hipo::node<int8_t>    *ECAL__adc_order;
   std::vector<Char_t>   vec_ECAL__adc_order;
   hipo::node<int16_t>   *ECAL__adc_ped;
   std::vector<Short_t>   vec_ECAL__adc_ped;
   hipo::node<int8_t>    *ECAL__adc_sector;
   std::vector<Char_t>   vec_ECAL__adc_sector;
   hipo::node<float>     *ECAL__adc_time;
   std::vector<Float_t>   vec_ECAL__adc_time;
   if(dictionary->hasSchema("ECAL::adc")==true){
      if(dictionary->hasEntry("ECAL::adc","ADC")==true){
         ECAL__adc_ADC = reader.getBranch<int32_t>   ("ECAL::adc","ADC");
         tree->Branch("ECAL__adc_ADC",&vec_ECAL__adc_ADC);
      }
      if(dictionary->hasEntry("ECAL::adc","component")==true){
         ECAL__adc_component = reader.getBranch<int16_t>   ("ECAL::adc","component");
         tree->Branch("ECAL__adc_component",&vec_ECAL__adc_component);
      }
      if(dictionary->hasEntry("ECAL::adc","layer")==true){
         ECAL__adc_layer = reader.getBranch<int8_t>    ("ECAL::adc","layer");
         tree->Branch("ECAL__adc_layer",&vec_ECAL__adc_layer);
      }
      if(dictionary->hasEntry("ECAL::adc","order")==true){
         ECAL__adc_order = reader.getBranch<int8_t>    ("ECAL::adc","order");
         tree->Branch("ECAL__adc_order",&vec_ECAL__adc_order);
      }
      if(dictionary->hasEntry("ECAL::adc","ped")==true){
         ECAL__adc_ped = reader.getBranch<int16_t>   ("ECAL::adc","ped");
         tree->Branch("ECAL__adc_ped",&vec_ECAL__adc_ped);
      }
      if(dictionary->hasEntry("ECAL::adc","sector")==true){
         ECAL__adc_sector = reader.getBranch<int8_t>    ("ECAL::adc","sector");
         tree->Branch("ECAL__adc_sector",&vec_ECAL__adc_sector);
      }
      if(dictionary->hasEntry("ECAL::adc","time")==true){
         ECAL__adc_time = reader.getBranch<float>     ("ECAL::adc","time");
         tree->Branch("ECAL__adc_time",&vec_ECAL__adc_time);
      }
   }
   hipo::node<float>     *ECAL__calib_energy;
   std::vector<Float_t>   vec_ECAL__calib_energy;
   hipo::node<int8_t>    *ECAL__calib_layer;
   std::vector<Char_t>   vec_ECAL__calib_layer;
   hipo::node<float>     *ECAL__calib_rawEU;
   std::vector<Float_t>   vec_ECAL__calib_rawEU;
   hipo::node<float>     *ECAL__calib_rawEV;
   std::vector<Float_t>   vec_ECAL__calib_rawEV;
   hipo::node<float>     *ECAL__calib_rawEW;
   std::vector<Float_t>   vec_ECAL__calib_rawEW;
   hipo::node<float>     *ECAL__calib_recEU;
   std::vector<Float_t>   vec_ECAL__calib_recEU;
   hipo::node<float>     *ECAL__calib_recEV;
   std::vector<Float_t>   vec_ECAL__calib_recEV;
   hipo::node<float>     *ECAL__calib_recEW;
   std::vector<Float_t>   vec_ECAL__calib_recEW;
   hipo::node<int8_t>    *ECAL__calib_sector;
   std::vector<Char_t>   vec_ECAL__calib_sector;
   if(dictionary->hasSchema("ECAL::calib")==true){
      if(dictionary->hasEntry("ECAL::calib","energy")==true){
         ECAL__calib_energy = reader.getBranch<float>     ("ECAL::calib","energy");
         tree->Branch("ECAL__calib_energy",&vec_ECAL__calib_energy);
      }
      if(dictionary->hasEntry("ECAL::calib","layer")==true){
         ECAL__calib_layer = reader.getBranch<int8_t>    ("ECAL::calib","layer");
         tree->Branch("ECAL__calib_layer",&vec_ECAL__calib_layer);
      }
      if(dictionary->hasEntry("ECAL::calib","rawEU")==true){
         ECAL__calib_rawEU = reader.getBranch<float>     ("ECAL::calib","rawEU");
         tree->Branch("ECAL__calib_rawEU",&vec_ECAL__calib_rawEU);
      }
      if(dictionary->hasEntry("ECAL::calib","rawEV")==true){
         ECAL__calib_rawEV = reader.getBranch<float>     ("ECAL::calib","rawEV");
         tree->Branch("ECAL__calib_rawEV",&vec_ECAL__calib_rawEV);
      }
      if(dictionary->hasEntry("ECAL::calib","rawEW")==true){
         ECAL__calib_rawEW = reader.getBranch<float>     ("ECAL::calib","rawEW");
         tree->Branch("ECAL__calib_rawEW",&vec_ECAL__calib_rawEW);
      }
      if(dictionary->hasEntry("ECAL::calib","recEU")==true){
         ECAL__calib_recEU = reader.getBranch<float>     ("ECAL::calib","recEU");
         tree->Branch("ECAL__calib_recEU",&vec_ECAL__calib_recEU);
      }
      if(dictionary->hasEntry("ECAL::calib","recEV")==true){
         ECAL__calib_recEV = reader.getBranch<float>     ("ECAL::calib","recEV");
         tree->Branch("ECAL__calib_recEV",&vec_ECAL__calib_recEV);
      }
      if(dictionary->hasEntry("ECAL::calib","recEW")==true){
         ECAL__calib_recEW = reader.getBranch<float>     ("ECAL::calib","recEW");
         tree->Branch("ECAL__calib_recEW",&vec_ECAL__calib_recEW);
      }
      if(dictionary->hasEntry("ECAL::calib","sector")==true){
         ECAL__calib_sector = reader.getBranch<int8_t>    ("ECAL::calib","sector");
         tree->Branch("ECAL__calib_sector",&vec_ECAL__calib_sector);
      }
   }
   hipo::node<int32_t>   *ECAL__clusters_coordU;
   std::vector<Int_t>   vec_ECAL__clusters_coordU;
   hipo::node<int32_t>   *ECAL__clusters_coordV;
   std::vector<Int_t>   vec_ECAL__clusters_coordV;
   hipo::node<int32_t>   *ECAL__clusters_coordW;
   std::vector<Int_t>   vec_ECAL__clusters_coordW;
   hipo::node<float>     *ECAL__clusters_energy;
   std::vector<Float_t>   vec_ECAL__clusters_energy;
   hipo::node<int16_t>   *ECAL__clusters_id;
   std::vector<Short_t>   vec_ECAL__clusters_id;
   hipo::node<int8_t>    *ECAL__clusters_idU;
   std::vector<Char_t>   vec_ECAL__clusters_idU;
   hipo::node<int8_t>    *ECAL__clusters_idV;
   std::vector<Char_t>   vec_ECAL__clusters_idV;
   hipo::node<int8_t>    *ECAL__clusters_idW;
   std::vector<Char_t>   vec_ECAL__clusters_idW;
   hipo::node<int8_t>    *ECAL__clusters_layer;
   std::vector<Char_t>   vec_ECAL__clusters_layer;
   hipo::node<int8_t>    *ECAL__clusters_sector;
   std::vector<Char_t>   vec_ECAL__clusters_sector;
   hipo::node<int16_t>   *ECAL__clusters_status;
   std::vector<Short_t>   vec_ECAL__clusters_status;
   hipo::node<float>     *ECAL__clusters_time;
   std::vector<Float_t>   vec_ECAL__clusters_time;
   hipo::node<float>     *ECAL__clusters_widthU;
   std::vector<Float_t>   vec_ECAL__clusters_widthU;
   hipo::node<float>     *ECAL__clusters_widthV;
   std::vector<Float_t>   vec_ECAL__clusters_widthV;
   hipo::node<float>     *ECAL__clusters_widthW;
   std::vector<Float_t>   vec_ECAL__clusters_widthW;
   hipo::node<float>     *ECAL__clusters_x;
   std::vector<Float_t>   vec_ECAL__clusters_x;
   hipo::node<float>     *ECAL__clusters_y;
   std::vector<Float_t>   vec_ECAL__clusters_y;
   hipo::node<float>     *ECAL__clusters_z;
   std::vector<Float_t>   vec_ECAL__clusters_z;
   if(dictionary->hasSchema("ECAL::clusters")==true){
      if(dictionary->hasEntry("ECAL::clusters","coordU")==true){
         ECAL__clusters_coordU = reader.getBranch<int32_t>   ("ECAL::clusters","coordU");
         tree->Branch("ECAL__clusters_coordU",&vec_ECAL__clusters_coordU);
      }
      if(dictionary->hasEntry("ECAL::clusters","coordV")==true){
         ECAL__clusters_coordV = reader.getBranch<int32_t>   ("ECAL::clusters","coordV");
         tree->Branch("ECAL__clusters_coordV",&vec_ECAL__clusters_coordV);
      }
      if(dictionary->hasEntry("ECAL::clusters","coordW")==true){
         ECAL__clusters_coordW = reader.getBranch<int32_t>   ("ECAL::clusters","coordW");
         tree->Branch("ECAL__clusters_coordW",&vec_ECAL__clusters_coordW);
      }
      if(dictionary->hasEntry("ECAL::clusters","energy")==true){
         ECAL__clusters_energy = reader.getBranch<float>     ("ECAL::clusters","energy");
         tree->Branch("ECAL__clusters_energy",&vec_ECAL__clusters_energy);
      }
      if(dictionary->hasEntry("ECAL::clusters","id")==true){
         ECAL__clusters_id = reader.getBranch<int16_t>   ("ECAL::clusters","id");
         tree->Branch("ECAL__clusters_id",&vec_ECAL__clusters_id);
      }
      if(dictionary->hasEntry("ECAL::clusters","idU")==true){
         ECAL__clusters_idU = reader.getBranch<int8_t>    ("ECAL::clusters","idU");
         tree->Branch("ECAL__clusters_idU",&vec_ECAL__clusters_idU);
      }
      if(dictionary->hasEntry("ECAL::clusters","idV")==true){
         ECAL__clusters_idV = reader.getBranch<int8_t>    ("ECAL::clusters","idV");
         tree->Branch("ECAL__clusters_idV",&vec_ECAL__clusters_idV);
      }
      if(dictionary->hasEntry("ECAL::clusters","idW")==true){
         ECAL__clusters_idW = reader.getBranch<int8_t>    ("ECAL::clusters","idW");
         tree->Branch("ECAL__clusters_idW",&vec_ECAL__clusters_idW);
      }
      if(dictionary->hasEntry("ECAL::clusters","layer")==true){
         ECAL__clusters_layer = reader.getBranch<int8_t>    ("ECAL::clusters","layer");
         tree->Branch("ECAL__clusters_layer",&vec_ECAL__clusters_layer);
      }
      if(dictionary->hasEntry("ECAL::clusters","sector")==true){
         ECAL__clusters_sector = reader.getBranch<int8_t>    ("ECAL::clusters","sector");
         tree->Branch("ECAL__clusters_sector",&vec_ECAL__clusters_sector);
      }
      if(dictionary->hasEntry("ECAL::clusters","status")==true){
         ECAL__clusters_status = reader.getBranch<int16_t>   ("ECAL::clusters","status");
         tree->Branch("ECAL__clusters_status",&vec_ECAL__clusters_status);
      }
      if(dictionary->hasEntry("ECAL::clusters","time")==true){
         ECAL__clusters_time = reader.getBranch<float>     ("ECAL::clusters","time");
         tree->Branch("ECAL__clusters_time",&vec_ECAL__clusters_time);
      }
      if(dictionary->hasEntry("ECAL::clusters","widthU")==true){
         ECAL__clusters_widthU = reader.getBranch<float>     ("ECAL::clusters","widthU");
         tree->Branch("ECAL__clusters_widthU",&vec_ECAL__clusters_widthU);
      }
      if(dictionary->hasEntry("ECAL::clusters","widthV")==true){
         ECAL__clusters_widthV = reader.getBranch<float>     ("ECAL::clusters","widthV");
         tree->Branch("ECAL__clusters_widthV",&vec_ECAL__clusters_widthV);
      }
      if(dictionary->hasEntry("ECAL::clusters","widthW")==true){
         ECAL__clusters_widthW = reader.getBranch<float>     ("ECAL::clusters","widthW");
         tree->Branch("ECAL__clusters_widthW",&vec_ECAL__clusters_widthW);
      }
      if(dictionary->hasEntry("ECAL::clusters","x")==true){
         ECAL__clusters_x = reader.getBranch<float>     ("ECAL::clusters","x");
         tree->Branch("ECAL__clusters_x",&vec_ECAL__clusters_x);
      }
      if(dictionary->hasEntry("ECAL::clusters","y")==true){
         ECAL__clusters_y = reader.getBranch<float>     ("ECAL::clusters","y");
         tree->Branch("ECAL__clusters_y",&vec_ECAL__clusters_y);
      }
      if(dictionary->hasEntry("ECAL::clusters","z")==true){
         ECAL__clusters_z = reader.getBranch<float>     ("ECAL::clusters","z");
         tree->Branch("ECAL__clusters_z",&vec_ECAL__clusters_z);
      }
   }
   hipo::node<float>     *ECAL__hits_energy;
   std::vector<Float_t>   vec_ECAL__hits_energy;
   hipo::node<int16_t>   *ECAL__hits_id;
   std::vector<Short_t>   vec_ECAL__hits_id;
   hipo::node<int8_t>    *ECAL__hits_layer;
   std::vector<Char_t>   vec_ECAL__hits_layer;
   hipo::node<int8_t>    *ECAL__hits_peakid;
   std::vector<Char_t>   vec_ECAL__hits_peakid;
   hipo::node<int8_t>    *ECAL__hits_sector;
   std::vector<Char_t>   vec_ECAL__hits_sector;
   hipo::node<int16_t>   *ECAL__hits_status;
   std::vector<Short_t>   vec_ECAL__hits_status;
   hipo::node<int8_t>    *ECAL__hits_strip;
   std::vector<Char_t>   vec_ECAL__hits_strip;
   hipo::node<float>     *ECAL__hits_time;
   std::vector<Float_t>   vec_ECAL__hits_time;
   if(dictionary->hasSchema("ECAL::hits")==true){
      if(dictionary->hasEntry("ECAL::hits","energy")==true){
         ECAL__hits_energy = reader.getBranch<float>     ("ECAL::hits","energy");
         tree->Branch("ECAL__hits_energy",&vec_ECAL__hits_energy);
      }
      if(dictionary->hasEntry("ECAL::hits","id")==true){
         ECAL__hits_id = reader.getBranch<int16_t>   ("ECAL::hits","id");
         tree->Branch("ECAL__hits_id",&vec_ECAL__hits_id);
      }
      if(dictionary->hasEntry("ECAL::hits","layer")==true){
         ECAL__hits_layer = reader.getBranch<int8_t>    ("ECAL::hits","layer");
         tree->Branch("ECAL__hits_layer",&vec_ECAL__hits_layer);
      }
      if(dictionary->hasEntry("ECAL::hits","peakid")==true){
         ECAL__hits_peakid = reader.getBranch<int8_t>    ("ECAL::hits","peakid");
         tree->Branch("ECAL__hits_peakid",&vec_ECAL__hits_peakid);
      }
      if(dictionary->hasEntry("ECAL::hits","sector")==true){
         ECAL__hits_sector = reader.getBranch<int8_t>    ("ECAL::hits","sector");
         tree->Branch("ECAL__hits_sector",&vec_ECAL__hits_sector);
      }
      if(dictionary->hasEntry("ECAL::hits","status")==true){
         ECAL__hits_status = reader.getBranch<int16_t>   ("ECAL::hits","status");
         tree->Branch("ECAL__hits_status",&vec_ECAL__hits_status);
      }
      if(dictionary->hasEntry("ECAL::hits","strip")==true){
         ECAL__hits_strip = reader.getBranch<int8_t>    ("ECAL::hits","strip");
         tree->Branch("ECAL__hits_strip",&vec_ECAL__hits_strip);
      }
      if(dictionary->hasEntry("ECAL::hits","time")==true){
         ECAL__hits_time = reader.getBranch<float>     ("ECAL::hits","time");
         tree->Branch("ECAL__hits_time",&vec_ECAL__hits_time);
      }
   }
   hipo::node<float>     *ECAL__moments_distU;
   std::vector<Float_t>   vec_ECAL__moments_distU;
   hipo::node<float>     *ECAL__moments_distV;
   std::vector<Float_t>   vec_ECAL__moments_distV;
   hipo::node<float>     *ECAL__moments_distW;
   std::vector<Float_t>   vec_ECAL__moments_distW;
   hipo::node<float>     *ECAL__moments_m1u;
   std::vector<Float_t>   vec_ECAL__moments_m1u;
   hipo::node<float>     *ECAL__moments_m1v;
   std::vector<Float_t>   vec_ECAL__moments_m1v;
   hipo::node<float>     *ECAL__moments_m1w;
   std::vector<Float_t>   vec_ECAL__moments_m1w;
   hipo::node<float>     *ECAL__moments_m2u;
   std::vector<Float_t>   vec_ECAL__moments_m2u;
   hipo::node<float>     *ECAL__moments_m2v;
   std::vector<Float_t>   vec_ECAL__moments_m2v;
   hipo::node<float>     *ECAL__moments_m2w;
   std::vector<Float_t>   vec_ECAL__moments_m2w;
   hipo::node<float>     *ECAL__moments_m3u;
   std::vector<Float_t>   vec_ECAL__moments_m3u;
   hipo::node<float>     *ECAL__moments_m3v;
   std::vector<Float_t>   vec_ECAL__moments_m3v;
   hipo::node<float>     *ECAL__moments_m3w;
   std::vector<Float_t>   vec_ECAL__moments_m3w;
   if(dictionary->hasSchema("ECAL::moments")==true){
      if(dictionary->hasEntry("ECAL::moments","distU")==true){
         ECAL__moments_distU = reader.getBranch<float>     ("ECAL::moments","distU");
         tree->Branch("ECAL__moments_distU",&vec_ECAL__moments_distU);
      }
      if(dictionary->hasEntry("ECAL::moments","distV")==true){
         ECAL__moments_distV = reader.getBranch<float>     ("ECAL::moments","distV");
         tree->Branch("ECAL__moments_distV",&vec_ECAL__moments_distV);
      }
      if(dictionary->hasEntry("ECAL::moments","distW")==true){
         ECAL__moments_distW = reader.getBranch<float>     ("ECAL::moments","distW");
         tree->Branch("ECAL__moments_distW",&vec_ECAL__moments_distW);
      }
      if(dictionary->hasEntry("ECAL::moments","m1u")==true){
         ECAL__moments_m1u = reader.getBranch<float>     ("ECAL::moments","m1u");
         tree->Branch("ECAL__moments_m1u",&vec_ECAL__moments_m1u);
      }
      if(dictionary->hasEntry("ECAL::moments","m1v")==true){
         ECAL__moments_m1v = reader.getBranch<float>     ("ECAL::moments","m1v");
         tree->Branch("ECAL__moments_m1v",&vec_ECAL__moments_m1v);
      }
      if(dictionary->hasEntry("ECAL::moments","m1w")==true){
         ECAL__moments_m1w = reader.getBranch<float>     ("ECAL::moments","m1w");
         tree->Branch("ECAL__moments_m1w",&vec_ECAL__moments_m1w);
      }
      if(dictionary->hasEntry("ECAL::moments","m2u")==true){
         ECAL__moments_m2u = reader.getBranch<float>     ("ECAL::moments","m2u");
         tree->Branch("ECAL__moments_m2u",&vec_ECAL__moments_m2u);
      }
      if(dictionary->hasEntry("ECAL::moments","m2v")==true){
         ECAL__moments_m2v = reader.getBranch<float>     ("ECAL::moments","m2v");
         tree->Branch("ECAL__moments_m2v",&vec_ECAL__moments_m2v);
      }
      if(dictionary->hasEntry("ECAL::moments","m2w")==true){
         ECAL__moments_m2w = reader.getBranch<float>     ("ECAL::moments","m2w");
         tree->Branch("ECAL__moments_m2w",&vec_ECAL__moments_m2w);
      }
      if(dictionary->hasEntry("ECAL::moments","m3u")==true){
         ECAL__moments_m3u = reader.getBranch<float>     ("ECAL::moments","m3u");
         tree->Branch("ECAL__moments_m3u",&vec_ECAL__moments_m3u);
      }
      if(dictionary->hasEntry("ECAL::moments","m3v")==true){
         ECAL__moments_m3v = reader.getBranch<float>     ("ECAL::moments","m3v");
         tree->Branch("ECAL__moments_m3v",&vec_ECAL__moments_m3v);
      }
      if(dictionary->hasEntry("ECAL::moments","m3w")==true){
         ECAL__moments_m3w = reader.getBranch<float>     ("ECAL::moments","m3w");
         tree->Branch("ECAL__moments_m3w",&vec_ECAL__moments_m3w);
      }
   }
   hipo::node<float>     *ECAL__peaks_energy;
   std::vector<Float_t>   vec_ECAL__peaks_energy;
   hipo::node<int16_t>   *ECAL__peaks_id;
   std::vector<Short_t>   vec_ECAL__peaks_id;
   hipo::node<int8_t>    *ECAL__peaks_layer;
   std::vector<Char_t>   vec_ECAL__peaks_layer;
   hipo::node<int8_t>    *ECAL__peaks_sector;
   std::vector<Char_t>   vec_ECAL__peaks_sector;
   hipo::node<int16_t>   *ECAL__peaks_status;
   std::vector<Short_t>   vec_ECAL__peaks_status;
   hipo::node<float>     *ECAL__peaks_time;
   std::vector<Float_t>   vec_ECAL__peaks_time;
   hipo::node<float>     *ECAL__peaks_width;
   std::vector<Float_t>   vec_ECAL__peaks_width;
   hipo::node<float>     *ECAL__peaks_xe;
   std::vector<Float_t>   vec_ECAL__peaks_xe;
   hipo::node<float>     *ECAL__peaks_xo;
   std::vector<Float_t>   vec_ECAL__peaks_xo;
   hipo::node<float>     *ECAL__peaks_ye;
   std::vector<Float_t>   vec_ECAL__peaks_ye;
   hipo::node<float>     *ECAL__peaks_yo;
   std::vector<Float_t>   vec_ECAL__peaks_yo;
   hipo::node<float>     *ECAL__peaks_ze;
   std::vector<Float_t>   vec_ECAL__peaks_ze;
   hipo::node<float>     *ECAL__peaks_zo;
   std::vector<Float_t>   vec_ECAL__peaks_zo;
   if(dictionary->hasSchema("ECAL::peaks")==true){
      if(dictionary->hasEntry("ECAL::peaks","energy")==true){
         ECAL__peaks_energy = reader.getBranch<float>     ("ECAL::peaks","energy");
         tree->Branch("ECAL__peaks_energy",&vec_ECAL__peaks_energy);
      }
      if(dictionary->hasEntry("ECAL::peaks","id")==true){
         ECAL__peaks_id = reader.getBranch<int16_t>   ("ECAL::peaks","id");
         tree->Branch("ECAL__peaks_id",&vec_ECAL__peaks_id);
      }
      if(dictionary->hasEntry("ECAL::peaks","layer")==true){
         ECAL__peaks_layer = reader.getBranch<int8_t>    ("ECAL::peaks","layer");
         tree->Branch("ECAL__peaks_layer",&vec_ECAL__peaks_layer);
      }
      if(dictionary->hasEntry("ECAL::peaks","sector")==true){
         ECAL__peaks_sector = reader.getBranch<int8_t>    ("ECAL::peaks","sector");
         tree->Branch("ECAL__peaks_sector",&vec_ECAL__peaks_sector);
      }
      if(dictionary->hasEntry("ECAL::peaks","status")==true){
         ECAL__peaks_status = reader.getBranch<int16_t>   ("ECAL::peaks","status");
         tree->Branch("ECAL__peaks_status",&vec_ECAL__peaks_status);
      }
      if(dictionary->hasEntry("ECAL::peaks","time")==true){
         ECAL__peaks_time = reader.getBranch<float>     ("ECAL::peaks","time");
         tree->Branch("ECAL__peaks_time",&vec_ECAL__peaks_time);
      }
      if(dictionary->hasEntry("ECAL::peaks","width")==true){
         ECAL__peaks_width = reader.getBranch<float>     ("ECAL::peaks","width");
         tree->Branch("ECAL__peaks_width",&vec_ECAL__peaks_width);
      }
      if(dictionary->hasEntry("ECAL::peaks","xe")==true){
         ECAL__peaks_xe = reader.getBranch<float>     ("ECAL::peaks","xe");
         tree->Branch("ECAL__peaks_xe",&vec_ECAL__peaks_xe);
      }
      if(dictionary->hasEntry("ECAL::peaks","xo")==true){
         ECAL__peaks_xo = reader.getBranch<float>     ("ECAL::peaks","xo");
         tree->Branch("ECAL__peaks_xo",&vec_ECAL__peaks_xo);
      }
      if(dictionary->hasEntry("ECAL::peaks","ye")==true){
         ECAL__peaks_ye = reader.getBranch<float>     ("ECAL::peaks","ye");
         tree->Branch("ECAL__peaks_ye",&vec_ECAL__peaks_ye);
      }
      if(dictionary->hasEntry("ECAL::peaks","yo")==true){
         ECAL__peaks_yo = reader.getBranch<float>     ("ECAL::peaks","yo");
         tree->Branch("ECAL__peaks_yo",&vec_ECAL__peaks_yo);
      }
      if(dictionary->hasEntry("ECAL::peaks","ze")==true){
         ECAL__peaks_ze = reader.getBranch<float>     ("ECAL::peaks","ze");
         tree->Branch("ECAL__peaks_ze",&vec_ECAL__peaks_ze);
      }
      if(dictionary->hasEntry("ECAL::peaks","zo")==true){
         ECAL__peaks_zo = reader.getBranch<float>     ("ECAL::peaks","zo");
         tree->Branch("ECAL__peaks_zo",&vec_ECAL__peaks_zo);
      }
   }
   hipo::node<int32_t>   *ECAL__tdc_TDC;
   std::vector<Int_t>   vec_ECAL__tdc_TDC;
   hipo::node<int16_t>   *ECAL__tdc_component;
   std::vector<Short_t>   vec_ECAL__tdc_component;
   hipo::node<int8_t>    *ECAL__tdc_layer;
   std::vector<Char_t>   vec_ECAL__tdc_layer;
   hipo::node<int8_t>    *ECAL__tdc_order;
   std::vector<Char_t>   vec_ECAL__tdc_order;
   hipo::node<int8_t>    *ECAL__tdc_sector;
   std::vector<Char_t>   vec_ECAL__tdc_sector;
   if(dictionary->hasSchema("ECAL::tdc")==true){
      if(dictionary->hasEntry("ECAL::tdc","TDC")==true){
         ECAL__tdc_TDC = reader.getBranch<int32_t>   ("ECAL::tdc","TDC");
         tree->Branch("ECAL__tdc_TDC",&vec_ECAL__tdc_TDC);
      }
      if(dictionary->hasEntry("ECAL::tdc","component")==true){
         ECAL__tdc_component = reader.getBranch<int16_t>   ("ECAL::tdc","component");
         tree->Branch("ECAL__tdc_component",&vec_ECAL__tdc_component);
      }
      if(dictionary->hasEntry("ECAL::tdc","layer")==true){
         ECAL__tdc_layer = reader.getBranch<int8_t>    ("ECAL::tdc","layer");
         tree->Branch("ECAL__tdc_layer",&vec_ECAL__tdc_layer);
      }
      if(dictionary->hasEntry("ECAL::tdc","order")==true){
         ECAL__tdc_order = reader.getBranch<int8_t>    ("ECAL::tdc","order");
         tree->Branch("ECAL__tdc_order",&vec_ECAL__tdc_order);
      }
      if(dictionary->hasEntry("ECAL::tdc","sector")==true){
         ECAL__tdc_sector = reader.getBranch<int8_t>    ("ECAL::tdc","sector");
         tree->Branch("ECAL__tdc_sector",&vec_ECAL__tdc_sector);
      }
   }
   hipo::node<float>     *EVENT__detector_ccnphe;
   std::vector<Float_t>   vec_EVENT__detector_ccnphe;
   hipo::node<float>     *EVENT__detector_ecin;
   std::vector<Float_t>   vec_EVENT__detector_ecin;
   hipo::node<float>     *EVENT__detector_ecout;
   std::vector<Float_t>   vec_EVENT__detector_ecout;
   hipo::node<float>     *EVENT__detector_ecpath;
   std::vector<Float_t>   vec_EVENT__detector_ecpath;
   hipo::node<int32_t>   *EVENT__detector_ecsector;
   std::vector<Int_t>   vec_EVENT__detector_ecsector;
   hipo::node<float>     *EVENT__detector_ectime;
   std::vector<Float_t>   vec_EVENT__detector_ectime;
   hipo::node<float>     *EVENT__detector_ectot;
   std::vector<Float_t>   vec_EVENT__detector_ectot;
   hipo::node<float>     *EVENT__detector_ecu;
   std::vector<Float_t>   vec_EVENT__detector_ecu;
   hipo::node<float>     *EVENT__detector_ecv;
   std::vector<Float_t>   vec_EVENT__detector_ecv;
   hipo::node<float>     *EVENT__detector_ecw;
   std::vector<Float_t>   vec_EVENT__detector_ecw;
   hipo::node<int32_t>   *EVENT__detector_scpaddle;
   std::vector<Int_t>   vec_EVENT__detector_scpaddle;
   hipo::node<float>     *EVENT__detector_scpath;
   std::vector<Float_t>   vec_EVENT__detector_scpath;
   hipo::node<int32_t>   *EVENT__detector_scsector;
   std::vector<Int_t>   vec_EVENT__detector_scsector;
   hipo::node<float>     *EVENT__detector_sctime;
   std::vector<Float_t>   vec_EVENT__detector_sctime;
   if(dictionary->hasSchema("EVENT::detector")==true){
      if(dictionary->hasEntry("EVENT::detector","ccnphe")==true){
         EVENT__detector_ccnphe = reader.getBranch<float>     ("EVENT::detector","ccnphe");
         tree->Branch("EVENT__detector_ccnphe",&vec_EVENT__detector_ccnphe);
      }
      if(dictionary->hasEntry("EVENT::detector","ecin")==true){
         EVENT__detector_ecin = reader.getBranch<float>     ("EVENT::detector","ecin");
         tree->Branch("EVENT__detector_ecin",&vec_EVENT__detector_ecin);
      }
      if(dictionary->hasEntry("EVENT::detector","ecout")==true){
         EVENT__detector_ecout = reader.getBranch<float>     ("EVENT::detector","ecout");
         tree->Branch("EVENT__detector_ecout",&vec_EVENT__detector_ecout);
      }
      if(dictionary->hasEntry("EVENT::detector","ecpath")==true){
         EVENT__detector_ecpath = reader.getBranch<float>     ("EVENT::detector","ecpath");
         tree->Branch("EVENT__detector_ecpath",&vec_EVENT__detector_ecpath);
      }
      if(dictionary->hasEntry("EVENT::detector","ecsector")==true){
         EVENT__detector_ecsector = reader.getBranch<int32_t>   ("EVENT::detector","ecsector");
         tree->Branch("EVENT__detector_ecsector",&vec_EVENT__detector_ecsector);
      }
      if(dictionary->hasEntry("EVENT::detector","ectime")==true){
         EVENT__detector_ectime = reader.getBranch<float>     ("EVENT::detector","ectime");
         tree->Branch("EVENT__detector_ectime",&vec_EVENT__detector_ectime);
      }
      if(dictionary->hasEntry("EVENT::detector","ectot")==true){
         EVENT__detector_ectot = reader.getBranch<float>     ("EVENT::detector","ectot");
         tree->Branch("EVENT__detector_ectot",&vec_EVENT__detector_ectot);
      }
      if(dictionary->hasEntry("EVENT::detector","ecu")==true){
         EVENT__detector_ecu = reader.getBranch<float>     ("EVENT::detector","ecu");
         tree->Branch("EVENT__detector_ecu",&vec_EVENT__detector_ecu);
      }
      if(dictionary->hasEntry("EVENT::detector","ecv")==true){
         EVENT__detector_ecv = reader.getBranch<float>     ("EVENT::detector","ecv");
         tree->Branch("EVENT__detector_ecv",&vec_EVENT__detector_ecv);
      }
      if(dictionary->hasEntry("EVENT::detector","ecw")==true){
         EVENT__detector_ecw = reader.getBranch<float>     ("EVENT::detector","ecw");
         tree->Branch("EVENT__detector_ecw",&vec_EVENT__detector_ecw);
      }
      if(dictionary->hasEntry("EVENT::detector","scpaddle")==true){
         EVENT__detector_scpaddle = reader.getBranch<int32_t>   ("EVENT::detector","scpaddle");
         tree->Branch("EVENT__detector_scpaddle",&vec_EVENT__detector_scpaddle);
      }
      if(dictionary->hasEntry("EVENT::detector","scpath")==true){
         EVENT__detector_scpath = reader.getBranch<float>     ("EVENT::detector","scpath");
         tree->Branch("EVENT__detector_scpath",&vec_EVENT__detector_scpath);
      }
      if(dictionary->hasEntry("EVENT::detector","scsector")==true){
         EVENT__detector_scsector = reader.getBranch<int32_t>   ("EVENT::detector","scsector");
         tree->Branch("EVENT__detector_scsector",&vec_EVENT__detector_scsector);
      }
      if(dictionary->hasEntry("EVENT::detector","sctime")==true){
         EVENT__detector_sctime = reader.getBranch<float>     ("EVENT::detector","sctime");
         tree->Branch("EVENT__detector_sctime",&vec_EVENT__detector_sctime);
      }
   }
   hipo::node<int8_t>    *EVENT__particle_ccstat;
   std::vector<Char_t>   vec_EVENT__particle_ccstat;
   hipo::node<int8_t>    *EVENT__particle_charge;
   std::vector<Char_t>   vec_EVENT__particle_charge;
   hipo::node<int8_t>    *EVENT__particle_dcstat;
   std::vector<Char_t>   vec_EVENT__particle_dcstat;
   hipo::node<int8_t>    *EVENT__particle_ecstat;
   std::vector<Char_t>   vec_EVENT__particle_ecstat;
   hipo::node<int8_t>    *EVENT__particle_lcstat;
   std::vector<Char_t>   vec_EVENT__particle_lcstat;
   hipo::node<float>     *EVENT__particle_mass;
   std::vector<Float_t>   vec_EVENT__particle_mass;
   hipo::node<int32_t>   *EVENT__particle_pid;
   std::vector<Int_t>   vec_EVENT__particle_pid;
   hipo::node<float>     *EVENT__particle_px;
   std::vector<Float_t>   vec_EVENT__particle_px;
   hipo::node<float>     *EVENT__particle_py;
   std::vector<Float_t>   vec_EVENT__particle_py;
   hipo::node<float>     *EVENT__particle_pz;
   std::vector<Float_t>   vec_EVENT__particle_pz;
   hipo::node<int8_t>    *EVENT__particle_scstat;
   std::vector<Char_t>   vec_EVENT__particle_scstat;
   hipo::node<int8_t>    *EVENT__particle_status;
   std::vector<Char_t>   vec_EVENT__particle_status;
   hipo::node<float>     *EVENT__particle_vx;
   std::vector<Float_t>   vec_EVENT__particle_vx;
   hipo::node<float>     *EVENT__particle_vy;
   std::vector<Float_t>   vec_EVENT__particle_vy;
   hipo::node<float>     *EVENT__particle_vz;
   std::vector<Float_t>   vec_EVENT__particle_vz;
   if(dictionary->hasSchema("EVENT::particle")==true){
      if(dictionary->hasEntry("EVENT::particle","ccstat")==true){
         EVENT__particle_ccstat = reader.getBranch<int8_t>    ("EVENT::particle","ccstat");
         tree->Branch("EVENT__particle_ccstat",&vec_EVENT__particle_ccstat);
      }
      if(dictionary->hasEntry("EVENT::particle","charge")==true){
         EVENT__particle_charge = reader.getBranch<int8_t>    ("EVENT::particle","charge");
         tree->Branch("EVENT__particle_charge",&vec_EVENT__particle_charge);
      }
      if(dictionary->hasEntry("EVENT::particle","dcstat")==true){
         EVENT__particle_dcstat = reader.getBranch<int8_t>    ("EVENT::particle","dcstat");
         tree->Branch("EVENT__particle_dcstat",&vec_EVENT__particle_dcstat);
      }
      if(dictionary->hasEntry("EVENT::particle","ecstat")==true){
         EVENT__particle_ecstat = reader.getBranch<int8_t>    ("EVENT::particle","ecstat");
         tree->Branch("EVENT__particle_ecstat",&vec_EVENT__particle_ecstat);
      }
      if(dictionary->hasEntry("EVENT::particle","lcstat")==true){
         EVENT__particle_lcstat = reader.getBranch<int8_t>    ("EVENT::particle","lcstat");
         tree->Branch("EVENT__particle_lcstat",&vec_EVENT__particle_lcstat);
      }
      if(dictionary->hasEntry("EVENT::particle","mass")==true){
         EVENT__particle_mass = reader.getBranch<float>     ("EVENT::particle","mass");
         tree->Branch("EVENT__particle_mass",&vec_EVENT__particle_mass);
      }
      if(dictionary->hasEntry("EVENT::particle","pid")==true){
         EVENT__particle_pid = reader.getBranch<int32_t>   ("EVENT::particle","pid");
         tree->Branch("EVENT__particle_pid",&vec_EVENT__particle_pid);
      }
      if(dictionary->hasEntry("EVENT::particle","px")==true){
         EVENT__particle_px = reader.getBranch<float>     ("EVENT::particle","px");
         tree->Branch("EVENT__particle_px",&vec_EVENT__particle_px);
      }
      if(dictionary->hasEntry("EVENT::particle","py")==true){
         EVENT__particle_py = reader.getBranch<float>     ("EVENT::particle","py");
         tree->Branch("EVENT__particle_py",&vec_EVENT__particle_py);
      }
      if(dictionary->hasEntry("EVENT::particle","pz")==true){
         EVENT__particle_pz = reader.getBranch<float>     ("EVENT::particle","pz");
         tree->Branch("EVENT__particle_pz",&vec_EVENT__particle_pz);
      }
      if(dictionary->hasEntry("EVENT::particle","scstat")==true){
         EVENT__particle_scstat = reader.getBranch<int8_t>    ("EVENT::particle","scstat");
         tree->Branch("EVENT__particle_scstat",&vec_EVENT__particle_scstat);
      }
      if(dictionary->hasEntry("EVENT::particle","status")==true){
         EVENT__particle_status = reader.getBranch<int8_t>    ("EVENT::particle","status");
         tree->Branch("EVENT__particle_status",&vec_EVENT__particle_status);
      }
      if(dictionary->hasEntry("EVENT::particle","vx")==true){
         EVENT__particle_vx = reader.getBranch<float>     ("EVENT::particle","vx");
         tree->Branch("EVENT__particle_vx",&vec_EVENT__particle_vx);
      }
      if(dictionary->hasEntry("EVENT::particle","vy")==true){
         EVENT__particle_vy = reader.getBranch<float>     ("EVENT::particle","vy");
         tree->Branch("EVENT__particle_vy",&vec_EVENT__particle_vy);
      }
      if(dictionary->hasEntry("EVENT::particle","vz")==true){
         EVENT__particle_vz = reader.getBranch<float>     ("EVENT::particle","vz");
         tree->Branch("EVENT__particle_vz",&vec_EVENT__particle_vz);
      }
   }
   hipo::node<int32_t>   *FMT__adc_ADC;
   std::vector<Int_t>   vec_FMT__adc_ADC;
   hipo::node<int16_t>   *FMT__adc_component;
   std::vector<Short_t>   vec_FMT__adc_component;
   hipo::node<int32_t>   *FMT__adc_integral;
   std::vector<Int_t>   vec_FMT__adc_integral;
   hipo::node<int8_t>    *FMT__adc_layer;
   std::vector<Char_t>   vec_FMT__adc_layer;
   hipo::node<int8_t>    *FMT__adc_order;
   std::vector<Char_t>   vec_FMT__adc_order;
   hipo::node<int16_t>   *FMT__adc_ped;
   std::vector<Short_t>   vec_FMT__adc_ped;
   hipo::node<int8_t>    *FMT__adc_sector;
   std::vector<Char_t>   vec_FMT__adc_sector;
   hipo::node<float>     *FMT__adc_time;
   std::vector<Float_t>   vec_FMT__adc_time;
   hipo::node<int64_t>   *FMT__adc_timestamp;
   std::vector<Long64_t>   vec_FMT__adc_timestamp;
   if(dictionary->hasSchema("FMT::adc")==true){
      if(dictionary->hasEntry("FMT::adc","ADC")==true){
         FMT__adc_ADC = reader.getBranch<int32_t>   ("FMT::adc","ADC");
         tree->Branch("FMT__adc_ADC",&vec_FMT__adc_ADC);
      }
      if(dictionary->hasEntry("FMT::adc","component")==true){
         FMT__adc_component = reader.getBranch<int16_t>   ("FMT::adc","component");
         tree->Branch("FMT__adc_component",&vec_FMT__adc_component);
      }
      if(dictionary->hasEntry("FMT::adc","integral")==true){
         FMT__adc_integral = reader.getBranch<int32_t>   ("FMT::adc","integral");
         tree->Branch("FMT__adc_integral",&vec_FMT__adc_integral);
      }
      if(dictionary->hasEntry("FMT::adc","layer")==true){
         FMT__adc_layer = reader.getBranch<int8_t>    ("FMT::adc","layer");
         tree->Branch("FMT__adc_layer",&vec_FMT__adc_layer);
      }
      if(dictionary->hasEntry("FMT::adc","order")==true){
         FMT__adc_order = reader.getBranch<int8_t>    ("FMT::adc","order");
         tree->Branch("FMT__adc_order",&vec_FMT__adc_order);
      }
      if(dictionary->hasEntry("FMT::adc","ped")==true){
         FMT__adc_ped = reader.getBranch<int16_t>   ("FMT::adc","ped");
         tree->Branch("FMT__adc_ped",&vec_FMT__adc_ped);
      }
      if(dictionary->hasEntry("FMT::adc","sector")==true){
         FMT__adc_sector = reader.getBranch<int8_t>    ("FMT::adc","sector");
         tree->Branch("FMT__adc_sector",&vec_FMT__adc_sector);
      }
      if(dictionary->hasEntry("FMT::adc","time")==true){
         FMT__adc_time = reader.getBranch<float>     ("FMT::adc","time");
         tree->Branch("FMT__adc_time",&vec_FMT__adc_time);
      }
      if(dictionary->hasEntry("FMT::adc","timestamp")==true){
         FMT__adc_timestamp = reader.getBranch<int64_t>   ("FMT::adc","timestamp");
         tree->Branch("FMT__adc_timestamp",&vec_FMT__adc_timestamp);
      }
   }
   hipo::node<float>     *FMTRec__Clusters_ETot;
   std::vector<Float_t>   vec_FMTRec__Clusters_ETot;
   hipo::node<int16_t>   *FMTRec__Clusters_Hit1_ID;
   std::vector<Short_t>   vec_FMTRec__Clusters_Hit1_ID;
   hipo::node<int16_t>   *FMTRec__Clusters_Hit2_ID;
   std::vector<Short_t>   vec_FMTRec__Clusters_Hit2_ID;
   hipo::node<int16_t>   *FMTRec__Clusters_Hit3_ID;
   std::vector<Short_t>   vec_FMTRec__Clusters_Hit3_ID;
   hipo::node<int16_t>   *FMTRec__Clusters_Hit4_ID;
   std::vector<Short_t>   vec_FMTRec__Clusters_Hit4_ID;
   hipo::node<int16_t>   *FMTRec__Clusters_Hit5_ID;
   std::vector<Short_t>   vec_FMTRec__Clusters_Hit5_ID;
   hipo::node<int16_t>   *FMTRec__Clusters_ID;
   std::vector<Short_t>   vec_FMTRec__Clusters_ID;
   hipo::node<float>     *FMTRec__Clusters_centroid;
   std::vector<Float_t>   vec_FMTRec__Clusters_centroid;
   hipo::node<float>     *FMTRec__Clusters_centroidResidual;
   std::vector<Float_t>   vec_FMTRec__Clusters_centroidResidual;
   hipo::node<int8_t>    *FMTRec__Clusters_layer;
   std::vector<Char_t>   vec_FMTRec__Clusters_layer;
   hipo::node<int8_t>    *FMTRec__Clusters_sector;
   std::vector<Char_t>   vec_FMTRec__Clusters_sector;
   hipo::node<float>     *FMTRec__Clusters_seedE;
   std::vector<Float_t>   vec_FMTRec__Clusters_seedE;
   hipo::node<float>     *FMTRec__Clusters_seedResidual;
   std::vector<Float_t>   vec_FMTRec__Clusters_seedResidual;
   hipo::node<int32_t>   *FMTRec__Clusters_seedStrip;
   std::vector<Int_t>   vec_FMTRec__Clusters_seedStrip;
   hipo::node<int16_t>   *FMTRec__Clusters_size;
   std::vector<Short_t>   vec_FMTRec__Clusters_size;
   hipo::node<int16_t>   *FMTRec__Clusters_trkID;
   std::vector<Short_t>   vec_FMTRec__Clusters_trkID;
   if(dictionary->hasSchema("FMTRec::Clusters")==true){
      if(dictionary->hasEntry("FMTRec::Clusters","ETot")==true){
         FMTRec__Clusters_ETot = reader.getBranch<float>     ("FMTRec::Clusters","ETot");
         tree->Branch("FMTRec__Clusters_ETot",&vec_FMTRec__Clusters_ETot);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit1_ID")==true){
         FMTRec__Clusters_Hit1_ID = reader.getBranch<int16_t>   ("FMTRec::Clusters","Hit1_ID");
         tree->Branch("FMTRec__Clusters_Hit1_ID",&vec_FMTRec__Clusters_Hit1_ID);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit2_ID")==true){
         FMTRec__Clusters_Hit2_ID = reader.getBranch<int16_t>   ("FMTRec::Clusters","Hit2_ID");
         tree->Branch("FMTRec__Clusters_Hit2_ID",&vec_FMTRec__Clusters_Hit2_ID);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit3_ID")==true){
         FMTRec__Clusters_Hit3_ID = reader.getBranch<int16_t>   ("FMTRec::Clusters","Hit3_ID");
         tree->Branch("FMTRec__Clusters_Hit3_ID",&vec_FMTRec__Clusters_Hit3_ID);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit4_ID")==true){
         FMTRec__Clusters_Hit4_ID = reader.getBranch<int16_t>   ("FMTRec::Clusters","Hit4_ID");
         tree->Branch("FMTRec__Clusters_Hit4_ID",&vec_FMTRec__Clusters_Hit4_ID);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit5_ID")==true){
         FMTRec__Clusters_Hit5_ID = reader.getBranch<int16_t>   ("FMTRec::Clusters","Hit5_ID");
         tree->Branch("FMTRec__Clusters_Hit5_ID",&vec_FMTRec__Clusters_Hit5_ID);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","ID")==true){
         FMTRec__Clusters_ID = reader.getBranch<int16_t>   ("FMTRec::Clusters","ID");
         tree->Branch("FMTRec__Clusters_ID",&vec_FMTRec__Clusters_ID);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","centroid")==true){
         FMTRec__Clusters_centroid = reader.getBranch<float>     ("FMTRec::Clusters","centroid");
         tree->Branch("FMTRec__Clusters_centroid",&vec_FMTRec__Clusters_centroid);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","centroidResidual")==true){
         FMTRec__Clusters_centroidResidual = reader.getBranch<float>     ("FMTRec::Clusters","centroidResidual");
         tree->Branch("FMTRec__Clusters_centroidResidual",&vec_FMTRec__Clusters_centroidResidual);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","layer")==true){
         FMTRec__Clusters_layer = reader.getBranch<int8_t>    ("FMTRec::Clusters","layer");
         tree->Branch("FMTRec__Clusters_layer",&vec_FMTRec__Clusters_layer);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","sector")==true){
         FMTRec__Clusters_sector = reader.getBranch<int8_t>    ("FMTRec::Clusters","sector");
         tree->Branch("FMTRec__Clusters_sector",&vec_FMTRec__Clusters_sector);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","seedE")==true){
         FMTRec__Clusters_seedE = reader.getBranch<float>     ("FMTRec::Clusters","seedE");
         tree->Branch("FMTRec__Clusters_seedE",&vec_FMTRec__Clusters_seedE);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","seedResidual")==true){
         FMTRec__Clusters_seedResidual = reader.getBranch<float>     ("FMTRec::Clusters","seedResidual");
         tree->Branch("FMTRec__Clusters_seedResidual",&vec_FMTRec__Clusters_seedResidual);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","seedStrip")==true){
         FMTRec__Clusters_seedStrip = reader.getBranch<int32_t>   ("FMTRec::Clusters","seedStrip");
         tree->Branch("FMTRec__Clusters_seedStrip",&vec_FMTRec__Clusters_seedStrip);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","size")==true){
         FMTRec__Clusters_size = reader.getBranch<int16_t>   ("FMTRec::Clusters","size");
         tree->Branch("FMTRec__Clusters_size",&vec_FMTRec__Clusters_size);
      }
      if(dictionary->hasEntry("FMTRec::Clusters","trkID")==true){
         FMTRec__Clusters_trkID = reader.getBranch<int16_t>   ("FMTRec::Clusters","trkID");
         tree->Branch("FMTRec__Clusters_trkID",&vec_FMTRec__Clusters_trkID);
      }
   }
   hipo::node<int16_t>   *FMTRec__Crosses_Cluster1_ID;
   std::vector<Short_t>   vec_FMTRec__Crosses_Cluster1_ID;
   hipo::node<int16_t>   *FMTRec__Crosses_Cluster2_ID;
   std::vector<Short_t>   vec_FMTRec__Crosses_Cluster2_ID;
   hipo::node<int16_t>   *FMTRec__Crosses_ID;
   std::vector<Short_t>   vec_FMTRec__Crosses_ID;
   hipo::node<float>     *FMTRec__Crosses_err_x;
   std::vector<Float_t>   vec_FMTRec__Crosses_err_x;
   hipo::node<float>     *FMTRec__Crosses_err_y;
   std::vector<Float_t>   vec_FMTRec__Crosses_err_y;
   hipo::node<float>     *FMTRec__Crosses_err_z;
   std::vector<Float_t>   vec_FMTRec__Crosses_err_z;
   hipo::node<int8_t>    *FMTRec__Crosses_region;
   std::vector<Char_t>   vec_FMTRec__Crosses_region;
   hipo::node<int8_t>    *FMTRec__Crosses_sector;
   std::vector<Char_t>   vec_FMTRec__Crosses_sector;
   hipo::node<int16_t>   *FMTRec__Crosses_trkID;
   std::vector<Short_t>   vec_FMTRec__Crosses_trkID;
   hipo::node<float>     *FMTRec__Crosses_ux;
   std::vector<Float_t>   vec_FMTRec__Crosses_ux;
   hipo::node<float>     *FMTRec__Crosses_uy;
   std::vector<Float_t>   vec_FMTRec__Crosses_uy;
   hipo::node<float>     *FMTRec__Crosses_uz;
   std::vector<Float_t>   vec_FMTRec__Crosses_uz;
   hipo::node<float>     *FMTRec__Crosses_x;
   std::vector<Float_t>   vec_FMTRec__Crosses_x;
   hipo::node<float>     *FMTRec__Crosses_y;
   std::vector<Float_t>   vec_FMTRec__Crosses_y;
   hipo::node<float>     *FMTRec__Crosses_z;
   std::vector<Float_t>   vec_FMTRec__Crosses_z;
   if(dictionary->hasSchema("FMTRec::Crosses")==true){
      if(dictionary->hasEntry("FMTRec::Crosses","Cluster1_ID")==true){
         FMTRec__Crosses_Cluster1_ID = reader.getBranch<int16_t>   ("FMTRec::Crosses","Cluster1_ID");
         tree->Branch("FMTRec__Crosses_Cluster1_ID",&vec_FMTRec__Crosses_Cluster1_ID);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","Cluster2_ID")==true){
         FMTRec__Crosses_Cluster2_ID = reader.getBranch<int16_t>   ("FMTRec::Crosses","Cluster2_ID");
         tree->Branch("FMTRec__Crosses_Cluster2_ID",&vec_FMTRec__Crosses_Cluster2_ID);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","ID")==true){
         FMTRec__Crosses_ID = reader.getBranch<int16_t>   ("FMTRec::Crosses","ID");
         tree->Branch("FMTRec__Crosses_ID",&vec_FMTRec__Crosses_ID);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","err_x")==true){
         FMTRec__Crosses_err_x = reader.getBranch<float>     ("FMTRec::Crosses","err_x");
         tree->Branch("FMTRec__Crosses_err_x",&vec_FMTRec__Crosses_err_x);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","err_y")==true){
         FMTRec__Crosses_err_y = reader.getBranch<float>     ("FMTRec::Crosses","err_y");
         tree->Branch("FMTRec__Crosses_err_y",&vec_FMTRec__Crosses_err_y);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","err_z")==true){
         FMTRec__Crosses_err_z = reader.getBranch<float>     ("FMTRec::Crosses","err_z");
         tree->Branch("FMTRec__Crosses_err_z",&vec_FMTRec__Crosses_err_z);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","region")==true){
         FMTRec__Crosses_region = reader.getBranch<int8_t>    ("FMTRec::Crosses","region");
         tree->Branch("FMTRec__Crosses_region",&vec_FMTRec__Crosses_region);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","sector")==true){
         FMTRec__Crosses_sector = reader.getBranch<int8_t>    ("FMTRec::Crosses","sector");
         tree->Branch("FMTRec__Crosses_sector",&vec_FMTRec__Crosses_sector);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","trkID")==true){
         FMTRec__Crosses_trkID = reader.getBranch<int16_t>   ("FMTRec::Crosses","trkID");
         tree->Branch("FMTRec__Crosses_trkID",&vec_FMTRec__Crosses_trkID);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","ux")==true){
         FMTRec__Crosses_ux = reader.getBranch<float>     ("FMTRec::Crosses","ux");
         tree->Branch("FMTRec__Crosses_ux",&vec_FMTRec__Crosses_ux);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","uy")==true){
         FMTRec__Crosses_uy = reader.getBranch<float>     ("FMTRec::Crosses","uy");
         tree->Branch("FMTRec__Crosses_uy",&vec_FMTRec__Crosses_uy);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","uz")==true){
         FMTRec__Crosses_uz = reader.getBranch<float>     ("FMTRec::Crosses","uz");
         tree->Branch("FMTRec__Crosses_uz",&vec_FMTRec__Crosses_uz);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","x")==true){
         FMTRec__Crosses_x = reader.getBranch<float>     ("FMTRec::Crosses","x");
         tree->Branch("FMTRec__Crosses_x",&vec_FMTRec__Crosses_x);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","y")==true){
         FMTRec__Crosses_y = reader.getBranch<float>     ("FMTRec::Crosses","y");
         tree->Branch("FMTRec__Crosses_y",&vec_FMTRec__Crosses_y);
      }
      if(dictionary->hasEntry("FMTRec::Crosses","z")==true){
         FMTRec__Crosses_z = reader.getBranch<float>     ("FMTRec::Crosses","z");
         tree->Branch("FMTRec__Crosses_z",&vec_FMTRec__Crosses_z);
      }
   }
   hipo::node<int16_t>   *FMTRec__Hits_ID;
   std::vector<Short_t>   vec_FMTRec__Hits_ID;
   hipo::node<int16_t>   *FMTRec__Hits_clusterID;
   std::vector<Short_t>   vec_FMTRec__Hits_clusterID;
   hipo::node<float>     *FMTRec__Hits_fitResidual;
   std::vector<Float_t>   vec_FMTRec__Hits_fitResidual;
   hipo::node<int8_t>    *FMTRec__Hits_layer;
   std::vector<Char_t>   vec_FMTRec__Hits_layer;
   hipo::node<int8_t>    *FMTRec__Hits_sector;
   std::vector<Char_t>   vec_FMTRec__Hits_sector;
   hipo::node<int32_t>   *FMTRec__Hits_strip;
   std::vector<Int_t>   vec_FMTRec__Hits_strip;
   hipo::node<int16_t>   *FMTRec__Hits_trkID;
   std::vector<Short_t>   vec_FMTRec__Hits_trkID;
   hipo::node<int32_t>   *FMTRec__Hits_trkingStat;
   std::vector<Int_t>   vec_FMTRec__Hits_trkingStat;
   if(dictionary->hasSchema("FMTRec::Hits")==true){
      if(dictionary->hasEntry("FMTRec::Hits","ID")==true){
         FMTRec__Hits_ID = reader.getBranch<int16_t>   ("FMTRec::Hits","ID");
         tree->Branch("FMTRec__Hits_ID",&vec_FMTRec__Hits_ID);
      }
      if(dictionary->hasEntry("FMTRec::Hits","clusterID")==true){
         FMTRec__Hits_clusterID = reader.getBranch<int16_t>   ("FMTRec::Hits","clusterID");
         tree->Branch("FMTRec__Hits_clusterID",&vec_FMTRec__Hits_clusterID);
      }
      if(dictionary->hasEntry("FMTRec::Hits","fitResidual")==true){
         FMTRec__Hits_fitResidual = reader.getBranch<float>     ("FMTRec::Hits","fitResidual");
         tree->Branch("FMTRec__Hits_fitResidual",&vec_FMTRec__Hits_fitResidual);
      }
      if(dictionary->hasEntry("FMTRec::Hits","layer")==true){
         FMTRec__Hits_layer = reader.getBranch<int8_t>    ("FMTRec::Hits","layer");
         tree->Branch("FMTRec__Hits_layer",&vec_FMTRec__Hits_layer);
      }
      if(dictionary->hasEntry("FMTRec::Hits","sector")==true){
         FMTRec__Hits_sector = reader.getBranch<int8_t>    ("FMTRec::Hits","sector");
         tree->Branch("FMTRec__Hits_sector",&vec_FMTRec__Hits_sector);
      }
      if(dictionary->hasEntry("FMTRec::Hits","strip")==true){
         FMTRec__Hits_strip = reader.getBranch<int32_t>   ("FMTRec::Hits","strip");
         tree->Branch("FMTRec__Hits_strip",&vec_FMTRec__Hits_strip);
      }
      if(dictionary->hasEntry("FMTRec::Hits","trkID")==true){
         FMTRec__Hits_trkID = reader.getBranch<int16_t>   ("FMTRec::Hits","trkID");
         tree->Branch("FMTRec__Hits_trkID",&vec_FMTRec__Hits_trkID);
      }
      if(dictionary->hasEntry("FMTRec::Hits","trkingStat")==true){
         FMTRec__Hits_trkingStat = reader.getBranch<int32_t>   ("FMTRec::Hits","trkingStat");
         tree->Branch("FMTRec__Hits_trkingStat",&vec_FMTRec__Hits_trkingStat);
      }
   }
   hipo::node<int16_t>   *FT__particles_calID;
   std::vector<Short_t>   vec_FT__particles_calID;
   hipo::node<int8_t>    *FT__particles_charge;
   std::vector<Char_t>   vec_FT__particles_charge;
   hipo::node<float>     *FT__particles_cx;
   std::vector<Float_t>   vec_FT__particles_cx;
   hipo::node<float>     *FT__particles_cy;
   std::vector<Float_t>   vec_FT__particles_cy;
   hipo::node<float>     *FT__particles_cz;
   std::vector<Float_t>   vec_FT__particles_cz;
   hipo::node<float>     *FT__particles_energy;
   std::vector<Float_t>   vec_FT__particles_energy;
   hipo::node<int16_t>   *FT__particles_hodoID;
   std::vector<Short_t>   vec_FT__particles_hodoID;
   hipo::node<int16_t>   *FT__particles_id;
   std::vector<Short_t>   vec_FT__particles_id;
   hipo::node<float>     *FT__particles_time;
   std::vector<Float_t>   vec_FT__particles_time;
   hipo::node<int16_t>   *FT__particles_trkID;
   std::vector<Short_t>   vec_FT__particles_trkID;
   if(dictionary->hasSchema("FT::particles")==true){
      if(dictionary->hasEntry("FT::particles","calID")==true){
         FT__particles_calID = reader.getBranch<int16_t>   ("FT::particles","calID");
         tree->Branch("FT__particles_calID",&vec_FT__particles_calID);
      }
      if(dictionary->hasEntry("FT::particles","charge")==true){
         FT__particles_charge = reader.getBranch<int8_t>    ("FT::particles","charge");
         tree->Branch("FT__particles_charge",&vec_FT__particles_charge);
      }
      if(dictionary->hasEntry("FT::particles","cx")==true){
         FT__particles_cx = reader.getBranch<float>     ("FT::particles","cx");
         tree->Branch("FT__particles_cx",&vec_FT__particles_cx);
      }
      if(dictionary->hasEntry("FT::particles","cy")==true){
         FT__particles_cy = reader.getBranch<float>     ("FT::particles","cy");
         tree->Branch("FT__particles_cy",&vec_FT__particles_cy);
      }
      if(dictionary->hasEntry("FT::particles","cz")==true){
         FT__particles_cz = reader.getBranch<float>     ("FT::particles","cz");
         tree->Branch("FT__particles_cz",&vec_FT__particles_cz);
      }
      if(dictionary->hasEntry("FT::particles","energy")==true){
         FT__particles_energy = reader.getBranch<float>     ("FT::particles","energy");
         tree->Branch("FT__particles_energy",&vec_FT__particles_energy);
      }
      if(dictionary->hasEntry("FT::particles","hodoID")==true){
         FT__particles_hodoID = reader.getBranch<int16_t>   ("FT::particles","hodoID");
         tree->Branch("FT__particles_hodoID",&vec_FT__particles_hodoID);
      }
      if(dictionary->hasEntry("FT::particles","id")==true){
         FT__particles_id = reader.getBranch<int16_t>   ("FT::particles","id");
         tree->Branch("FT__particles_id",&vec_FT__particles_id);
      }
      if(dictionary->hasEntry("FT::particles","time")==true){
         FT__particles_time = reader.getBranch<float>     ("FT::particles","time");
         tree->Branch("FT__particles_time",&vec_FT__particles_time);
      }
      if(dictionary->hasEntry("FT::particles","trkID")==true){
         FT__particles_trkID = reader.getBranch<int16_t>   ("FT::particles","trkID");
         tree->Branch("FT__particles_trkID",&vec_FT__particles_trkID);
      }
   }
   hipo::node<int32_t>   *FTCAL__adc_ADC;
   std::vector<Int_t>   vec_FTCAL__adc_ADC;
   hipo::node<int16_t>   *FTCAL__adc_component;
   std::vector<Short_t>   vec_FTCAL__adc_component;
   hipo::node<int8_t>    *FTCAL__adc_layer;
   std::vector<Char_t>   vec_FTCAL__adc_layer;
   hipo::node<int8_t>    *FTCAL__adc_order;
   std::vector<Char_t>   vec_FTCAL__adc_order;
   hipo::node<int16_t>   *FTCAL__adc_ped;
   std::vector<Short_t>   vec_FTCAL__adc_ped;
   hipo::node<int8_t>    *FTCAL__adc_sector;
   std::vector<Char_t>   vec_FTCAL__adc_sector;
   hipo::node<float>     *FTCAL__adc_time;
   std::vector<Float_t>   vec_FTCAL__adc_time;
   if(dictionary->hasSchema("FTCAL::adc")==true){
      if(dictionary->hasEntry("FTCAL::adc","ADC")==true){
         FTCAL__adc_ADC = reader.getBranch<int32_t>   ("FTCAL::adc","ADC");
         tree->Branch("FTCAL__adc_ADC",&vec_FTCAL__adc_ADC);
      }
      if(dictionary->hasEntry("FTCAL::adc","component")==true){
         FTCAL__adc_component = reader.getBranch<int16_t>   ("FTCAL::adc","component");
         tree->Branch("FTCAL__adc_component",&vec_FTCAL__adc_component);
      }
      if(dictionary->hasEntry("FTCAL::adc","layer")==true){
         FTCAL__adc_layer = reader.getBranch<int8_t>    ("FTCAL::adc","layer");
         tree->Branch("FTCAL__adc_layer",&vec_FTCAL__adc_layer);
      }
      if(dictionary->hasEntry("FTCAL::adc","order")==true){
         FTCAL__adc_order = reader.getBranch<int8_t>    ("FTCAL::adc","order");
         tree->Branch("FTCAL__adc_order",&vec_FTCAL__adc_order);
      }
      if(dictionary->hasEntry("FTCAL::adc","ped")==true){
         FTCAL__adc_ped = reader.getBranch<int16_t>   ("FTCAL::adc","ped");
         tree->Branch("FTCAL__adc_ped",&vec_FTCAL__adc_ped);
      }
      if(dictionary->hasEntry("FTCAL::adc","sector")==true){
         FTCAL__adc_sector = reader.getBranch<int8_t>    ("FTCAL::adc","sector");
         tree->Branch("FTCAL__adc_sector",&vec_FTCAL__adc_sector);
      }
      if(dictionary->hasEntry("FTCAL::adc","time")==true){
         FTCAL__adc_time = reader.getBranch<float>     ("FTCAL::adc","time");
         tree->Branch("FTCAL__adc_time",&vec_FTCAL__adc_time);
      }
   }
   hipo::node<float>     *FTCAL__clusters_energy;
   std::vector<Float_t>   vec_FTCAL__clusters_energy;
   hipo::node<int16_t>   *FTCAL__clusters_id;
   std::vector<Short_t>   vec_FTCAL__clusters_id;
   hipo::node<float>     *FTCAL__clusters_maxEnergy;
   std::vector<Float_t>   vec_FTCAL__clusters_maxEnergy;
   hipo::node<float>     *FTCAL__clusters_radius;
   std::vector<Float_t>   vec_FTCAL__clusters_radius;
   hipo::node<float>     *FTCAL__clusters_recEnergy;
   std::vector<Float_t>   vec_FTCAL__clusters_recEnergy;
   hipo::node<int16_t>   *FTCAL__clusters_size;
   std::vector<Short_t>   vec_FTCAL__clusters_size;
   hipo::node<float>     *FTCAL__clusters_time;
   std::vector<Float_t>   vec_FTCAL__clusters_time;
   hipo::node<float>     *FTCAL__clusters_widthX;
   std::vector<Float_t>   vec_FTCAL__clusters_widthX;
   hipo::node<float>     *FTCAL__clusters_widthY;
   std::vector<Float_t>   vec_FTCAL__clusters_widthY;
   hipo::node<float>     *FTCAL__clusters_x;
   std::vector<Float_t>   vec_FTCAL__clusters_x;
   hipo::node<float>     *FTCAL__clusters_y;
   std::vector<Float_t>   vec_FTCAL__clusters_y;
   hipo::node<float>     *FTCAL__clusters_z;
   std::vector<Float_t>   vec_FTCAL__clusters_z;
   if(dictionary->hasSchema("FTCAL::clusters")==true){
      if(dictionary->hasEntry("FTCAL::clusters","energy")==true){
         FTCAL__clusters_energy = reader.getBranch<float>     ("FTCAL::clusters","energy");
         tree->Branch("FTCAL__clusters_energy",&vec_FTCAL__clusters_energy);
      }
      if(dictionary->hasEntry("FTCAL::clusters","id")==true){
         FTCAL__clusters_id = reader.getBranch<int16_t>   ("FTCAL::clusters","id");
         tree->Branch("FTCAL__clusters_id",&vec_FTCAL__clusters_id);
      }
      if(dictionary->hasEntry("FTCAL::clusters","maxEnergy")==true){
         FTCAL__clusters_maxEnergy = reader.getBranch<float>     ("FTCAL::clusters","maxEnergy");
         tree->Branch("FTCAL__clusters_maxEnergy",&vec_FTCAL__clusters_maxEnergy);
      }
      if(dictionary->hasEntry("FTCAL::clusters","radius")==true){
         FTCAL__clusters_radius = reader.getBranch<float>     ("FTCAL::clusters","radius");
         tree->Branch("FTCAL__clusters_radius",&vec_FTCAL__clusters_radius);
      }
      if(dictionary->hasEntry("FTCAL::clusters","recEnergy")==true){
         FTCAL__clusters_recEnergy = reader.getBranch<float>     ("FTCAL::clusters","recEnergy");
         tree->Branch("FTCAL__clusters_recEnergy",&vec_FTCAL__clusters_recEnergy);
      }
      if(dictionary->hasEntry("FTCAL::clusters","size")==true){
         FTCAL__clusters_size = reader.getBranch<int16_t>   ("FTCAL::clusters","size");
         tree->Branch("FTCAL__clusters_size",&vec_FTCAL__clusters_size);
      }
      if(dictionary->hasEntry("FTCAL::clusters","time")==true){
         FTCAL__clusters_time = reader.getBranch<float>     ("FTCAL::clusters","time");
         tree->Branch("FTCAL__clusters_time",&vec_FTCAL__clusters_time);
      }
      if(dictionary->hasEntry("FTCAL::clusters","widthX")==true){
         FTCAL__clusters_widthX = reader.getBranch<float>     ("FTCAL::clusters","widthX");
         tree->Branch("FTCAL__clusters_widthX",&vec_FTCAL__clusters_widthX);
      }
      if(dictionary->hasEntry("FTCAL::clusters","widthY")==true){
         FTCAL__clusters_widthY = reader.getBranch<float>     ("FTCAL::clusters","widthY");
         tree->Branch("FTCAL__clusters_widthY",&vec_FTCAL__clusters_widthY);
      }
      if(dictionary->hasEntry("FTCAL::clusters","x")==true){
         FTCAL__clusters_x = reader.getBranch<float>     ("FTCAL::clusters","x");
         tree->Branch("FTCAL__clusters_x",&vec_FTCAL__clusters_x);
      }
      if(dictionary->hasEntry("FTCAL::clusters","y")==true){
         FTCAL__clusters_y = reader.getBranch<float>     ("FTCAL::clusters","y");
         tree->Branch("FTCAL__clusters_y",&vec_FTCAL__clusters_y);
      }
      if(dictionary->hasEntry("FTCAL::clusters","z")==true){
         FTCAL__clusters_z = reader.getBranch<float>     ("FTCAL::clusters","z");
         tree->Branch("FTCAL__clusters_z",&vec_FTCAL__clusters_z);
      }
   }
   hipo::node<int16_t>   *FTCAL__hits_clusterID;
   std::vector<Short_t>   vec_FTCAL__hits_clusterID;
   hipo::node<float>     *FTCAL__hits_energy;
   std::vector<Float_t>   vec_FTCAL__hits_energy;
   hipo::node<int16_t>   *FTCAL__hits_hitID;
   std::vector<Short_t>   vec_FTCAL__hits_hitID;
   hipo::node<int8_t>    *FTCAL__hits_idx;
   std::vector<Char_t>   vec_FTCAL__hits_idx;
   hipo::node<int8_t>    *FTCAL__hits_idy;
   std::vector<Char_t>   vec_FTCAL__hits_idy;
   hipo::node<float>     *FTCAL__hits_time;
   std::vector<Float_t>   vec_FTCAL__hits_time;
   hipo::node<float>     *FTCAL__hits_x;
   std::vector<Float_t>   vec_FTCAL__hits_x;
   hipo::node<float>     *FTCAL__hits_y;
   std::vector<Float_t>   vec_FTCAL__hits_y;
   hipo::node<float>     *FTCAL__hits_z;
   std::vector<Float_t>   vec_FTCAL__hits_z;
   if(dictionary->hasSchema("FTCAL::hits")==true){
      if(dictionary->hasEntry("FTCAL::hits","clusterID")==true){
         FTCAL__hits_clusterID = reader.getBranch<int16_t>   ("FTCAL::hits","clusterID");
         tree->Branch("FTCAL__hits_clusterID",&vec_FTCAL__hits_clusterID);
      }
      if(dictionary->hasEntry("FTCAL::hits","energy")==true){
         FTCAL__hits_energy = reader.getBranch<float>     ("FTCAL::hits","energy");
         tree->Branch("FTCAL__hits_energy",&vec_FTCAL__hits_energy);
      }
      if(dictionary->hasEntry("FTCAL::hits","hitID")==true){
         FTCAL__hits_hitID = reader.getBranch<int16_t>   ("FTCAL::hits","hitID");
         tree->Branch("FTCAL__hits_hitID",&vec_FTCAL__hits_hitID);
      }
      if(dictionary->hasEntry("FTCAL::hits","idx")==true){
         FTCAL__hits_idx = reader.getBranch<int8_t>    ("FTCAL::hits","idx");
         tree->Branch("FTCAL__hits_idx",&vec_FTCAL__hits_idx);
      }
      if(dictionary->hasEntry("FTCAL::hits","idy")==true){
         FTCAL__hits_idy = reader.getBranch<int8_t>    ("FTCAL::hits","idy");
         tree->Branch("FTCAL__hits_idy",&vec_FTCAL__hits_idy);
      }
      if(dictionary->hasEntry("FTCAL::hits","time")==true){
         FTCAL__hits_time = reader.getBranch<float>     ("FTCAL::hits","time");
         tree->Branch("FTCAL__hits_time",&vec_FTCAL__hits_time);
      }
      if(dictionary->hasEntry("FTCAL::hits","x")==true){
         FTCAL__hits_x = reader.getBranch<float>     ("FTCAL::hits","x");
         tree->Branch("FTCAL__hits_x",&vec_FTCAL__hits_x);
      }
      if(dictionary->hasEntry("FTCAL::hits","y")==true){
         FTCAL__hits_y = reader.getBranch<float>     ("FTCAL::hits","y");
         tree->Branch("FTCAL__hits_y",&vec_FTCAL__hits_y);
      }
      if(dictionary->hasEntry("FTCAL::hits","z")==true){
         FTCAL__hits_z = reader.getBranch<float>     ("FTCAL::hits","z");
         tree->Branch("FTCAL__hits_z",&vec_FTCAL__hits_z);
      }
   }
   hipo::node<int32_t>   *FTHODO__adc_ADC;
   std::vector<Int_t>   vec_FTHODO__adc_ADC;
   hipo::node<int16_t>   *FTHODO__adc_component;
   std::vector<Short_t>   vec_FTHODO__adc_component;
   hipo::node<int8_t>    *FTHODO__adc_layer;
   std::vector<Char_t>   vec_FTHODO__adc_layer;
   hipo::node<int8_t>    *FTHODO__adc_order;
   std::vector<Char_t>   vec_FTHODO__adc_order;
   hipo::node<int16_t>   *FTHODO__adc_ped;
   std::vector<Short_t>   vec_FTHODO__adc_ped;
   hipo::node<int8_t>    *FTHODO__adc_sector;
   std::vector<Char_t>   vec_FTHODO__adc_sector;
   hipo::node<float>     *FTHODO__adc_time;
   std::vector<Float_t>   vec_FTHODO__adc_time;
   if(dictionary->hasSchema("FTHODO::adc")==true){
      if(dictionary->hasEntry("FTHODO::adc","ADC")==true){
         FTHODO__adc_ADC = reader.getBranch<int32_t>   ("FTHODO::adc","ADC");
         tree->Branch("FTHODO__adc_ADC",&vec_FTHODO__adc_ADC);
      }
      if(dictionary->hasEntry("FTHODO::adc","component")==true){
         FTHODO__adc_component = reader.getBranch<int16_t>   ("FTHODO::adc","component");
         tree->Branch("FTHODO__adc_component",&vec_FTHODO__adc_component);
      }
      if(dictionary->hasEntry("FTHODO::adc","layer")==true){
         FTHODO__adc_layer = reader.getBranch<int8_t>    ("FTHODO::adc","layer");
         tree->Branch("FTHODO__adc_layer",&vec_FTHODO__adc_layer);
      }
      if(dictionary->hasEntry("FTHODO::adc","order")==true){
         FTHODO__adc_order = reader.getBranch<int8_t>    ("FTHODO::adc","order");
         tree->Branch("FTHODO__adc_order",&vec_FTHODO__adc_order);
      }
      if(dictionary->hasEntry("FTHODO::adc","ped")==true){
         FTHODO__adc_ped = reader.getBranch<int16_t>   ("FTHODO::adc","ped");
         tree->Branch("FTHODO__adc_ped",&vec_FTHODO__adc_ped);
      }
      if(dictionary->hasEntry("FTHODO::adc","sector")==true){
         FTHODO__adc_sector = reader.getBranch<int8_t>    ("FTHODO::adc","sector");
         tree->Branch("FTHODO__adc_sector",&vec_FTHODO__adc_sector);
      }
      if(dictionary->hasEntry("FTHODO::adc","time")==true){
         FTHODO__adc_time = reader.getBranch<float>     ("FTHODO::adc","time");
         tree->Branch("FTHODO__adc_time",&vec_FTHODO__adc_time);
      }
   }
   hipo::node<float>     *FTHODO__clusters_energy;
   std::vector<Float_t>   vec_FTHODO__clusters_energy;
   hipo::node<int16_t>   *FTHODO__clusters_id;
   std::vector<Short_t>   vec_FTHODO__clusters_id;
   hipo::node<float>     *FTHODO__clusters_radius;
   std::vector<Float_t>   vec_FTHODO__clusters_radius;
   hipo::node<int16_t>   *FTHODO__clusters_size;
   std::vector<Short_t>   vec_FTHODO__clusters_size;
   hipo::node<float>     *FTHODO__clusters_time;
   std::vector<Float_t>   vec_FTHODO__clusters_time;
   hipo::node<float>     *FTHODO__clusters_widthX;
   std::vector<Float_t>   vec_FTHODO__clusters_widthX;
   hipo::node<float>     *FTHODO__clusters_widthY;
   std::vector<Float_t>   vec_FTHODO__clusters_widthY;
   hipo::node<float>     *FTHODO__clusters_x;
   std::vector<Float_t>   vec_FTHODO__clusters_x;
   hipo::node<float>     *FTHODO__clusters_y;
   std::vector<Float_t>   vec_FTHODO__clusters_y;
   hipo::node<float>     *FTHODO__clusters_z;
   std::vector<Float_t>   vec_FTHODO__clusters_z;
   if(dictionary->hasSchema("FTHODO::clusters")==true){
      if(dictionary->hasEntry("FTHODO::clusters","energy")==true){
         FTHODO__clusters_energy = reader.getBranch<float>     ("FTHODO::clusters","energy");
         tree->Branch("FTHODO__clusters_energy",&vec_FTHODO__clusters_energy);
      }
      if(dictionary->hasEntry("FTHODO::clusters","id")==true){
         FTHODO__clusters_id = reader.getBranch<int16_t>   ("FTHODO::clusters","id");
         tree->Branch("FTHODO__clusters_id",&vec_FTHODO__clusters_id);
      }
      if(dictionary->hasEntry("FTHODO::clusters","radius")==true){
         FTHODO__clusters_radius = reader.getBranch<float>     ("FTHODO::clusters","radius");
         tree->Branch("FTHODO__clusters_radius",&vec_FTHODO__clusters_radius);
      }
      if(dictionary->hasEntry("FTHODO::clusters","size")==true){
         FTHODO__clusters_size = reader.getBranch<int16_t>   ("FTHODO::clusters","size");
         tree->Branch("FTHODO__clusters_size",&vec_FTHODO__clusters_size);
      }
      if(dictionary->hasEntry("FTHODO::clusters","time")==true){
         FTHODO__clusters_time = reader.getBranch<float>     ("FTHODO::clusters","time");
         tree->Branch("FTHODO__clusters_time",&vec_FTHODO__clusters_time);
      }
      if(dictionary->hasEntry("FTHODO::clusters","widthX")==true){
         FTHODO__clusters_widthX = reader.getBranch<float>     ("FTHODO::clusters","widthX");
         tree->Branch("FTHODO__clusters_widthX",&vec_FTHODO__clusters_widthX);
      }
      if(dictionary->hasEntry("FTHODO::clusters","widthY")==true){
         FTHODO__clusters_widthY = reader.getBranch<float>     ("FTHODO::clusters","widthY");
         tree->Branch("FTHODO__clusters_widthY",&vec_FTHODO__clusters_widthY);
      }
      if(dictionary->hasEntry("FTHODO::clusters","x")==true){
         FTHODO__clusters_x = reader.getBranch<float>     ("FTHODO::clusters","x");
         tree->Branch("FTHODO__clusters_x",&vec_FTHODO__clusters_x);
      }
      if(dictionary->hasEntry("FTHODO::clusters","y")==true){
         FTHODO__clusters_y = reader.getBranch<float>     ("FTHODO::clusters","y");
         tree->Branch("FTHODO__clusters_y",&vec_FTHODO__clusters_y);
      }
      if(dictionary->hasEntry("FTHODO::clusters","z")==true){
         FTHODO__clusters_z = reader.getBranch<float>     ("FTHODO::clusters","z");
         tree->Branch("FTHODO__clusters_z",&vec_FTHODO__clusters_z);
      }
   }
   hipo::node<int16_t>   *FTHODO__hits_clusterID;
   std::vector<Short_t>   vec_FTHODO__hits_clusterID;
   hipo::node<int16_t>   *FTHODO__hits_component;
   std::vector<Short_t>   vec_FTHODO__hits_component;
   hipo::node<float>     *FTHODO__hits_energy;
   std::vector<Float_t>   vec_FTHODO__hits_energy;
   hipo::node<int16_t>   *FTHODO__hits_hitID;
   std::vector<Short_t>   vec_FTHODO__hits_hitID;
   hipo::node<int8_t>    *FTHODO__hits_layer;
   std::vector<Char_t>   vec_FTHODO__hits_layer;
   hipo::node<int8_t>    *FTHODO__hits_sector;
   std::vector<Char_t>   vec_FTHODO__hits_sector;
   hipo::node<float>     *FTHODO__hits_time;
   std::vector<Float_t>   vec_FTHODO__hits_time;
   hipo::node<float>     *FTHODO__hits_x;
   std::vector<Float_t>   vec_FTHODO__hits_x;
   hipo::node<float>     *FTHODO__hits_y;
   std::vector<Float_t>   vec_FTHODO__hits_y;
   hipo::node<float>     *FTHODO__hits_z;
   std::vector<Float_t>   vec_FTHODO__hits_z;
   if(dictionary->hasSchema("FTHODO::hits")==true){
      if(dictionary->hasEntry("FTHODO::hits","clusterID")==true){
         FTHODO__hits_clusterID = reader.getBranch<int16_t>   ("FTHODO::hits","clusterID");
         tree->Branch("FTHODO__hits_clusterID",&vec_FTHODO__hits_clusterID);
      }
      if(dictionary->hasEntry("FTHODO::hits","component")==true){
         FTHODO__hits_component = reader.getBranch<int16_t>   ("FTHODO::hits","component");
         tree->Branch("FTHODO__hits_component",&vec_FTHODO__hits_component);
      }
      if(dictionary->hasEntry("FTHODO::hits","energy")==true){
         FTHODO__hits_energy = reader.getBranch<float>     ("FTHODO::hits","energy");
         tree->Branch("FTHODO__hits_energy",&vec_FTHODO__hits_energy);
      }
      if(dictionary->hasEntry("FTHODO::hits","hitID")==true){
         FTHODO__hits_hitID = reader.getBranch<int16_t>   ("FTHODO::hits","hitID");
         tree->Branch("FTHODO__hits_hitID",&vec_FTHODO__hits_hitID);
      }
      if(dictionary->hasEntry("FTHODO::hits","layer")==true){
         FTHODO__hits_layer = reader.getBranch<int8_t>    ("FTHODO::hits","layer");
         tree->Branch("FTHODO__hits_layer",&vec_FTHODO__hits_layer);
      }
      if(dictionary->hasEntry("FTHODO::hits","sector")==true){
         FTHODO__hits_sector = reader.getBranch<int8_t>    ("FTHODO::hits","sector");
         tree->Branch("FTHODO__hits_sector",&vec_FTHODO__hits_sector);
      }
      if(dictionary->hasEntry("FTHODO::hits","time")==true){
         FTHODO__hits_time = reader.getBranch<float>     ("FTHODO::hits","time");
         tree->Branch("FTHODO__hits_time",&vec_FTHODO__hits_time);
      }
      if(dictionary->hasEntry("FTHODO::hits","x")==true){
         FTHODO__hits_x = reader.getBranch<float>     ("FTHODO::hits","x");
         tree->Branch("FTHODO__hits_x",&vec_FTHODO__hits_x);
      }
      if(dictionary->hasEntry("FTHODO::hits","y")==true){
         FTHODO__hits_y = reader.getBranch<float>     ("FTHODO::hits","y");
         tree->Branch("FTHODO__hits_y",&vec_FTHODO__hits_y);
      }
      if(dictionary->hasEntry("FTHODO::hits","z")==true){
         FTHODO__hits_z = reader.getBranch<float>     ("FTHODO::hits","z");
         tree->Branch("FTHODO__hits_z",&vec_FTHODO__hits_z);
      }
   }
   hipo::node<int32_t>   *FTOF__adc_ADC;
   std::vector<Int_t>   vec_FTOF__adc_ADC;
   hipo::node<int16_t>   *FTOF__adc_component;
   std::vector<Short_t>   vec_FTOF__adc_component;
   hipo::node<int8_t>    *FTOF__adc_layer;
   std::vector<Char_t>   vec_FTOF__adc_layer;
   hipo::node<int8_t>    *FTOF__adc_order;
   std::vector<Char_t>   vec_FTOF__adc_order;
   hipo::node<int16_t>   *FTOF__adc_ped;
   std::vector<Short_t>   vec_FTOF__adc_ped;
   hipo::node<int8_t>    *FTOF__adc_sector;
   std::vector<Char_t>   vec_FTOF__adc_sector;
   hipo::node<float>     *FTOF__adc_time;
   std::vector<Float_t>   vec_FTOF__adc_time;
   if(dictionary->hasSchema("FTOF::adc")==true){
      if(dictionary->hasEntry("FTOF::adc","ADC")==true){
         FTOF__adc_ADC = reader.getBranch<int32_t>   ("FTOF::adc","ADC");
         tree->Branch("FTOF__adc_ADC",&vec_FTOF__adc_ADC);
      }
      if(dictionary->hasEntry("FTOF::adc","component")==true){
         FTOF__adc_component = reader.getBranch<int16_t>   ("FTOF::adc","component");
         tree->Branch("FTOF__adc_component",&vec_FTOF__adc_component);
      }
      if(dictionary->hasEntry("FTOF::adc","layer")==true){
         FTOF__adc_layer = reader.getBranch<int8_t>    ("FTOF::adc","layer");
         tree->Branch("FTOF__adc_layer",&vec_FTOF__adc_layer);
      }
      if(dictionary->hasEntry("FTOF::adc","order")==true){
         FTOF__adc_order = reader.getBranch<int8_t>    ("FTOF::adc","order");
         tree->Branch("FTOF__adc_order",&vec_FTOF__adc_order);
      }
      if(dictionary->hasEntry("FTOF::adc","ped")==true){
         FTOF__adc_ped = reader.getBranch<int16_t>   ("FTOF::adc","ped");
         tree->Branch("FTOF__adc_ped",&vec_FTOF__adc_ped);
      }
      if(dictionary->hasEntry("FTOF::adc","sector")==true){
         FTOF__adc_sector = reader.getBranch<int8_t>    ("FTOF::adc","sector");
         tree->Branch("FTOF__adc_sector",&vec_FTOF__adc_sector);
      }
      if(dictionary->hasEntry("FTOF::adc","time")==true){
         FTOF__adc_time = reader.getBranch<float>     ("FTOF::adc","time");
         tree->Branch("FTOF__adc_time",&vec_FTOF__adc_time);
      }
   }
   hipo::node<int16_t>   *FTOF__clusters_component;
   std::vector<Short_t>   vec_FTOF__clusters_component;
   hipo::node<float>     *FTOF__clusters_energy;
   std::vector<Float_t>   vec_FTOF__clusters_energy;
   hipo::node<float>     *FTOF__clusters_energy_unc;
   std::vector<Float_t>   vec_FTOF__clusters_energy_unc;
   hipo::node<int16_t>   *FTOF__clusters_id;
   std::vector<Short_t>   vec_FTOF__clusters_id;
   hipo::node<int8_t>    *FTOF__clusters_layer;
   std::vector<Char_t>   vec_FTOF__clusters_layer;
   hipo::node<int8_t>    *FTOF__clusters_sector;
   std::vector<Char_t>   vec_FTOF__clusters_sector;
   hipo::node<int16_t>   *FTOF__clusters_status;
   std::vector<Short_t>   vec_FTOF__clusters_status;
   hipo::node<float>     *FTOF__clusters_time;
   std::vector<Float_t>   vec_FTOF__clusters_time;
   hipo::node<float>     *FTOF__clusters_time_unc;
   std::vector<Float_t>   vec_FTOF__clusters_time_unc;
   hipo::node<int16_t>   *FTOF__clusters_trackid;
   std::vector<Short_t>   vec_FTOF__clusters_trackid;
   hipo::node<float>     *FTOF__clusters_x;
   std::vector<Float_t>   vec_FTOF__clusters_x;
   hipo::node<float>     *FTOF__clusters_x_unc;
   std::vector<Float_t>   vec_FTOF__clusters_x_unc;
   hipo::node<float>     *FTOF__clusters_y;
   std::vector<Float_t>   vec_FTOF__clusters_y;
   hipo::node<float>     *FTOF__clusters_y_unc;
   std::vector<Float_t>   vec_FTOF__clusters_y_unc;
   hipo::node<float>     *FTOF__clusters_z;
   std::vector<Float_t>   vec_FTOF__clusters_z;
   hipo::node<float>     *FTOF__clusters_z_unc;
   std::vector<Float_t>   vec_FTOF__clusters_z_unc;
   if(dictionary->hasSchema("FTOF::clusters")==true){
      if(dictionary->hasEntry("FTOF::clusters","component")==true){
         FTOF__clusters_component = reader.getBranch<int16_t>   ("FTOF::clusters","component");
         tree->Branch("FTOF__clusters_component",&vec_FTOF__clusters_component);
      }
      if(dictionary->hasEntry("FTOF::clusters","energy")==true){
         FTOF__clusters_energy = reader.getBranch<float>     ("FTOF::clusters","energy");
         tree->Branch("FTOF__clusters_energy",&vec_FTOF__clusters_energy);
      }
      if(dictionary->hasEntry("FTOF::clusters","energy_unc")==true){
         FTOF__clusters_energy_unc = reader.getBranch<float>     ("FTOF::clusters","energy_unc");
         tree->Branch("FTOF__clusters_energy_unc",&vec_FTOF__clusters_energy_unc);
      }
      if(dictionary->hasEntry("FTOF::clusters","id")==true){
         FTOF__clusters_id = reader.getBranch<int16_t>   ("FTOF::clusters","id");
         tree->Branch("FTOF__clusters_id",&vec_FTOF__clusters_id);
      }
      if(dictionary->hasEntry("FTOF::clusters","layer")==true){
         FTOF__clusters_layer = reader.getBranch<int8_t>    ("FTOF::clusters","layer");
         tree->Branch("FTOF__clusters_layer",&vec_FTOF__clusters_layer);
      }
      if(dictionary->hasEntry("FTOF::clusters","sector")==true){
         FTOF__clusters_sector = reader.getBranch<int8_t>    ("FTOF::clusters","sector");
         tree->Branch("FTOF__clusters_sector",&vec_FTOF__clusters_sector);
      }
      if(dictionary->hasEntry("FTOF::clusters","status")==true){
         FTOF__clusters_status = reader.getBranch<int16_t>   ("FTOF::clusters","status");
         tree->Branch("FTOF__clusters_status",&vec_FTOF__clusters_status);
      }
      if(dictionary->hasEntry("FTOF::clusters","time")==true){
         FTOF__clusters_time = reader.getBranch<float>     ("FTOF::clusters","time");
         tree->Branch("FTOF__clusters_time",&vec_FTOF__clusters_time);
      }
      if(dictionary->hasEntry("FTOF::clusters","time_unc")==true){
         FTOF__clusters_time_unc = reader.getBranch<float>     ("FTOF::clusters","time_unc");
         tree->Branch("FTOF__clusters_time_unc",&vec_FTOF__clusters_time_unc);
      }
      if(dictionary->hasEntry("FTOF::clusters","trackid")==true){
         FTOF__clusters_trackid = reader.getBranch<int16_t>   ("FTOF::clusters","trackid");
         tree->Branch("FTOF__clusters_trackid",&vec_FTOF__clusters_trackid);
      }
      if(dictionary->hasEntry("FTOF::clusters","x")==true){
         FTOF__clusters_x = reader.getBranch<float>     ("FTOF::clusters","x");
         tree->Branch("FTOF__clusters_x",&vec_FTOF__clusters_x);
      }
      if(dictionary->hasEntry("FTOF::clusters","x_unc")==true){
         FTOF__clusters_x_unc = reader.getBranch<float>     ("FTOF::clusters","x_unc");
         tree->Branch("FTOF__clusters_x_unc",&vec_FTOF__clusters_x_unc);
      }
      if(dictionary->hasEntry("FTOF::clusters","y")==true){
         FTOF__clusters_y = reader.getBranch<float>     ("FTOF::clusters","y");
         tree->Branch("FTOF__clusters_y",&vec_FTOF__clusters_y);
      }
      if(dictionary->hasEntry("FTOF::clusters","y_unc")==true){
         FTOF__clusters_y_unc = reader.getBranch<float>     ("FTOF::clusters","y_unc");
         tree->Branch("FTOF__clusters_y_unc",&vec_FTOF__clusters_y_unc);
      }
      if(dictionary->hasEntry("FTOF::clusters","z")==true){
         FTOF__clusters_z = reader.getBranch<float>     ("FTOF::clusters","z");
         tree->Branch("FTOF__clusters_z",&vec_FTOF__clusters_z);
      }
      if(dictionary->hasEntry("FTOF::clusters","z_unc")==true){
         FTOF__clusters_z_unc = reader.getBranch<float>     ("FTOF::clusters","z_unc");
         tree->Branch("FTOF__clusters_z_unc",&vec_FTOF__clusters_z_unc);
      }
   }
   hipo::node<int16_t>   *FTOF__hits_adc_idx1;
   std::vector<Short_t>   vec_FTOF__hits_adc_idx1;
   hipo::node<int16_t>   *FTOF__hits_adc_idx2;
   std::vector<Short_t>   vec_FTOF__hits_adc_idx2;
   hipo::node<int16_t>   *FTOF__hits_component;
   std::vector<Short_t>   vec_FTOF__hits_component;
   hipo::node<float>     *FTOF__hits_energy;
   std::vector<Float_t>   vec_FTOF__hits_energy;
   hipo::node<float>     *FTOF__hits_energy_unc;
   std::vector<Float_t>   vec_FTOF__hits_energy_unc;
   hipo::node<int16_t>   *FTOF__hits_id;
   std::vector<Short_t>   vec_FTOF__hits_id;
   hipo::node<int8_t>    *FTOF__hits_layer;
   std::vector<Char_t>   vec_FTOF__hits_layer;
   hipo::node<float>     *FTOF__hits_pathLength;
   std::vector<Float_t>   vec_FTOF__hits_pathLength;
   hipo::node<float>     *FTOF__hits_pathLengthThruBar;
   std::vector<Float_t>   vec_FTOF__hits_pathLengthThruBar;
   hipo::node<int8_t>    *FTOF__hits_sector;
   std::vector<Char_t>   vec_FTOF__hits_sector;
   hipo::node<int16_t>   *FTOF__hits_status;
   std::vector<Short_t>   vec_FTOF__hits_status;
   hipo::node<int16_t>   *FTOF__hits_tdc_idx1;
   std::vector<Short_t>   vec_FTOF__hits_tdc_idx1;
   hipo::node<int16_t>   *FTOF__hits_tdc_idx2;
   std::vector<Short_t>   vec_FTOF__hits_tdc_idx2;
   hipo::node<float>     *FTOF__hits_time;
   std::vector<Float_t>   vec_FTOF__hits_time;
   hipo::node<float>     *FTOF__hits_time_unc;
   std::vector<Float_t>   vec_FTOF__hits_time_unc;
   hipo::node<int16_t>   *FTOF__hits_trackid;
   std::vector<Short_t>   vec_FTOF__hits_trackid;
   hipo::node<float>     *FTOF__hits_tx;
   std::vector<Float_t>   vec_FTOF__hits_tx;
   hipo::node<float>     *FTOF__hits_ty;
   std::vector<Float_t>   vec_FTOF__hits_ty;
   hipo::node<float>     *FTOF__hits_tz;
   std::vector<Float_t>   vec_FTOF__hits_tz;
   hipo::node<float>     *FTOF__hits_x;
   std::vector<Float_t>   vec_FTOF__hits_x;
   hipo::node<float>     *FTOF__hits_x_unc;
   std::vector<Float_t>   vec_FTOF__hits_x_unc;
   hipo::node<float>     *FTOF__hits_y;
   std::vector<Float_t>   vec_FTOF__hits_y;
   hipo::node<float>     *FTOF__hits_y_unc;
   std::vector<Float_t>   vec_FTOF__hits_y_unc;
   hipo::node<float>     *FTOF__hits_z;
   std::vector<Float_t>   vec_FTOF__hits_z;
   hipo::node<float>     *FTOF__hits_z_unc;
   std::vector<Float_t>   vec_FTOF__hits_z_unc;
   if(dictionary->hasSchema("FTOF::hits")==true){
      if(dictionary->hasEntry("FTOF::hits","adc_idx1")==true){
         FTOF__hits_adc_idx1 = reader.getBranch<int16_t>   ("FTOF::hits","adc_idx1");
         tree->Branch("FTOF__hits_adc_idx1",&vec_FTOF__hits_adc_idx1);
      }
      if(dictionary->hasEntry("FTOF::hits","adc_idx2")==true){
         FTOF__hits_adc_idx2 = reader.getBranch<int16_t>   ("FTOF::hits","adc_idx2");
         tree->Branch("FTOF__hits_adc_idx2",&vec_FTOF__hits_adc_idx2);
      }
      if(dictionary->hasEntry("FTOF::hits","component")==true){
         FTOF__hits_component = reader.getBranch<int16_t>   ("FTOF::hits","component");
         tree->Branch("FTOF__hits_component",&vec_FTOF__hits_component);
      }
      if(dictionary->hasEntry("FTOF::hits","energy")==true){
         FTOF__hits_energy = reader.getBranch<float>     ("FTOF::hits","energy");
         tree->Branch("FTOF__hits_energy",&vec_FTOF__hits_energy);
      }
      if(dictionary->hasEntry("FTOF::hits","energy_unc")==true){
         FTOF__hits_energy_unc = reader.getBranch<float>     ("FTOF::hits","energy_unc");
         tree->Branch("FTOF__hits_energy_unc",&vec_FTOF__hits_energy_unc);
      }
      if(dictionary->hasEntry("FTOF::hits","id")==true){
         FTOF__hits_id = reader.getBranch<int16_t>   ("FTOF::hits","id");
         tree->Branch("FTOF__hits_id",&vec_FTOF__hits_id);
      }
      if(dictionary->hasEntry("FTOF::hits","layer")==true){
         FTOF__hits_layer = reader.getBranch<int8_t>    ("FTOF::hits","layer");
         tree->Branch("FTOF__hits_layer",&vec_FTOF__hits_layer);
      }
      if(dictionary->hasEntry("FTOF::hits","pathLength")==true){
         FTOF__hits_pathLength = reader.getBranch<float>     ("FTOF::hits","pathLength");
         tree->Branch("FTOF__hits_pathLength",&vec_FTOF__hits_pathLength);
      }
      if(dictionary->hasEntry("FTOF::hits","pathLengthThruBar")==true){
         FTOF__hits_pathLengthThruBar = reader.getBranch<float>     ("FTOF::hits","pathLengthThruBar");
         tree->Branch("FTOF__hits_pathLengthThruBar",&vec_FTOF__hits_pathLengthThruBar);
      }
      if(dictionary->hasEntry("FTOF::hits","sector")==true){
         FTOF__hits_sector = reader.getBranch<int8_t>    ("FTOF::hits","sector");
         tree->Branch("FTOF__hits_sector",&vec_FTOF__hits_sector);
      }
      if(dictionary->hasEntry("FTOF::hits","status")==true){
         FTOF__hits_status = reader.getBranch<int16_t>   ("FTOF::hits","status");
         tree->Branch("FTOF__hits_status",&vec_FTOF__hits_status);
      }
      if(dictionary->hasEntry("FTOF::hits","tdc_idx1")==true){
         FTOF__hits_tdc_idx1 = reader.getBranch<int16_t>   ("FTOF::hits","tdc_idx1");
         tree->Branch("FTOF__hits_tdc_idx1",&vec_FTOF__hits_tdc_idx1);
      }
      if(dictionary->hasEntry("FTOF::hits","tdc_idx2")==true){
         FTOF__hits_tdc_idx2 = reader.getBranch<int16_t>   ("FTOF::hits","tdc_idx2");
         tree->Branch("FTOF__hits_tdc_idx2",&vec_FTOF__hits_tdc_idx2);
      }
      if(dictionary->hasEntry("FTOF::hits","time")==true){
         FTOF__hits_time = reader.getBranch<float>     ("FTOF::hits","time");
         tree->Branch("FTOF__hits_time",&vec_FTOF__hits_time);
      }
      if(dictionary->hasEntry("FTOF::hits","time_unc")==true){
         FTOF__hits_time_unc = reader.getBranch<float>     ("FTOF::hits","time_unc");
         tree->Branch("FTOF__hits_time_unc",&vec_FTOF__hits_time_unc);
      }
      if(dictionary->hasEntry("FTOF::hits","trackid")==true){
         FTOF__hits_trackid = reader.getBranch<int16_t>   ("FTOF::hits","trackid");
         tree->Branch("FTOF__hits_trackid",&vec_FTOF__hits_trackid);
      }
      if(dictionary->hasEntry("FTOF::hits","tx")==true){
         FTOF__hits_tx = reader.getBranch<float>     ("FTOF::hits","tx");
         tree->Branch("FTOF__hits_tx",&vec_FTOF__hits_tx);
      }
      if(dictionary->hasEntry("FTOF::hits","ty")==true){
         FTOF__hits_ty = reader.getBranch<float>     ("FTOF::hits","ty");
         tree->Branch("FTOF__hits_ty",&vec_FTOF__hits_ty);
      }
      if(dictionary->hasEntry("FTOF::hits","tz")==true){
         FTOF__hits_tz = reader.getBranch<float>     ("FTOF::hits","tz");
         tree->Branch("FTOF__hits_tz",&vec_FTOF__hits_tz);
      }
      if(dictionary->hasEntry("FTOF::hits","x")==true){
         FTOF__hits_x = reader.getBranch<float>     ("FTOF::hits","x");
         tree->Branch("FTOF__hits_x",&vec_FTOF__hits_x);
      }
      if(dictionary->hasEntry("FTOF::hits","x_unc")==true){
         FTOF__hits_x_unc = reader.getBranch<float>     ("FTOF::hits","x_unc");
         tree->Branch("FTOF__hits_x_unc",&vec_FTOF__hits_x_unc);
      }
      if(dictionary->hasEntry("FTOF::hits","y")==true){
         FTOF__hits_y = reader.getBranch<float>     ("FTOF::hits","y");
         tree->Branch("FTOF__hits_y",&vec_FTOF__hits_y);
      }
      if(dictionary->hasEntry("FTOF::hits","y_unc")==true){
         FTOF__hits_y_unc = reader.getBranch<float>     ("FTOF::hits","y_unc");
         tree->Branch("FTOF__hits_y_unc",&vec_FTOF__hits_y_unc);
      }
      if(dictionary->hasEntry("FTOF::hits","z")==true){
         FTOF__hits_z = reader.getBranch<float>     ("FTOF::hits","z");
         tree->Branch("FTOF__hits_z",&vec_FTOF__hits_z);
      }
      if(dictionary->hasEntry("FTOF::hits","z_unc")==true){
         FTOF__hits_z_unc = reader.getBranch<float>     ("FTOF::hits","z_unc");
         tree->Branch("FTOF__hits_z_unc",&vec_FTOF__hits_z_unc);
      }
   }
   hipo::node<float>     *FTOF__matchedclusters_EmaxAlgo_1B_tCorr;
   std::vector<Float_t>   vec_FTOF__matchedclusters_EmaxAlgo_1B_tCorr;
   hipo::node<int16_t>   *FTOF__matchedclusters_clusSize_1A;
   std::vector<Short_t>   vec_FTOF__matchedclusters_clusSize_1A;
   hipo::node<int16_t>   *FTOF__matchedclusters_clusSize_1B;
   std::vector<Short_t>   vec_FTOF__matchedclusters_clusSize_1B;
   hipo::node<int16_t>   *FTOF__matchedclusters_clus_1Aid;
   std::vector<Short_t>   vec_FTOF__matchedclusters_clus_1Aid;
   hipo::node<int16_t>   *FTOF__matchedclusters_clus_1Bid;
   std::vector<Short_t>   vec_FTOF__matchedclusters_clus_1Bid;
   hipo::node<float>     *FTOF__matchedclusters_midbarAlgo_1B_tCorr;
   std::vector<Float_t>   vec_FTOF__matchedclusters_midbarAlgo_1B_tCorr;
   hipo::node<int16_t>   *FTOF__matchedclusters_paddle_id1A;
   std::vector<Short_t>   vec_FTOF__matchedclusters_paddle_id1A;
   hipo::node<int16_t>   *FTOF__matchedclusters_paddle_id1B;
   std::vector<Short_t>   vec_FTOF__matchedclusters_paddle_id1B;
   hipo::node<int8_t>    *FTOF__matchedclusters_sector;
   std::vector<Char_t>   vec_FTOF__matchedclusters_sector;
   hipo::node<float>     *FTOF__matchedclusters_tminAlgo_1B_tCorr;
   std::vector<Float_t>   vec_FTOF__matchedclusters_tminAlgo_1B_tCorr;
   if(dictionary->hasSchema("FTOF::matchedclusters")==true){
      if(dictionary->hasEntry("FTOF::matchedclusters","EmaxAlgo_1B_tCorr")==true){
         FTOF__matchedclusters_EmaxAlgo_1B_tCorr = reader.getBranch<float>     ("FTOF::matchedclusters","EmaxAlgo_1B_tCorr");
         tree->Branch("FTOF__matchedclusters_EmaxAlgo_1B_tCorr",&vec_FTOF__matchedclusters_EmaxAlgo_1B_tCorr);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","clusSize_1A")==true){
         FTOF__matchedclusters_clusSize_1A = reader.getBranch<int16_t>   ("FTOF::matchedclusters","clusSize_1A");
         tree->Branch("FTOF__matchedclusters_clusSize_1A",&vec_FTOF__matchedclusters_clusSize_1A);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","clusSize_1B")==true){
         FTOF__matchedclusters_clusSize_1B = reader.getBranch<int16_t>   ("FTOF::matchedclusters","clusSize_1B");
         tree->Branch("FTOF__matchedclusters_clusSize_1B",&vec_FTOF__matchedclusters_clusSize_1B);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","clus_1Aid")==true){
         FTOF__matchedclusters_clus_1Aid = reader.getBranch<int16_t>   ("FTOF::matchedclusters","clus_1Aid");
         tree->Branch("FTOF__matchedclusters_clus_1Aid",&vec_FTOF__matchedclusters_clus_1Aid);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","clus_1Bid")==true){
         FTOF__matchedclusters_clus_1Bid = reader.getBranch<int16_t>   ("FTOF::matchedclusters","clus_1Bid");
         tree->Branch("FTOF__matchedclusters_clus_1Bid",&vec_FTOF__matchedclusters_clus_1Bid);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","midbarAlgo_1B_tCorr")==true){
         FTOF__matchedclusters_midbarAlgo_1B_tCorr = reader.getBranch<float>     ("FTOF::matchedclusters","midbarAlgo_1B_tCorr");
         tree->Branch("FTOF__matchedclusters_midbarAlgo_1B_tCorr",&vec_FTOF__matchedclusters_midbarAlgo_1B_tCorr);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","paddle_id1A")==true){
         FTOF__matchedclusters_paddle_id1A = reader.getBranch<int16_t>   ("FTOF::matchedclusters","paddle_id1A");
         tree->Branch("FTOF__matchedclusters_paddle_id1A",&vec_FTOF__matchedclusters_paddle_id1A);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","paddle_id1B")==true){
         FTOF__matchedclusters_paddle_id1B = reader.getBranch<int16_t>   ("FTOF::matchedclusters","paddle_id1B");
         tree->Branch("FTOF__matchedclusters_paddle_id1B",&vec_FTOF__matchedclusters_paddle_id1B);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","sector")==true){
         FTOF__matchedclusters_sector = reader.getBranch<int8_t>    ("FTOF::matchedclusters","sector");
         tree->Branch("FTOF__matchedclusters_sector",&vec_FTOF__matchedclusters_sector);
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","tminAlgo_1B_tCorr")==true){
         FTOF__matchedclusters_tminAlgo_1B_tCorr = reader.getBranch<float>     ("FTOF::matchedclusters","tminAlgo_1B_tCorr");
         tree->Branch("FTOF__matchedclusters_tminAlgo_1B_tCorr",&vec_FTOF__matchedclusters_tminAlgo_1B_tCorr);
      }
   }
   hipo::node<int16_t>   *FTOF__rawhits_component;
   std::vector<Short_t>   vec_FTOF__rawhits_component;
   hipo::node<float>     *FTOF__rawhits_energy_left;
   std::vector<Float_t>   vec_FTOF__rawhits_energy_left;
   hipo::node<float>     *FTOF__rawhits_energy_left_unc;
   std::vector<Float_t>   vec_FTOF__rawhits_energy_left_unc;
   hipo::node<float>     *FTOF__rawhits_energy_right;
   std::vector<Float_t>   vec_FTOF__rawhits_energy_right;
   hipo::node<float>     *FTOF__rawhits_energy_right_unc;
   std::vector<Float_t>   vec_FTOF__rawhits_energy_right_unc;
   hipo::node<int16_t>   *FTOF__rawhits_id;
   std::vector<Short_t>   vec_FTOF__rawhits_id;
   hipo::node<int8_t>    *FTOF__rawhits_layer;
   std::vector<Char_t>   vec_FTOF__rawhits_layer;
   hipo::node<int8_t>    *FTOF__rawhits_sector;
   std::vector<Char_t>   vec_FTOF__rawhits_sector;
   hipo::node<int16_t>   *FTOF__rawhits_status;
   std::vector<Short_t>   vec_FTOF__rawhits_status;
   hipo::node<float>     *FTOF__rawhits_time_left;
   std::vector<Float_t>   vec_FTOF__rawhits_time_left;
   hipo::node<float>     *FTOF__rawhits_time_left_unc;
   std::vector<Float_t>   vec_FTOF__rawhits_time_left_unc;
   hipo::node<float>     *FTOF__rawhits_time_right;
   std::vector<Float_t>   vec_FTOF__rawhits_time_right;
   hipo::node<float>     *FTOF__rawhits_time_right_unc;
   std::vector<Float_t>   vec_FTOF__rawhits_time_right_unc;
   if(dictionary->hasSchema("FTOF::rawhits")==true){
      if(dictionary->hasEntry("FTOF::rawhits","component")==true){
         FTOF__rawhits_component = reader.getBranch<int16_t>   ("FTOF::rawhits","component");
         tree->Branch("FTOF__rawhits_component",&vec_FTOF__rawhits_component);
      }
      if(dictionary->hasEntry("FTOF::rawhits","energy_left")==true){
         FTOF__rawhits_energy_left = reader.getBranch<float>     ("FTOF::rawhits","energy_left");
         tree->Branch("FTOF__rawhits_energy_left",&vec_FTOF__rawhits_energy_left);
      }
      if(dictionary->hasEntry("FTOF::rawhits","energy_left_unc")==true){
         FTOF__rawhits_energy_left_unc = reader.getBranch<float>     ("FTOF::rawhits","energy_left_unc");
         tree->Branch("FTOF__rawhits_energy_left_unc",&vec_FTOF__rawhits_energy_left_unc);
      }
      if(dictionary->hasEntry("FTOF::rawhits","energy_right")==true){
         FTOF__rawhits_energy_right = reader.getBranch<float>     ("FTOF::rawhits","energy_right");
         tree->Branch("FTOF__rawhits_energy_right",&vec_FTOF__rawhits_energy_right);
      }
      if(dictionary->hasEntry("FTOF::rawhits","energy_right_unc")==true){
         FTOF__rawhits_energy_right_unc = reader.getBranch<float>     ("FTOF::rawhits","energy_right_unc");
         tree->Branch("FTOF__rawhits_energy_right_unc",&vec_FTOF__rawhits_energy_right_unc);
      }
      if(dictionary->hasEntry("FTOF::rawhits","id")==true){
         FTOF__rawhits_id = reader.getBranch<int16_t>   ("FTOF::rawhits","id");
         tree->Branch("FTOF__rawhits_id",&vec_FTOF__rawhits_id);
      }
      if(dictionary->hasEntry("FTOF::rawhits","layer")==true){
         FTOF__rawhits_layer = reader.getBranch<int8_t>    ("FTOF::rawhits","layer");
         tree->Branch("FTOF__rawhits_layer",&vec_FTOF__rawhits_layer);
      }
      if(dictionary->hasEntry("FTOF::rawhits","sector")==true){
         FTOF__rawhits_sector = reader.getBranch<int8_t>    ("FTOF::rawhits","sector");
         tree->Branch("FTOF__rawhits_sector",&vec_FTOF__rawhits_sector);
      }
      if(dictionary->hasEntry("FTOF::rawhits","status")==true){
         FTOF__rawhits_status = reader.getBranch<int16_t>   ("FTOF::rawhits","status");
         tree->Branch("FTOF__rawhits_status",&vec_FTOF__rawhits_status);
      }
      if(dictionary->hasEntry("FTOF::rawhits","time_left")==true){
         FTOF__rawhits_time_left = reader.getBranch<float>     ("FTOF::rawhits","time_left");
         tree->Branch("FTOF__rawhits_time_left",&vec_FTOF__rawhits_time_left);
      }
      if(dictionary->hasEntry("FTOF::rawhits","time_left_unc")==true){
         FTOF__rawhits_time_left_unc = reader.getBranch<float>     ("FTOF::rawhits","time_left_unc");
         tree->Branch("FTOF__rawhits_time_left_unc",&vec_FTOF__rawhits_time_left_unc);
      }
      if(dictionary->hasEntry("FTOF::rawhits","time_right")==true){
         FTOF__rawhits_time_right = reader.getBranch<float>     ("FTOF::rawhits","time_right");
         tree->Branch("FTOF__rawhits_time_right",&vec_FTOF__rawhits_time_right);
      }
      if(dictionary->hasEntry("FTOF::rawhits","time_right_unc")==true){
         FTOF__rawhits_time_right_unc = reader.getBranch<float>     ("FTOF::rawhits","time_right_unc");
         tree->Branch("FTOF__rawhits_time_right_unc",&vec_FTOF__rawhits_time_right_unc);
      }
   }
   hipo::node<int32_t>   *FTOF__tdc_TDC;
   std::vector<Int_t>   vec_FTOF__tdc_TDC;
   hipo::node<int16_t>   *FTOF__tdc_component;
   std::vector<Short_t>   vec_FTOF__tdc_component;
   hipo::node<int8_t>    *FTOF__tdc_layer;
   std::vector<Char_t>   vec_FTOF__tdc_layer;
   hipo::node<int8_t>    *FTOF__tdc_order;
   std::vector<Char_t>   vec_FTOF__tdc_order;
   hipo::node<int8_t>    *FTOF__tdc_sector;
   std::vector<Char_t>   vec_FTOF__tdc_sector;
   if(dictionary->hasSchema("FTOF::tdc")==true){
      if(dictionary->hasEntry("FTOF::tdc","TDC")==true){
         FTOF__tdc_TDC = reader.getBranch<int32_t>   ("FTOF::tdc","TDC");
         tree->Branch("FTOF__tdc_TDC",&vec_FTOF__tdc_TDC);
      }
      if(dictionary->hasEntry("FTOF::tdc","component")==true){
         FTOF__tdc_component = reader.getBranch<int16_t>   ("FTOF::tdc","component");
         tree->Branch("FTOF__tdc_component",&vec_FTOF__tdc_component);
      }
      if(dictionary->hasEntry("FTOF::tdc","layer")==true){
         FTOF__tdc_layer = reader.getBranch<int8_t>    ("FTOF::tdc","layer");
         tree->Branch("FTOF__tdc_layer",&vec_FTOF__tdc_layer);
      }
      if(dictionary->hasEntry("FTOF::tdc","order")==true){
         FTOF__tdc_order = reader.getBranch<int8_t>    ("FTOF::tdc","order");
         tree->Branch("FTOF__tdc_order",&vec_FTOF__tdc_order);
      }
      if(dictionary->hasEntry("FTOF::tdc","sector")==true){
         FTOF__tdc_sector = reader.getBranch<int8_t>    ("FTOF::tdc","sector");
         tree->Branch("FTOF__tdc_sector",&vec_FTOF__tdc_sector);
      }
   }
   hipo::node<int32_t>   *FTTRK__adc_ADC;
   std::vector<Int_t>   vec_FTTRK__adc_ADC;
   hipo::node<int16_t>   *FTTRK__adc_component;
   std::vector<Short_t>   vec_FTTRK__adc_component;
   hipo::node<int32_t>   *FTTRK__adc_integral;
   std::vector<Int_t>   vec_FTTRK__adc_integral;
   hipo::node<int8_t>    *FTTRK__adc_layer;
   std::vector<Char_t>   vec_FTTRK__adc_layer;
   hipo::node<int8_t>    *FTTRK__adc_order;
   std::vector<Char_t>   vec_FTTRK__adc_order;
   hipo::node<int16_t>   *FTTRK__adc_ped;
   std::vector<Short_t>   vec_FTTRK__adc_ped;
   hipo::node<int8_t>    *FTTRK__adc_sector;
   std::vector<Char_t>   vec_FTTRK__adc_sector;
   hipo::node<float>     *FTTRK__adc_time;
   std::vector<Float_t>   vec_FTTRK__adc_time;
   hipo::node<int64_t>   *FTTRK__adc_timestamp;
   std::vector<Long64_t>   vec_FTTRK__adc_timestamp;
   if(dictionary->hasSchema("FTTRK::adc")==true){
      if(dictionary->hasEntry("FTTRK::adc","ADC")==true){
         FTTRK__adc_ADC = reader.getBranch<int32_t>   ("FTTRK::adc","ADC");
         tree->Branch("FTTRK__adc_ADC",&vec_FTTRK__adc_ADC);
      }
      if(dictionary->hasEntry("FTTRK::adc","component")==true){
         FTTRK__adc_component = reader.getBranch<int16_t>   ("FTTRK::adc","component");
         tree->Branch("FTTRK__adc_component",&vec_FTTRK__adc_component);
      }
      if(dictionary->hasEntry("FTTRK::adc","integral")==true){
         FTTRK__adc_integral = reader.getBranch<int32_t>   ("FTTRK::adc","integral");
         tree->Branch("FTTRK__adc_integral",&vec_FTTRK__adc_integral);
      }
      if(dictionary->hasEntry("FTTRK::adc","layer")==true){
         FTTRK__adc_layer = reader.getBranch<int8_t>    ("FTTRK::adc","layer");
         tree->Branch("FTTRK__adc_layer",&vec_FTTRK__adc_layer);
      }
      if(dictionary->hasEntry("FTTRK::adc","order")==true){
         FTTRK__adc_order = reader.getBranch<int8_t>    ("FTTRK::adc","order");
         tree->Branch("FTTRK__adc_order",&vec_FTTRK__adc_order);
      }
      if(dictionary->hasEntry("FTTRK::adc","ped")==true){
         FTTRK__adc_ped = reader.getBranch<int16_t>   ("FTTRK::adc","ped");
         tree->Branch("FTTRK__adc_ped",&vec_FTTRK__adc_ped);
      }
      if(dictionary->hasEntry("FTTRK::adc","sector")==true){
         FTTRK__adc_sector = reader.getBranch<int8_t>    ("FTTRK::adc","sector");
         tree->Branch("FTTRK__adc_sector",&vec_FTTRK__adc_sector);
      }
      if(dictionary->hasEntry("FTTRK::adc","time")==true){
         FTTRK__adc_time = reader.getBranch<float>     ("FTTRK::adc","time");
         tree->Branch("FTTRK__adc_time",&vec_FTTRK__adc_time);
      }
      if(dictionary->hasEntry("FTTRK::adc","timestamp")==true){
         FTTRK__adc_timestamp = reader.getBranch<int64_t>   ("FTTRK::adc","timestamp");
         tree->Branch("FTTRK__adc_timestamp",&vec_FTTRK__adc_timestamp);
      }
   }
   hipo::node<float>     *HEADER__info_fc;
   std::vector<Float_t>   vec_HEADER__info_fc;
   hipo::node<float>     *HEADER__info_fcg;
   std::vector<Float_t>   vec_HEADER__info_fcg;
   hipo::node<int8_t>    *HEADER__info_helicity;
   std::vector<Char_t>   vec_HEADER__info_helicity;
   hipo::node<int32_t>   *HEADER__info_nevt;
   std::vector<Int_t>   vec_HEADER__info_nevt;
   hipo::node<int32_t>   *HEADER__info_nrun;
   std::vector<Int_t>   vec_HEADER__info_nrun;
   hipo::node<int16_t>   *HEADER__info_rastr1;
   std::vector<Short_t>   vec_HEADER__info_rastr1;
   hipo::node<int16_t>   *HEADER__info_rastr2;
   std::vector<Short_t>   vec_HEADER__info_rastr2;
   hipo::node<float>     *HEADER__info_stt;
   std::vector<Float_t>   vec_HEADER__info_stt;
   hipo::node<int32_t>   *HEADER__info_trigger;
   std::vector<Int_t>   vec_HEADER__info_trigger;
   if(dictionary->hasSchema("HEADER::info")==true){
      if(dictionary->hasEntry("HEADER::info","fc")==true){
         HEADER__info_fc = reader.getBranch<float>     ("HEADER::info","fc");
         tree->Branch("HEADER__info_fc",&vec_HEADER__info_fc);
      }
      if(dictionary->hasEntry("HEADER::info","fcg")==true){
         HEADER__info_fcg = reader.getBranch<float>     ("HEADER::info","fcg");
         tree->Branch("HEADER__info_fcg",&vec_HEADER__info_fcg);
      }
      if(dictionary->hasEntry("HEADER::info","helicity")==true){
         HEADER__info_helicity = reader.getBranch<int8_t>    ("HEADER::info","helicity");
         tree->Branch("HEADER__info_helicity",&vec_HEADER__info_helicity);
      }
      if(dictionary->hasEntry("HEADER::info","nevt")==true){
         HEADER__info_nevt = reader.getBranch<int32_t>   ("HEADER::info","nevt");
         tree->Branch("HEADER__info_nevt",&vec_HEADER__info_nevt);
      }
      if(dictionary->hasEntry("HEADER::info","nrun")==true){
         HEADER__info_nrun = reader.getBranch<int32_t>   ("HEADER::info","nrun");
         tree->Branch("HEADER__info_nrun",&vec_HEADER__info_nrun);
      }
      if(dictionary->hasEntry("HEADER::info","rastr1")==true){
         HEADER__info_rastr1 = reader.getBranch<int16_t>   ("HEADER::info","rastr1");
         tree->Branch("HEADER__info_rastr1",&vec_HEADER__info_rastr1);
      }
      if(dictionary->hasEntry("HEADER::info","rastr2")==true){
         HEADER__info_rastr2 = reader.getBranch<int16_t>   ("HEADER::info","rastr2");
         tree->Branch("HEADER__info_rastr2",&vec_HEADER__info_rastr2);
      }
      if(dictionary->hasEntry("HEADER::info","stt")==true){
         HEADER__info_stt = reader.getBranch<float>     ("HEADER::info","stt");
         tree->Branch("HEADER__info_stt",&vec_HEADER__info_stt);
      }
      if(dictionary->hasEntry("HEADER::info","trigger")==true){
         HEADER__info_trigger = reader.getBranch<int32_t>   ("HEADER::info","trigger");
         tree->Branch("HEADER__info_trigger",&vec_HEADER__info_trigger);
      }
   }
   hipo::node<int32_t>   *HEL__adc_ADC;
   std::vector<Int_t>   vec_HEL__adc_ADC;
   hipo::node<int16_t>   *HEL__adc_component;
   std::vector<Short_t>   vec_HEL__adc_component;
   hipo::node<int8_t>    *HEL__adc_layer;
   std::vector<Char_t>   vec_HEL__adc_layer;
   hipo::node<int8_t>    *HEL__adc_order;
   std::vector<Char_t>   vec_HEL__adc_order;
   hipo::node<int16_t>   *HEL__adc_ped;
   std::vector<Short_t>   vec_HEL__adc_ped;
   hipo::node<int8_t>    *HEL__adc_sector;
   std::vector<Char_t>   vec_HEL__adc_sector;
   hipo::node<float>     *HEL__adc_time;
   std::vector<Float_t>   vec_HEL__adc_time;
   if(dictionary->hasSchema("HEL::adc")==true){
      if(dictionary->hasEntry("HEL::adc","ADC")==true){
         HEL__adc_ADC = reader.getBranch<int32_t>   ("HEL::adc","ADC");
         tree->Branch("HEL__adc_ADC",&vec_HEL__adc_ADC);
      }
      if(dictionary->hasEntry("HEL::adc","component")==true){
         HEL__adc_component = reader.getBranch<int16_t>   ("HEL::adc","component");
         tree->Branch("HEL__adc_component",&vec_HEL__adc_component);
      }
      if(dictionary->hasEntry("HEL::adc","layer")==true){
         HEL__adc_layer = reader.getBranch<int8_t>    ("HEL::adc","layer");
         tree->Branch("HEL__adc_layer",&vec_HEL__adc_layer);
      }
      if(dictionary->hasEntry("HEL::adc","order")==true){
         HEL__adc_order = reader.getBranch<int8_t>    ("HEL::adc","order");
         tree->Branch("HEL__adc_order",&vec_HEL__adc_order);
      }
      if(dictionary->hasEntry("HEL::adc","ped")==true){
         HEL__adc_ped = reader.getBranch<int16_t>   ("HEL::adc","ped");
         tree->Branch("HEL__adc_ped",&vec_HEL__adc_ped);
      }
      if(dictionary->hasEntry("HEL::adc","sector")==true){
         HEL__adc_sector = reader.getBranch<int8_t>    ("HEL::adc","sector");
         tree->Branch("HEL__adc_sector",&vec_HEL__adc_sector);
      }
      if(dictionary->hasEntry("HEL::adc","time")==true){
         HEL__adc_time = reader.getBranch<float>     ("HEL::adc","time");
         tree->Branch("HEL__adc_time",&vec_HEL__adc_time);
      }
   }
   hipo::node<int32_t>   *HTCC__adc_ADC;
   std::vector<Int_t>   vec_HTCC__adc_ADC;
   hipo::node<int16_t>   *HTCC__adc_component;
   std::vector<Short_t>   vec_HTCC__adc_component;
   hipo::node<int8_t>    *HTCC__adc_layer;
   std::vector<Char_t>   vec_HTCC__adc_layer;
   hipo::node<int8_t>    *HTCC__adc_order;
   std::vector<Char_t>   vec_HTCC__adc_order;
   hipo::node<int16_t>   *HTCC__adc_ped;
   std::vector<Short_t>   vec_HTCC__adc_ped;
   hipo::node<int8_t>    *HTCC__adc_sector;
   std::vector<Char_t>   vec_HTCC__adc_sector;
   hipo::node<float>     *HTCC__adc_time;
   std::vector<Float_t>   vec_HTCC__adc_time;
   if(dictionary->hasSchema("HTCC::adc")==true){
      if(dictionary->hasEntry("HTCC::adc","ADC")==true){
         HTCC__adc_ADC = reader.getBranch<int32_t>   ("HTCC::adc","ADC");
         tree->Branch("HTCC__adc_ADC",&vec_HTCC__adc_ADC);
      }
      if(dictionary->hasEntry("HTCC::adc","component")==true){
         HTCC__adc_component = reader.getBranch<int16_t>   ("HTCC::adc","component");
         tree->Branch("HTCC__adc_component",&vec_HTCC__adc_component);
      }
      if(dictionary->hasEntry("HTCC::adc","layer")==true){
         HTCC__adc_layer = reader.getBranch<int8_t>    ("HTCC::adc","layer");
         tree->Branch("HTCC__adc_layer",&vec_HTCC__adc_layer);
      }
      if(dictionary->hasEntry("HTCC::adc","order")==true){
         HTCC__adc_order = reader.getBranch<int8_t>    ("HTCC::adc","order");
         tree->Branch("HTCC__adc_order",&vec_HTCC__adc_order);
      }
      if(dictionary->hasEntry("HTCC::adc","ped")==true){
         HTCC__adc_ped = reader.getBranch<int16_t>   ("HTCC::adc","ped");
         tree->Branch("HTCC__adc_ped",&vec_HTCC__adc_ped);
      }
      if(dictionary->hasEntry("HTCC::adc","sector")==true){
         HTCC__adc_sector = reader.getBranch<int8_t>    ("HTCC::adc","sector");
         tree->Branch("HTCC__adc_sector",&vec_HTCC__adc_sector);
      }
      if(dictionary->hasEntry("HTCC::adc","time")==true){
         HTCC__adc_time = reader.getBranch<float>     ("HTCC::adc","time");
         tree->Branch("HTCC__adc_time",&vec_HTCC__adc_time);
      }
   }
   hipo::node<float>     *HTCC__rec_dphi;
   std::vector<Float_t>   vec_HTCC__rec_dphi;
   hipo::node<float>     *HTCC__rec_dtheta;
   std::vector<Float_t>   vec_HTCC__rec_dtheta;
   hipo::node<int16_t>   *HTCC__rec_id;
   std::vector<Short_t>   vec_HTCC__rec_id;
   hipo::node<int16_t>   *HTCC__rec_maxphi;
   std::vector<Short_t>   vec_HTCC__rec_maxphi;
   hipo::node<int16_t>   *HTCC__rec_maxtheta;
   std::vector<Short_t>   vec_HTCC__rec_maxtheta;
   hipo::node<int16_t>   *HTCC__rec_minphi;
   std::vector<Short_t>   vec_HTCC__rec_minphi;
   hipo::node<int16_t>   *HTCC__rec_mintheta;
   std::vector<Short_t>   vec_HTCC__rec_mintheta;
   hipo::node<int16_t>   *HTCC__rec_nhits;
   std::vector<Short_t>   vec_HTCC__rec_nhits;
   hipo::node<float>     *HTCC__rec_nphe;
   std::vector<Float_t>   vec_HTCC__rec_nphe;
   hipo::node<int16_t>   *HTCC__rec_nphi;
   std::vector<Short_t>   vec_HTCC__rec_nphi;
   hipo::node<int16_t>   *HTCC__rec_ntheta;
   std::vector<Short_t>   vec_HTCC__rec_ntheta;
   hipo::node<float>     *HTCC__rec_phi;
   std::vector<Float_t>   vec_HTCC__rec_phi;
   hipo::node<float>     *HTCC__rec_theta;
   std::vector<Float_t>   vec_HTCC__rec_theta;
   hipo::node<float>     *HTCC__rec_time;
   std::vector<Float_t>   vec_HTCC__rec_time;
   hipo::node<float>     *HTCC__rec_x;
   std::vector<Float_t>   vec_HTCC__rec_x;
   hipo::node<float>     *HTCC__rec_y;
   std::vector<Float_t>   vec_HTCC__rec_y;
   hipo::node<float>     *HTCC__rec_z;
   std::vector<Float_t>   vec_HTCC__rec_z;
   if(dictionary->hasSchema("HTCC::rec")==true){
      if(dictionary->hasEntry("HTCC::rec","dphi")==true){
         HTCC__rec_dphi = reader.getBranch<float>     ("HTCC::rec","dphi");
         tree->Branch("HTCC__rec_dphi",&vec_HTCC__rec_dphi);
      }
      if(dictionary->hasEntry("HTCC::rec","dtheta")==true){
         HTCC__rec_dtheta = reader.getBranch<float>     ("HTCC::rec","dtheta");
         tree->Branch("HTCC__rec_dtheta",&vec_HTCC__rec_dtheta);
      }
      if(dictionary->hasEntry("HTCC::rec","id")==true){
         HTCC__rec_id = reader.getBranch<int16_t>   ("HTCC::rec","id");
         tree->Branch("HTCC__rec_id",&vec_HTCC__rec_id);
      }
      if(dictionary->hasEntry("HTCC::rec","maxphi")==true){
         HTCC__rec_maxphi = reader.getBranch<int16_t>   ("HTCC::rec","maxphi");
         tree->Branch("HTCC__rec_maxphi",&vec_HTCC__rec_maxphi);
      }
      if(dictionary->hasEntry("HTCC::rec","maxtheta")==true){
         HTCC__rec_maxtheta = reader.getBranch<int16_t>   ("HTCC::rec","maxtheta");
         tree->Branch("HTCC__rec_maxtheta",&vec_HTCC__rec_maxtheta);
      }
      if(dictionary->hasEntry("HTCC::rec","minphi")==true){
         HTCC__rec_minphi = reader.getBranch<int16_t>   ("HTCC::rec","minphi");
         tree->Branch("HTCC__rec_minphi",&vec_HTCC__rec_minphi);
      }
      if(dictionary->hasEntry("HTCC::rec","mintheta")==true){
         HTCC__rec_mintheta = reader.getBranch<int16_t>   ("HTCC::rec","mintheta");
         tree->Branch("HTCC__rec_mintheta",&vec_HTCC__rec_mintheta);
      }
      if(dictionary->hasEntry("HTCC::rec","nhits")==true){
         HTCC__rec_nhits = reader.getBranch<int16_t>   ("HTCC::rec","nhits");
         tree->Branch("HTCC__rec_nhits",&vec_HTCC__rec_nhits);
      }
      if(dictionary->hasEntry("HTCC::rec","nphe")==true){
         HTCC__rec_nphe = reader.getBranch<float>     ("HTCC::rec","nphe");
         tree->Branch("HTCC__rec_nphe",&vec_HTCC__rec_nphe);
      }
      if(dictionary->hasEntry("HTCC::rec","nphi")==true){
         HTCC__rec_nphi = reader.getBranch<int16_t>   ("HTCC::rec","nphi");
         tree->Branch("HTCC__rec_nphi",&vec_HTCC__rec_nphi);
      }
      if(dictionary->hasEntry("HTCC::rec","ntheta")==true){
         HTCC__rec_ntheta = reader.getBranch<int16_t>   ("HTCC::rec","ntheta");
         tree->Branch("HTCC__rec_ntheta",&vec_HTCC__rec_ntheta);
      }
      if(dictionary->hasEntry("HTCC::rec","phi")==true){
         HTCC__rec_phi = reader.getBranch<float>     ("HTCC::rec","phi");
         tree->Branch("HTCC__rec_phi",&vec_HTCC__rec_phi);
      }
      if(dictionary->hasEntry("HTCC::rec","theta")==true){
         HTCC__rec_theta = reader.getBranch<float>     ("HTCC::rec","theta");
         tree->Branch("HTCC__rec_theta",&vec_HTCC__rec_theta);
      }
      if(dictionary->hasEntry("HTCC::rec","time")==true){
         HTCC__rec_time = reader.getBranch<float>     ("HTCC::rec","time");
         tree->Branch("HTCC__rec_time",&vec_HTCC__rec_time);
      }
      if(dictionary->hasEntry("HTCC::rec","x")==true){
         HTCC__rec_x = reader.getBranch<float>     ("HTCC::rec","x");
         tree->Branch("HTCC__rec_x",&vec_HTCC__rec_x);
      }
      if(dictionary->hasEntry("HTCC::rec","y")==true){
         HTCC__rec_y = reader.getBranch<float>     ("HTCC::rec","y");
         tree->Branch("HTCC__rec_y",&vec_HTCC__rec_y);
      }
      if(dictionary->hasEntry("HTCC::rec","z")==true){
         HTCC__rec_z = reader.getBranch<float>     ("HTCC::rec","z");
         tree->Branch("HTCC__rec_z",&vec_HTCC__rec_z);
      }
   }
   hipo::node<int32_t>   *HTCC__tdc_TDC;
   std::vector<Int_t>   vec_HTCC__tdc_TDC;
   hipo::node<int16_t>   *HTCC__tdc_component;
   std::vector<Short_t>   vec_HTCC__tdc_component;
   hipo::node<int8_t>    *HTCC__tdc_layer;
   std::vector<Char_t>   vec_HTCC__tdc_layer;
   hipo::node<int8_t>    *HTCC__tdc_order;
   std::vector<Char_t>   vec_HTCC__tdc_order;
   hipo::node<int8_t>    *HTCC__tdc_sector;
   std::vector<Char_t>   vec_HTCC__tdc_sector;
   if(dictionary->hasSchema("HTCC::tdc")==true){
      if(dictionary->hasEntry("HTCC::tdc","TDC")==true){
         HTCC__tdc_TDC = reader.getBranch<int32_t>   ("HTCC::tdc","TDC");
         tree->Branch("HTCC__tdc_TDC",&vec_HTCC__tdc_TDC);
      }
      if(dictionary->hasEntry("HTCC::tdc","component")==true){
         HTCC__tdc_component = reader.getBranch<int16_t>   ("HTCC::tdc","component");
         tree->Branch("HTCC__tdc_component",&vec_HTCC__tdc_component);
      }
      if(dictionary->hasEntry("HTCC::tdc","layer")==true){
         HTCC__tdc_layer = reader.getBranch<int8_t>    ("HTCC::tdc","layer");
         tree->Branch("HTCC__tdc_layer",&vec_HTCC__tdc_layer);
      }
      if(dictionary->hasEntry("HTCC::tdc","order")==true){
         HTCC__tdc_order = reader.getBranch<int8_t>    ("HTCC::tdc","order");
         tree->Branch("HTCC__tdc_order",&vec_HTCC__tdc_order);
      }
      if(dictionary->hasEntry("HTCC::tdc","sector")==true){
         HTCC__tdc_sector = reader.getBranch<int8_t>    ("HTCC::tdc","sector");
         tree->Branch("HTCC__tdc_sector",&vec_HTCC__tdc_sector);
      }
   }
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit10_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit10_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit11_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit11_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit12_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit12_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit1_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit1_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit2_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit2_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit3_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit3_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit4_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit4_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit5_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit5_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit6_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit6_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit7_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit7_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit8_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit8_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_Hit9_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_Hit9_ID;
   hipo::node<float>     *HitBasedTrkg__HBClusters_avgWire;
   std::vector<Float_t>   vec_HitBasedTrkg__HBClusters_avgWire;
   hipo::node<float>     *HitBasedTrkg__HBClusters_fitChisqProb;
   std::vector<Float_t>   vec_HitBasedTrkg__HBClusters_fitChisqProb;
   hipo::node<float>     *HitBasedTrkg__HBClusters_fitInterc;
   std::vector<Float_t>   vec_HitBasedTrkg__HBClusters_fitInterc;
   hipo::node<float>     *HitBasedTrkg__HBClusters_fitIntercErr;
   std::vector<Float_t>   vec_HitBasedTrkg__HBClusters_fitIntercErr;
   hipo::node<float>     *HitBasedTrkg__HBClusters_fitSlope;
   std::vector<Float_t>   vec_HitBasedTrkg__HBClusters_fitSlope;
   hipo::node<float>     *HitBasedTrkg__HBClusters_fitSlopeErr;
   std::vector<Float_t>   vec_HitBasedTrkg__HBClusters_fitSlopeErr;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_id;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_id;
   hipo::node<int8_t>    *HitBasedTrkg__HBClusters_sector;
   std::vector<Char_t>   vec_HitBasedTrkg__HBClusters_sector;
   hipo::node<int8_t>    *HitBasedTrkg__HBClusters_size;
   std::vector<Char_t>   vec_HitBasedTrkg__HBClusters_size;
   hipo::node<int16_t>   *HitBasedTrkg__HBClusters_status;
   std::vector<Short_t>   vec_HitBasedTrkg__HBClusters_status;
   hipo::node<int8_t>    *HitBasedTrkg__HBClusters_superlayer;
   std::vector<Char_t>   vec_HitBasedTrkg__HBClusters_superlayer;
   if(dictionary->hasSchema("HitBasedTrkg::HBClusters")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit10_ID")==true){
         HitBasedTrkg__HBClusters_Hit10_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit10_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit10_ID",&vec_HitBasedTrkg__HBClusters_Hit10_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit11_ID")==true){
         HitBasedTrkg__HBClusters_Hit11_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit11_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit11_ID",&vec_HitBasedTrkg__HBClusters_Hit11_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit12_ID")==true){
         HitBasedTrkg__HBClusters_Hit12_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit12_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit12_ID",&vec_HitBasedTrkg__HBClusters_Hit12_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit1_ID")==true){
         HitBasedTrkg__HBClusters_Hit1_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit1_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit1_ID",&vec_HitBasedTrkg__HBClusters_Hit1_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit2_ID")==true){
         HitBasedTrkg__HBClusters_Hit2_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit2_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit2_ID",&vec_HitBasedTrkg__HBClusters_Hit2_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit3_ID")==true){
         HitBasedTrkg__HBClusters_Hit3_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit3_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit3_ID",&vec_HitBasedTrkg__HBClusters_Hit3_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit4_ID")==true){
         HitBasedTrkg__HBClusters_Hit4_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit4_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit4_ID",&vec_HitBasedTrkg__HBClusters_Hit4_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit5_ID")==true){
         HitBasedTrkg__HBClusters_Hit5_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit5_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit5_ID",&vec_HitBasedTrkg__HBClusters_Hit5_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit6_ID")==true){
         HitBasedTrkg__HBClusters_Hit6_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit6_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit6_ID",&vec_HitBasedTrkg__HBClusters_Hit6_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit7_ID")==true){
         HitBasedTrkg__HBClusters_Hit7_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit7_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit7_ID",&vec_HitBasedTrkg__HBClusters_Hit7_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit8_ID")==true){
         HitBasedTrkg__HBClusters_Hit8_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit8_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit8_ID",&vec_HitBasedTrkg__HBClusters_Hit8_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit9_ID")==true){
         HitBasedTrkg__HBClusters_Hit9_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit9_ID");
         tree->Branch("HitBasedTrkg__HBClusters_Hit9_ID",&vec_HitBasedTrkg__HBClusters_Hit9_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","avgWire")==true){
         HitBasedTrkg__HBClusters_avgWire = reader.getBranch<float>     ("HitBasedTrkg::HBClusters","avgWire");
         tree->Branch("HitBasedTrkg__HBClusters_avgWire",&vec_HitBasedTrkg__HBClusters_avgWire);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitChisqProb")==true){
         HitBasedTrkg__HBClusters_fitChisqProb = reader.getBranch<float>     ("HitBasedTrkg::HBClusters","fitChisqProb");
         tree->Branch("HitBasedTrkg__HBClusters_fitChisqProb",&vec_HitBasedTrkg__HBClusters_fitChisqProb);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitInterc")==true){
         HitBasedTrkg__HBClusters_fitInterc = reader.getBranch<float>     ("HitBasedTrkg::HBClusters","fitInterc");
         tree->Branch("HitBasedTrkg__HBClusters_fitInterc",&vec_HitBasedTrkg__HBClusters_fitInterc);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitIntercErr")==true){
         HitBasedTrkg__HBClusters_fitIntercErr = reader.getBranch<float>     ("HitBasedTrkg::HBClusters","fitIntercErr");
         tree->Branch("HitBasedTrkg__HBClusters_fitIntercErr",&vec_HitBasedTrkg__HBClusters_fitIntercErr);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitSlope")==true){
         HitBasedTrkg__HBClusters_fitSlope = reader.getBranch<float>     ("HitBasedTrkg::HBClusters","fitSlope");
         tree->Branch("HitBasedTrkg__HBClusters_fitSlope",&vec_HitBasedTrkg__HBClusters_fitSlope);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitSlopeErr")==true){
         HitBasedTrkg__HBClusters_fitSlopeErr = reader.getBranch<float>     ("HitBasedTrkg::HBClusters","fitSlopeErr");
         tree->Branch("HitBasedTrkg__HBClusters_fitSlopeErr",&vec_HitBasedTrkg__HBClusters_fitSlopeErr);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","id")==true){
         HitBasedTrkg__HBClusters_id = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","id");
         tree->Branch("HitBasedTrkg__HBClusters_id",&vec_HitBasedTrkg__HBClusters_id);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","sector")==true){
         HitBasedTrkg__HBClusters_sector = reader.getBranch<int8_t>    ("HitBasedTrkg::HBClusters","sector");
         tree->Branch("HitBasedTrkg__HBClusters_sector",&vec_HitBasedTrkg__HBClusters_sector);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","size")==true){
         HitBasedTrkg__HBClusters_size = reader.getBranch<int8_t>    ("HitBasedTrkg::HBClusters","size");
         tree->Branch("HitBasedTrkg__HBClusters_size",&vec_HitBasedTrkg__HBClusters_size);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","status")==true){
         HitBasedTrkg__HBClusters_status = reader.getBranch<int16_t>   ("HitBasedTrkg::HBClusters","status");
         tree->Branch("HitBasedTrkg__HBClusters_status",&vec_HitBasedTrkg__HBClusters_status);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","superlayer")==true){
         HitBasedTrkg__HBClusters_superlayer = reader.getBranch<int8_t>    ("HitBasedTrkg::HBClusters","superlayer");
         tree->Branch("HitBasedTrkg__HBClusters_superlayer",&vec_HitBasedTrkg__HBClusters_superlayer);
      }
   }
   hipo::node<int16_t>   *HitBasedTrkg__HBCrosses_Segment1_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBCrosses_Segment1_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBCrosses_Segment2_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBCrosses_Segment2_ID;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_err_ux;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_err_ux;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_err_uy;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_err_uy;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_err_uz;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_err_uz;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_err_x;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_err_x;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_err_y;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_err_y;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_err_z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_err_z;
   hipo::node<int16_t>   *HitBasedTrkg__HBCrosses_id;
   std::vector<Short_t>   vec_HitBasedTrkg__HBCrosses_id;
   hipo::node<int8_t>    *HitBasedTrkg__HBCrosses_region;
   std::vector<Char_t>   vec_HitBasedTrkg__HBCrosses_region;
   hipo::node<int8_t>    *HitBasedTrkg__HBCrosses_sector;
   std::vector<Char_t>   vec_HitBasedTrkg__HBCrosses_sector;
   hipo::node<int16_t>   *HitBasedTrkg__HBCrosses_status;
   std::vector<Short_t>   vec_HitBasedTrkg__HBCrosses_status;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_ux;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_ux;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_uy;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_uy;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_uz;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_uz;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_x;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_x;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_y;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_y;
   hipo::node<float>     *HitBasedTrkg__HBCrosses_z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBCrosses_z;
   if(dictionary->hasSchema("HitBasedTrkg::HBCrosses")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","Segment1_ID")==true){
         HitBasedTrkg__HBCrosses_Segment1_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBCrosses","Segment1_ID");
         tree->Branch("HitBasedTrkg__HBCrosses_Segment1_ID",&vec_HitBasedTrkg__HBCrosses_Segment1_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","Segment2_ID")==true){
         HitBasedTrkg__HBCrosses_Segment2_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBCrosses","Segment2_ID");
         tree->Branch("HitBasedTrkg__HBCrosses_Segment2_ID",&vec_HitBasedTrkg__HBCrosses_Segment2_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_ux")==true){
         HitBasedTrkg__HBCrosses_err_ux = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","err_ux");
         tree->Branch("HitBasedTrkg__HBCrosses_err_ux",&vec_HitBasedTrkg__HBCrosses_err_ux);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_uy")==true){
         HitBasedTrkg__HBCrosses_err_uy = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","err_uy");
         tree->Branch("HitBasedTrkg__HBCrosses_err_uy",&vec_HitBasedTrkg__HBCrosses_err_uy);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_uz")==true){
         HitBasedTrkg__HBCrosses_err_uz = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","err_uz");
         tree->Branch("HitBasedTrkg__HBCrosses_err_uz",&vec_HitBasedTrkg__HBCrosses_err_uz);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_x")==true){
         HitBasedTrkg__HBCrosses_err_x = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","err_x");
         tree->Branch("HitBasedTrkg__HBCrosses_err_x",&vec_HitBasedTrkg__HBCrosses_err_x);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_y")==true){
         HitBasedTrkg__HBCrosses_err_y = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","err_y");
         tree->Branch("HitBasedTrkg__HBCrosses_err_y",&vec_HitBasedTrkg__HBCrosses_err_y);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_z")==true){
         HitBasedTrkg__HBCrosses_err_z = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","err_z");
         tree->Branch("HitBasedTrkg__HBCrosses_err_z",&vec_HitBasedTrkg__HBCrosses_err_z);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","id")==true){
         HitBasedTrkg__HBCrosses_id = reader.getBranch<int16_t>   ("HitBasedTrkg::HBCrosses","id");
         tree->Branch("HitBasedTrkg__HBCrosses_id",&vec_HitBasedTrkg__HBCrosses_id);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","region")==true){
         HitBasedTrkg__HBCrosses_region = reader.getBranch<int8_t>    ("HitBasedTrkg::HBCrosses","region");
         tree->Branch("HitBasedTrkg__HBCrosses_region",&vec_HitBasedTrkg__HBCrosses_region);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","sector")==true){
         HitBasedTrkg__HBCrosses_sector = reader.getBranch<int8_t>    ("HitBasedTrkg::HBCrosses","sector");
         tree->Branch("HitBasedTrkg__HBCrosses_sector",&vec_HitBasedTrkg__HBCrosses_sector);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","status")==true){
         HitBasedTrkg__HBCrosses_status = reader.getBranch<int16_t>   ("HitBasedTrkg::HBCrosses","status");
         tree->Branch("HitBasedTrkg__HBCrosses_status",&vec_HitBasedTrkg__HBCrosses_status);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","ux")==true){
         HitBasedTrkg__HBCrosses_ux = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","ux");
         tree->Branch("HitBasedTrkg__HBCrosses_ux",&vec_HitBasedTrkg__HBCrosses_ux);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","uy")==true){
         HitBasedTrkg__HBCrosses_uy = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","uy");
         tree->Branch("HitBasedTrkg__HBCrosses_uy",&vec_HitBasedTrkg__HBCrosses_uy);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","uz")==true){
         HitBasedTrkg__HBCrosses_uz = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","uz");
         tree->Branch("HitBasedTrkg__HBCrosses_uz",&vec_HitBasedTrkg__HBCrosses_uz);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","x")==true){
         HitBasedTrkg__HBCrosses_x = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","x");
         tree->Branch("HitBasedTrkg__HBCrosses_x",&vec_HitBasedTrkg__HBCrosses_x);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","y")==true){
         HitBasedTrkg__HBCrosses_y = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","y");
         tree->Branch("HitBasedTrkg__HBCrosses_y",&vec_HitBasedTrkg__HBCrosses_y);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","z")==true){
         HitBasedTrkg__HBCrosses_z = reader.getBranch<float>     ("HitBasedTrkg::HBCrosses","z");
         tree->Branch("HitBasedTrkg__HBCrosses_z",&vec_HitBasedTrkg__HBCrosses_z);
      }
   }
   hipo::node<float>     *HitBasedTrkg__HBHits_B;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_B;
   hipo::node<int8_t>    *HitBasedTrkg__HBHits_LR;
   std::vector<Char_t>   vec_HitBasedTrkg__HBHits_LR;
   hipo::node<float>     *HitBasedTrkg__HBHits_LocX;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_LocX;
   hipo::node<float>     *HitBasedTrkg__HBHits_LocY;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_LocY;
   hipo::node<int32_t>   *HitBasedTrkg__HBHits_TDC;
   std::vector<Int_t>   vec_HitBasedTrkg__HBHits_TDC;
   hipo::node<float>     *HitBasedTrkg__HBHits_TFlight;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_TFlight;
   hipo::node<float>     *HitBasedTrkg__HBHits_TProp;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_TProp;
   hipo::node<float>     *HitBasedTrkg__HBHits_X;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_X;
   hipo::node<float>     *HitBasedTrkg__HBHits_Z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_Z;
   hipo::node<int16_t>   *HitBasedTrkg__HBHits_clusterID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBHits_clusterID;
   hipo::node<float>     *HitBasedTrkg__HBHits_docaError;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_docaError;
   hipo::node<int16_t>   *HitBasedTrkg__HBHits_id;
   std::vector<Short_t>   vec_HitBasedTrkg__HBHits_id;
   hipo::node<int8_t>    *HitBasedTrkg__HBHits_layer;
   std::vector<Char_t>   vec_HitBasedTrkg__HBHits_layer;
   hipo::node<int8_t>    *HitBasedTrkg__HBHits_sector;
   std::vector<Char_t>   vec_HitBasedTrkg__HBHits_sector;
   hipo::node<int16_t>   *HitBasedTrkg__HBHits_status;
   std::vector<Short_t>   vec_HitBasedTrkg__HBHits_status;
   hipo::node<int8_t>    *HitBasedTrkg__HBHits_superlayer;
   std::vector<Char_t>   vec_HitBasedTrkg__HBHits_superlayer;
   hipo::node<float>     *HitBasedTrkg__HBHits_trkDoca;
   std::vector<Float_t>   vec_HitBasedTrkg__HBHits_trkDoca;
   hipo::node<int8_t>    *HitBasedTrkg__HBHits_trkID;
   std::vector<Char_t>   vec_HitBasedTrkg__HBHits_trkID;
   hipo::node<int16_t>   *HitBasedTrkg__HBHits_wire;
   std::vector<Short_t>   vec_HitBasedTrkg__HBHits_wire;
   if(dictionary->hasSchema("HitBasedTrkg::HBHits")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","B")==true){
         HitBasedTrkg__HBHits_B = reader.getBranch<float>     ("HitBasedTrkg::HBHits","B");
         tree->Branch("HitBasedTrkg__HBHits_B",&vec_HitBasedTrkg__HBHits_B);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","LR")==true){
         HitBasedTrkg__HBHits_LR = reader.getBranch<int8_t>    ("HitBasedTrkg::HBHits","LR");
         tree->Branch("HitBasedTrkg__HBHits_LR",&vec_HitBasedTrkg__HBHits_LR);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","LocX")==true){
         HitBasedTrkg__HBHits_LocX = reader.getBranch<float>     ("HitBasedTrkg::HBHits","LocX");
         tree->Branch("HitBasedTrkg__HBHits_LocX",&vec_HitBasedTrkg__HBHits_LocX);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","LocY")==true){
         HitBasedTrkg__HBHits_LocY = reader.getBranch<float>     ("HitBasedTrkg::HBHits","LocY");
         tree->Branch("HitBasedTrkg__HBHits_LocY",&vec_HitBasedTrkg__HBHits_LocY);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","TDC")==true){
         HitBasedTrkg__HBHits_TDC = reader.getBranch<int32_t>   ("HitBasedTrkg::HBHits","TDC");
         tree->Branch("HitBasedTrkg__HBHits_TDC",&vec_HitBasedTrkg__HBHits_TDC);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","TFlight")==true){
         HitBasedTrkg__HBHits_TFlight = reader.getBranch<float>     ("HitBasedTrkg::HBHits","TFlight");
         tree->Branch("HitBasedTrkg__HBHits_TFlight",&vec_HitBasedTrkg__HBHits_TFlight);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","TProp")==true){
         HitBasedTrkg__HBHits_TProp = reader.getBranch<float>     ("HitBasedTrkg::HBHits","TProp");
         tree->Branch("HitBasedTrkg__HBHits_TProp",&vec_HitBasedTrkg__HBHits_TProp);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","X")==true){
         HitBasedTrkg__HBHits_X = reader.getBranch<float>     ("HitBasedTrkg::HBHits","X");
         tree->Branch("HitBasedTrkg__HBHits_X",&vec_HitBasedTrkg__HBHits_X);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","Z")==true){
         HitBasedTrkg__HBHits_Z = reader.getBranch<float>     ("HitBasedTrkg::HBHits","Z");
         tree->Branch("HitBasedTrkg__HBHits_Z",&vec_HitBasedTrkg__HBHits_Z);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","clusterID")==true){
         HitBasedTrkg__HBHits_clusterID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBHits","clusterID");
         tree->Branch("HitBasedTrkg__HBHits_clusterID",&vec_HitBasedTrkg__HBHits_clusterID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","docaError")==true){
         HitBasedTrkg__HBHits_docaError = reader.getBranch<float>     ("HitBasedTrkg::HBHits","docaError");
         tree->Branch("HitBasedTrkg__HBHits_docaError",&vec_HitBasedTrkg__HBHits_docaError);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","id")==true){
         HitBasedTrkg__HBHits_id = reader.getBranch<int16_t>   ("HitBasedTrkg::HBHits","id");
         tree->Branch("HitBasedTrkg__HBHits_id",&vec_HitBasedTrkg__HBHits_id);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","layer")==true){
         HitBasedTrkg__HBHits_layer = reader.getBranch<int8_t>    ("HitBasedTrkg::HBHits","layer");
         tree->Branch("HitBasedTrkg__HBHits_layer",&vec_HitBasedTrkg__HBHits_layer);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","sector")==true){
         HitBasedTrkg__HBHits_sector = reader.getBranch<int8_t>    ("HitBasedTrkg::HBHits","sector");
         tree->Branch("HitBasedTrkg__HBHits_sector",&vec_HitBasedTrkg__HBHits_sector);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","status")==true){
         HitBasedTrkg__HBHits_status = reader.getBranch<int16_t>   ("HitBasedTrkg::HBHits","status");
         tree->Branch("HitBasedTrkg__HBHits_status",&vec_HitBasedTrkg__HBHits_status);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","superlayer")==true){
         HitBasedTrkg__HBHits_superlayer = reader.getBranch<int8_t>    ("HitBasedTrkg::HBHits","superlayer");
         tree->Branch("HitBasedTrkg__HBHits_superlayer",&vec_HitBasedTrkg__HBHits_superlayer);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","trkDoca")==true){
         HitBasedTrkg__HBHits_trkDoca = reader.getBranch<float>     ("HitBasedTrkg::HBHits","trkDoca");
         tree->Branch("HitBasedTrkg__HBHits_trkDoca",&vec_HitBasedTrkg__HBHits_trkDoca);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","trkID")==true){
         HitBasedTrkg__HBHits_trkID = reader.getBranch<int8_t>    ("HitBasedTrkg::HBHits","trkID");
         tree->Branch("HitBasedTrkg__HBHits_trkID",&vec_HitBasedTrkg__HBHits_trkID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","wire")==true){
         HitBasedTrkg__HBHits_wire = reader.getBranch<int16_t>   ("HitBasedTrkg::HBHits","wire");
         tree->Branch("HitBasedTrkg__HBHits_wire",&vec_HitBasedTrkg__HBHits_wire);
      }
   }
   hipo::node<int8_t>    *HitBasedTrkg__HBSegmentTrajectory_layer;
   std::vector<Char_t>   vec_HitBasedTrkg__HBSegmentTrajectory_layer;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegmentTrajectory_matchedHitID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegmentTrajectory_matchedHitID;
   hipo::node<int8_t>    *HitBasedTrkg__HBSegmentTrajectory_sector;
   std::vector<Char_t>   vec_HitBasedTrkg__HBSegmentTrajectory_sector;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegmentTrajectory_segmentID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegmentTrajectory_segmentID;
   hipo::node<int8_t>    *HitBasedTrkg__HBSegmentTrajectory_superlayer;
   std::vector<Char_t>   vec_HitBasedTrkg__HBSegmentTrajectory_superlayer;
   hipo::node<float>     *HitBasedTrkg__HBSegmentTrajectory_trkDoca;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegmentTrajectory_trkDoca;
   if(dictionary->hasSchema("HitBasedTrkg::HBSegmentTrajectory")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","layer")==true){
         HitBasedTrkg__HBSegmentTrajectory_layer = reader.getBranch<int8_t>    ("HitBasedTrkg::HBSegmentTrajectory","layer");
         tree->Branch("HitBasedTrkg__HBSegmentTrajectory_layer",&vec_HitBasedTrkg__HBSegmentTrajectory_layer);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","matchedHitID")==true){
         HitBasedTrkg__HBSegmentTrajectory_matchedHitID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegmentTrajectory","matchedHitID");
         tree->Branch("HitBasedTrkg__HBSegmentTrajectory_matchedHitID",&vec_HitBasedTrkg__HBSegmentTrajectory_matchedHitID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","sector")==true){
         HitBasedTrkg__HBSegmentTrajectory_sector = reader.getBranch<int8_t>    ("HitBasedTrkg::HBSegmentTrajectory","sector");
         tree->Branch("HitBasedTrkg__HBSegmentTrajectory_sector",&vec_HitBasedTrkg__HBSegmentTrajectory_sector);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","segmentID")==true){
         HitBasedTrkg__HBSegmentTrajectory_segmentID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegmentTrajectory","segmentID");
         tree->Branch("HitBasedTrkg__HBSegmentTrajectory_segmentID",&vec_HitBasedTrkg__HBSegmentTrajectory_segmentID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","superlayer")==true){
         HitBasedTrkg__HBSegmentTrajectory_superlayer = reader.getBranch<int8_t>    ("HitBasedTrkg::HBSegmentTrajectory","superlayer");
         tree->Branch("HitBasedTrkg__HBSegmentTrajectory_superlayer",&vec_HitBasedTrkg__HBSegmentTrajectory_superlayer);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","trkDoca")==true){
         HitBasedTrkg__HBSegmentTrajectory_trkDoca = reader.getBranch<float>     ("HitBasedTrkg::HBSegmentTrajectory","trkDoca");
         tree->Branch("HitBasedTrkg__HBSegmentTrajectory_trkDoca",&vec_HitBasedTrkg__HBSegmentTrajectory_trkDoca);
      }
   }
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Cluster_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Cluster_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit10_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit10_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit11_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit11_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit12_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit12_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit1_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit1_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit2_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit2_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit3_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit3_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit4_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit4_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit5_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit5_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit6_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit6_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit7_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit7_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit8_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit8_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_Hit9_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_Hit9_ID;
   hipo::node<float>     *HitBasedTrkg__HBSegments_SegEndPoint1X;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_SegEndPoint1X;
   hipo::node<float>     *HitBasedTrkg__HBSegments_SegEndPoint1Z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_SegEndPoint1Z;
   hipo::node<float>     *HitBasedTrkg__HBSegments_SegEndPoint2X;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_SegEndPoint2X;
   hipo::node<float>     *HitBasedTrkg__HBSegments_SegEndPoint2Z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_SegEndPoint2Z;
   hipo::node<float>     *HitBasedTrkg__HBSegments_avgWire;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_avgWire;
   hipo::node<float>     *HitBasedTrkg__HBSegments_fitChisqProb;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_fitChisqProb;
   hipo::node<float>     *HitBasedTrkg__HBSegments_fitInterc;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_fitInterc;
   hipo::node<float>     *HitBasedTrkg__HBSegments_fitIntercErr;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_fitIntercErr;
   hipo::node<float>     *HitBasedTrkg__HBSegments_fitSlope;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_fitSlope;
   hipo::node<float>     *HitBasedTrkg__HBSegments_fitSlopeErr;
   std::vector<Float_t>   vec_HitBasedTrkg__HBSegments_fitSlopeErr;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_id;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_id;
   hipo::node<int8_t>    *HitBasedTrkg__HBSegments_sector;
   std::vector<Char_t>   vec_HitBasedTrkg__HBSegments_sector;
   hipo::node<int8_t>    *HitBasedTrkg__HBSegments_size;
   std::vector<Char_t>   vec_HitBasedTrkg__HBSegments_size;
   hipo::node<int16_t>   *HitBasedTrkg__HBSegments_status;
   std::vector<Short_t>   vec_HitBasedTrkg__HBSegments_status;
   hipo::node<int8_t>    *HitBasedTrkg__HBSegments_superlayer;
   std::vector<Char_t>   vec_HitBasedTrkg__HBSegments_superlayer;
   if(dictionary->hasSchema("HitBasedTrkg::HBSegments")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Cluster_ID")==true){
         HitBasedTrkg__HBSegments_Cluster_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Cluster_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Cluster_ID",&vec_HitBasedTrkg__HBSegments_Cluster_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit10_ID")==true){
         HitBasedTrkg__HBSegments_Hit10_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit10_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit10_ID",&vec_HitBasedTrkg__HBSegments_Hit10_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit11_ID")==true){
         HitBasedTrkg__HBSegments_Hit11_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit11_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit11_ID",&vec_HitBasedTrkg__HBSegments_Hit11_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit12_ID")==true){
         HitBasedTrkg__HBSegments_Hit12_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit12_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit12_ID",&vec_HitBasedTrkg__HBSegments_Hit12_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit1_ID")==true){
         HitBasedTrkg__HBSegments_Hit1_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit1_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit1_ID",&vec_HitBasedTrkg__HBSegments_Hit1_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit2_ID")==true){
         HitBasedTrkg__HBSegments_Hit2_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit2_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit2_ID",&vec_HitBasedTrkg__HBSegments_Hit2_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit3_ID")==true){
         HitBasedTrkg__HBSegments_Hit3_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit3_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit3_ID",&vec_HitBasedTrkg__HBSegments_Hit3_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit4_ID")==true){
         HitBasedTrkg__HBSegments_Hit4_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit4_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit4_ID",&vec_HitBasedTrkg__HBSegments_Hit4_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit5_ID")==true){
         HitBasedTrkg__HBSegments_Hit5_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit5_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit5_ID",&vec_HitBasedTrkg__HBSegments_Hit5_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit6_ID")==true){
         HitBasedTrkg__HBSegments_Hit6_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit6_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit6_ID",&vec_HitBasedTrkg__HBSegments_Hit6_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit7_ID")==true){
         HitBasedTrkg__HBSegments_Hit7_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit7_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit7_ID",&vec_HitBasedTrkg__HBSegments_Hit7_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit8_ID")==true){
         HitBasedTrkg__HBSegments_Hit8_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit8_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit8_ID",&vec_HitBasedTrkg__HBSegments_Hit8_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit9_ID")==true){
         HitBasedTrkg__HBSegments_Hit9_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit9_ID");
         tree->Branch("HitBasedTrkg__HBSegments_Hit9_ID",&vec_HitBasedTrkg__HBSegments_Hit9_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","SegEndPoint1X")==true){
         HitBasedTrkg__HBSegments_SegEndPoint1X = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","SegEndPoint1X");
         tree->Branch("HitBasedTrkg__HBSegments_SegEndPoint1X",&vec_HitBasedTrkg__HBSegments_SegEndPoint1X);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","SegEndPoint1Z")==true){
         HitBasedTrkg__HBSegments_SegEndPoint1Z = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","SegEndPoint1Z");
         tree->Branch("HitBasedTrkg__HBSegments_SegEndPoint1Z",&vec_HitBasedTrkg__HBSegments_SegEndPoint1Z);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","SegEndPoint2X")==true){
         HitBasedTrkg__HBSegments_SegEndPoint2X = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","SegEndPoint2X");
         tree->Branch("HitBasedTrkg__HBSegments_SegEndPoint2X",&vec_HitBasedTrkg__HBSegments_SegEndPoint2X);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","SegEndPoint2Z")==true){
         HitBasedTrkg__HBSegments_SegEndPoint2Z = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","SegEndPoint2Z");
         tree->Branch("HitBasedTrkg__HBSegments_SegEndPoint2Z",&vec_HitBasedTrkg__HBSegments_SegEndPoint2Z);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","avgWire")==true){
         HitBasedTrkg__HBSegments_avgWire = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","avgWire");
         tree->Branch("HitBasedTrkg__HBSegments_avgWire",&vec_HitBasedTrkg__HBSegments_avgWire);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitChisqProb")==true){
         HitBasedTrkg__HBSegments_fitChisqProb = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","fitChisqProb");
         tree->Branch("HitBasedTrkg__HBSegments_fitChisqProb",&vec_HitBasedTrkg__HBSegments_fitChisqProb);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitInterc")==true){
         HitBasedTrkg__HBSegments_fitInterc = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","fitInterc");
         tree->Branch("HitBasedTrkg__HBSegments_fitInterc",&vec_HitBasedTrkg__HBSegments_fitInterc);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitIntercErr")==true){
         HitBasedTrkg__HBSegments_fitIntercErr = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","fitIntercErr");
         tree->Branch("HitBasedTrkg__HBSegments_fitIntercErr",&vec_HitBasedTrkg__HBSegments_fitIntercErr);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitSlope")==true){
         HitBasedTrkg__HBSegments_fitSlope = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","fitSlope");
         tree->Branch("HitBasedTrkg__HBSegments_fitSlope",&vec_HitBasedTrkg__HBSegments_fitSlope);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitSlopeErr")==true){
         HitBasedTrkg__HBSegments_fitSlopeErr = reader.getBranch<float>     ("HitBasedTrkg::HBSegments","fitSlopeErr");
         tree->Branch("HitBasedTrkg__HBSegments_fitSlopeErr",&vec_HitBasedTrkg__HBSegments_fitSlopeErr);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","id")==true){
         HitBasedTrkg__HBSegments_id = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","id");
         tree->Branch("HitBasedTrkg__HBSegments_id",&vec_HitBasedTrkg__HBSegments_id);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","sector")==true){
         HitBasedTrkg__HBSegments_sector = reader.getBranch<int8_t>    ("HitBasedTrkg::HBSegments","sector");
         tree->Branch("HitBasedTrkg__HBSegments_sector",&vec_HitBasedTrkg__HBSegments_sector);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","size")==true){
         HitBasedTrkg__HBSegments_size = reader.getBranch<int8_t>    ("HitBasedTrkg::HBSegments","size");
         tree->Branch("HitBasedTrkg__HBSegments_size",&vec_HitBasedTrkg__HBSegments_size);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","status")==true){
         HitBasedTrkg__HBSegments_status = reader.getBranch<int16_t>   ("HitBasedTrkg::HBSegments","status");
         tree->Branch("HitBasedTrkg__HBSegments_status",&vec_HitBasedTrkg__HBSegments_status);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","superlayer")==true){
         HitBasedTrkg__HBSegments_superlayer = reader.getBranch<int8_t>    ("HitBasedTrkg::HBSegments","superlayer");
         tree->Branch("HitBasedTrkg__HBSegments_superlayer",&vec_HitBasedTrkg__HBSegments_superlayer);
      }
   }
   hipo::node<int16_t>   *HitBasedTrkg__HBTracks_Cross1_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBTracks_Cross1_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBTracks_Cross2_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBTracks_Cross2_ID;
   hipo::node<int16_t>   *HitBasedTrkg__HBTracks_Cross3_ID;
   std::vector<Short_t>   vec_HitBasedTrkg__HBTracks_Cross3_ID;
   hipo::node<float>     *HitBasedTrkg__HBTracks_Vtx0_x;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_Vtx0_x;
   hipo::node<float>     *HitBasedTrkg__HBTracks_Vtx0_y;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_Vtx0_y;
   hipo::node<float>     *HitBasedTrkg__HBTracks_Vtx0_z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_Vtx0_z;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c1_ux;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c1_ux;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c1_uy;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c1_uy;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c1_uz;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c1_uz;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c1_x;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c1_x;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c1_y;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c1_y;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c1_z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c1_z;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c3_ux;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c3_ux;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c3_uy;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c3_uy;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c3_uz;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c3_uz;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c3_x;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c3_x;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c3_y;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c3_y;
   hipo::node<float>     *HitBasedTrkg__HBTracks_c3_z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_c3_z;
   hipo::node<float>     *HitBasedTrkg__HBTracks_chi2;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_chi2;
   hipo::node<int16_t>   *HitBasedTrkg__HBTracks_id;
   std::vector<Short_t>   vec_HitBasedTrkg__HBTracks_id;
   hipo::node<int16_t>   *HitBasedTrkg__HBTracks_ndf;
   std::vector<Short_t>   vec_HitBasedTrkg__HBTracks_ndf;
   hipo::node<float>     *HitBasedTrkg__HBTracks_p0_x;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_p0_x;
   hipo::node<float>     *HitBasedTrkg__HBTracks_p0_y;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_p0_y;
   hipo::node<float>     *HitBasedTrkg__HBTracks_p0_z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_p0_z;
   hipo::node<float>     *HitBasedTrkg__HBTracks_pathlength;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_pathlength;
   hipo::node<int8_t>    *HitBasedTrkg__HBTracks_q;
   std::vector<Char_t>   vec_HitBasedTrkg__HBTracks_q;
   hipo::node<int8_t>    *HitBasedTrkg__HBTracks_sector;
   std::vector<Char_t>   vec_HitBasedTrkg__HBTracks_sector;
   hipo::node<int16_t>   *HitBasedTrkg__HBTracks_status;
   std::vector<Short_t>   vec_HitBasedTrkg__HBTracks_status;
   hipo::node<float>     *HitBasedTrkg__HBTracks_t1_px;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_t1_px;
   hipo::node<float>     *HitBasedTrkg__HBTracks_t1_py;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_t1_py;
   hipo::node<float>     *HitBasedTrkg__HBTracks_t1_pz;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_t1_pz;
   hipo::node<float>     *HitBasedTrkg__HBTracks_t1_x;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_t1_x;
   hipo::node<float>     *HitBasedTrkg__HBTracks_t1_y;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_t1_y;
   hipo::node<float>     *HitBasedTrkg__HBTracks_t1_z;
   std::vector<Float_t>   vec_HitBasedTrkg__HBTracks_t1_z;
   if(dictionary->hasSchema("HitBasedTrkg::HBTracks")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Cross1_ID")==true){
         HitBasedTrkg__HBTracks_Cross1_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBTracks","Cross1_ID");
         tree->Branch("HitBasedTrkg__HBTracks_Cross1_ID",&vec_HitBasedTrkg__HBTracks_Cross1_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Cross2_ID")==true){
         HitBasedTrkg__HBTracks_Cross2_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBTracks","Cross2_ID");
         tree->Branch("HitBasedTrkg__HBTracks_Cross2_ID",&vec_HitBasedTrkg__HBTracks_Cross2_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Cross3_ID")==true){
         HitBasedTrkg__HBTracks_Cross3_ID = reader.getBranch<int16_t>   ("HitBasedTrkg::HBTracks","Cross3_ID");
         tree->Branch("HitBasedTrkg__HBTracks_Cross3_ID",&vec_HitBasedTrkg__HBTracks_Cross3_ID);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Vtx0_x")==true){
         HitBasedTrkg__HBTracks_Vtx0_x = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","Vtx0_x");
         tree->Branch("HitBasedTrkg__HBTracks_Vtx0_x",&vec_HitBasedTrkg__HBTracks_Vtx0_x);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Vtx0_y")==true){
         HitBasedTrkg__HBTracks_Vtx0_y = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","Vtx0_y");
         tree->Branch("HitBasedTrkg__HBTracks_Vtx0_y",&vec_HitBasedTrkg__HBTracks_Vtx0_y);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Vtx0_z")==true){
         HitBasedTrkg__HBTracks_Vtx0_z = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","Vtx0_z");
         tree->Branch("HitBasedTrkg__HBTracks_Vtx0_z",&vec_HitBasedTrkg__HBTracks_Vtx0_z);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_ux")==true){
         HitBasedTrkg__HBTracks_c1_ux = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c1_ux");
         tree->Branch("HitBasedTrkg__HBTracks_c1_ux",&vec_HitBasedTrkg__HBTracks_c1_ux);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_uy")==true){
         HitBasedTrkg__HBTracks_c1_uy = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c1_uy");
         tree->Branch("HitBasedTrkg__HBTracks_c1_uy",&vec_HitBasedTrkg__HBTracks_c1_uy);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_uz")==true){
         HitBasedTrkg__HBTracks_c1_uz = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c1_uz");
         tree->Branch("HitBasedTrkg__HBTracks_c1_uz",&vec_HitBasedTrkg__HBTracks_c1_uz);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_x")==true){
         HitBasedTrkg__HBTracks_c1_x = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c1_x");
         tree->Branch("HitBasedTrkg__HBTracks_c1_x",&vec_HitBasedTrkg__HBTracks_c1_x);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_y")==true){
         HitBasedTrkg__HBTracks_c1_y = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c1_y");
         tree->Branch("HitBasedTrkg__HBTracks_c1_y",&vec_HitBasedTrkg__HBTracks_c1_y);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_z")==true){
         HitBasedTrkg__HBTracks_c1_z = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c1_z");
         tree->Branch("HitBasedTrkg__HBTracks_c1_z",&vec_HitBasedTrkg__HBTracks_c1_z);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_ux")==true){
         HitBasedTrkg__HBTracks_c3_ux = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c3_ux");
         tree->Branch("HitBasedTrkg__HBTracks_c3_ux",&vec_HitBasedTrkg__HBTracks_c3_ux);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_uy")==true){
         HitBasedTrkg__HBTracks_c3_uy = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c3_uy");
         tree->Branch("HitBasedTrkg__HBTracks_c3_uy",&vec_HitBasedTrkg__HBTracks_c3_uy);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_uz")==true){
         HitBasedTrkg__HBTracks_c3_uz = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c3_uz");
         tree->Branch("HitBasedTrkg__HBTracks_c3_uz",&vec_HitBasedTrkg__HBTracks_c3_uz);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_x")==true){
         HitBasedTrkg__HBTracks_c3_x = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c3_x");
         tree->Branch("HitBasedTrkg__HBTracks_c3_x",&vec_HitBasedTrkg__HBTracks_c3_x);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_y")==true){
         HitBasedTrkg__HBTracks_c3_y = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c3_y");
         tree->Branch("HitBasedTrkg__HBTracks_c3_y",&vec_HitBasedTrkg__HBTracks_c3_y);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_z")==true){
         HitBasedTrkg__HBTracks_c3_z = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","c3_z");
         tree->Branch("HitBasedTrkg__HBTracks_c3_z",&vec_HitBasedTrkg__HBTracks_c3_z);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","chi2")==true){
         HitBasedTrkg__HBTracks_chi2 = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","chi2");
         tree->Branch("HitBasedTrkg__HBTracks_chi2",&vec_HitBasedTrkg__HBTracks_chi2);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","id")==true){
         HitBasedTrkg__HBTracks_id = reader.getBranch<int16_t>   ("HitBasedTrkg::HBTracks","id");
         tree->Branch("HitBasedTrkg__HBTracks_id",&vec_HitBasedTrkg__HBTracks_id);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","ndf")==true){
         HitBasedTrkg__HBTracks_ndf = reader.getBranch<int16_t>   ("HitBasedTrkg::HBTracks","ndf");
         tree->Branch("HitBasedTrkg__HBTracks_ndf",&vec_HitBasedTrkg__HBTracks_ndf);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","p0_x")==true){
         HitBasedTrkg__HBTracks_p0_x = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","p0_x");
         tree->Branch("HitBasedTrkg__HBTracks_p0_x",&vec_HitBasedTrkg__HBTracks_p0_x);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","p0_y")==true){
         HitBasedTrkg__HBTracks_p0_y = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","p0_y");
         tree->Branch("HitBasedTrkg__HBTracks_p0_y",&vec_HitBasedTrkg__HBTracks_p0_y);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","p0_z")==true){
         HitBasedTrkg__HBTracks_p0_z = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","p0_z");
         tree->Branch("HitBasedTrkg__HBTracks_p0_z",&vec_HitBasedTrkg__HBTracks_p0_z);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","pathlength")==true){
         HitBasedTrkg__HBTracks_pathlength = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","pathlength");
         tree->Branch("HitBasedTrkg__HBTracks_pathlength",&vec_HitBasedTrkg__HBTracks_pathlength);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","q")==true){
         HitBasedTrkg__HBTracks_q = reader.getBranch<int8_t>    ("HitBasedTrkg::HBTracks","q");
         tree->Branch("HitBasedTrkg__HBTracks_q",&vec_HitBasedTrkg__HBTracks_q);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","sector")==true){
         HitBasedTrkg__HBTracks_sector = reader.getBranch<int8_t>    ("HitBasedTrkg::HBTracks","sector");
         tree->Branch("HitBasedTrkg__HBTracks_sector",&vec_HitBasedTrkg__HBTracks_sector);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","status")==true){
         HitBasedTrkg__HBTracks_status = reader.getBranch<int16_t>   ("HitBasedTrkg::HBTracks","status");
         tree->Branch("HitBasedTrkg__HBTracks_status",&vec_HitBasedTrkg__HBTracks_status);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_px")==true){
         HitBasedTrkg__HBTracks_t1_px = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","t1_px");
         tree->Branch("HitBasedTrkg__HBTracks_t1_px",&vec_HitBasedTrkg__HBTracks_t1_px);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_py")==true){
         HitBasedTrkg__HBTracks_t1_py = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","t1_py");
         tree->Branch("HitBasedTrkg__HBTracks_t1_py",&vec_HitBasedTrkg__HBTracks_t1_py);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_pz")==true){
         HitBasedTrkg__HBTracks_t1_pz = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","t1_pz");
         tree->Branch("HitBasedTrkg__HBTracks_t1_pz",&vec_HitBasedTrkg__HBTracks_t1_pz);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_x")==true){
         HitBasedTrkg__HBTracks_t1_x = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","t1_x");
         tree->Branch("HitBasedTrkg__HBTracks_t1_x",&vec_HitBasedTrkg__HBTracks_t1_x);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_y")==true){
         HitBasedTrkg__HBTracks_t1_y = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","t1_y");
         tree->Branch("HitBasedTrkg__HBTracks_t1_y",&vec_HitBasedTrkg__HBTracks_t1_y);
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_z")==true){
         HitBasedTrkg__HBTracks_t1_z = reader.getBranch<float>     ("HitBasedTrkg::HBTracks","t1_z");
         tree->Branch("HitBasedTrkg__HBTracks_t1_z",&vec_HitBasedTrkg__HBTracks_t1_z);
      }
   }
   hipo::node<int32_t>   *LTCC__adc_ADC;
   std::vector<Int_t>   vec_LTCC__adc_ADC;
   hipo::node<int16_t>   *LTCC__adc_component;
   std::vector<Short_t>   vec_LTCC__adc_component;
   hipo::node<int8_t>    *LTCC__adc_layer;
   std::vector<Char_t>   vec_LTCC__adc_layer;
   hipo::node<int8_t>    *LTCC__adc_order;
   std::vector<Char_t>   vec_LTCC__adc_order;
   hipo::node<int16_t>   *LTCC__adc_ped;
   std::vector<Short_t>   vec_LTCC__adc_ped;
   hipo::node<int8_t>    *LTCC__adc_sector;
   std::vector<Char_t>   vec_LTCC__adc_sector;
   hipo::node<float>     *LTCC__adc_time;
   std::vector<Float_t>   vec_LTCC__adc_time;
   if(dictionary->hasSchema("LTCC::adc")==true){
      if(dictionary->hasEntry("LTCC::adc","ADC")==true){
         LTCC__adc_ADC = reader.getBranch<int32_t>   ("LTCC::adc","ADC");
         tree->Branch("LTCC__adc_ADC",&vec_LTCC__adc_ADC);
      }
      if(dictionary->hasEntry("LTCC::adc","component")==true){
         LTCC__adc_component = reader.getBranch<int16_t>   ("LTCC::adc","component");
         tree->Branch("LTCC__adc_component",&vec_LTCC__adc_component);
      }
      if(dictionary->hasEntry("LTCC::adc","layer")==true){
         LTCC__adc_layer = reader.getBranch<int8_t>    ("LTCC::adc","layer");
         tree->Branch("LTCC__adc_layer",&vec_LTCC__adc_layer);
      }
      if(dictionary->hasEntry("LTCC::adc","order")==true){
         LTCC__adc_order = reader.getBranch<int8_t>    ("LTCC::adc","order");
         tree->Branch("LTCC__adc_order",&vec_LTCC__adc_order);
      }
      if(dictionary->hasEntry("LTCC::adc","ped")==true){
         LTCC__adc_ped = reader.getBranch<int16_t>   ("LTCC::adc","ped");
         tree->Branch("LTCC__adc_ped",&vec_LTCC__adc_ped);
      }
      if(dictionary->hasEntry("LTCC::adc","sector")==true){
         LTCC__adc_sector = reader.getBranch<int8_t>    ("LTCC::adc","sector");
         tree->Branch("LTCC__adc_sector",&vec_LTCC__adc_sector);
      }
      if(dictionary->hasEntry("LTCC::adc","time")==true){
         LTCC__adc_time = reader.getBranch<float>     ("LTCC::adc","time");
         tree->Branch("LTCC__adc_time",&vec_LTCC__adc_time);
      }
   }
   hipo::node<int16_t>   *LTCC__clusters_id;
   std::vector<Short_t>   vec_LTCC__clusters_id;
   hipo::node<float>     *LTCC__clusters_maxPhi;
   std::vector<Float_t>   vec_LTCC__clusters_maxPhi;
   hipo::node<float>     *LTCC__clusters_maxTheta;
   std::vector<Float_t>   vec_LTCC__clusters_maxTheta;
   hipo::node<float>     *LTCC__clusters_minPhi;
   std::vector<Float_t>   vec_LTCC__clusters_minPhi;
   hipo::node<float>     *LTCC__clusters_minTheta;
   std::vector<Float_t>   vec_LTCC__clusters_minTheta;
   hipo::node<int16_t>   *LTCC__clusters_nHits;
   std::vector<Short_t>   vec_LTCC__clusters_nHits;
   hipo::node<float>     *LTCC__clusters_nphe;
   std::vector<Float_t>   vec_LTCC__clusters_nphe;
   hipo::node<int8_t>    *LTCC__clusters_sector;
   std::vector<Char_t>   vec_LTCC__clusters_sector;
   hipo::node<int16_t>   *LTCC__clusters_segment;
   std::vector<Short_t>   vec_LTCC__clusters_segment;
   hipo::node<int8_t>    *LTCC__clusters_status;
   std::vector<Char_t>   vec_LTCC__clusters_status;
   hipo::node<float>     *LTCC__clusters_time;
   std::vector<Float_t>   vec_LTCC__clusters_time;
   hipo::node<float>     *LTCC__clusters_x;
   std::vector<Float_t>   vec_LTCC__clusters_x;
   hipo::node<float>     *LTCC__clusters_y;
   std::vector<Float_t>   vec_LTCC__clusters_y;
   hipo::node<float>     *LTCC__clusters_z;
   std::vector<Float_t>   vec_LTCC__clusters_z;
   if(dictionary->hasSchema("LTCC::clusters")==true){
      if(dictionary->hasEntry("LTCC::clusters","id")==true){
         LTCC__clusters_id = reader.getBranch<int16_t>   ("LTCC::clusters","id");
         tree->Branch("LTCC__clusters_id",&vec_LTCC__clusters_id);
      }
      if(dictionary->hasEntry("LTCC::clusters","maxPhi")==true){
         LTCC__clusters_maxPhi = reader.getBranch<float>     ("LTCC::clusters","maxPhi");
         tree->Branch("LTCC__clusters_maxPhi",&vec_LTCC__clusters_maxPhi);
      }
      if(dictionary->hasEntry("LTCC::clusters","maxTheta")==true){
         LTCC__clusters_maxTheta = reader.getBranch<float>     ("LTCC::clusters","maxTheta");
         tree->Branch("LTCC__clusters_maxTheta",&vec_LTCC__clusters_maxTheta);
      }
      if(dictionary->hasEntry("LTCC::clusters","minPhi")==true){
         LTCC__clusters_minPhi = reader.getBranch<float>     ("LTCC::clusters","minPhi");
         tree->Branch("LTCC__clusters_minPhi",&vec_LTCC__clusters_minPhi);
      }
      if(dictionary->hasEntry("LTCC::clusters","minTheta")==true){
         LTCC__clusters_minTheta = reader.getBranch<float>     ("LTCC::clusters","minTheta");
         tree->Branch("LTCC__clusters_minTheta",&vec_LTCC__clusters_minTheta);
      }
      if(dictionary->hasEntry("LTCC::clusters","nHits")==true){
         LTCC__clusters_nHits = reader.getBranch<int16_t>   ("LTCC::clusters","nHits");
         tree->Branch("LTCC__clusters_nHits",&vec_LTCC__clusters_nHits);
      }
      if(dictionary->hasEntry("LTCC::clusters","nphe")==true){
         LTCC__clusters_nphe = reader.getBranch<float>     ("LTCC::clusters","nphe");
         tree->Branch("LTCC__clusters_nphe",&vec_LTCC__clusters_nphe);
      }
      if(dictionary->hasEntry("LTCC::clusters","sector")==true){
         LTCC__clusters_sector = reader.getBranch<int8_t>    ("LTCC::clusters","sector");
         tree->Branch("LTCC__clusters_sector",&vec_LTCC__clusters_sector);
      }
      if(dictionary->hasEntry("LTCC::clusters","segment")==true){
         LTCC__clusters_segment = reader.getBranch<int16_t>   ("LTCC::clusters","segment");
         tree->Branch("LTCC__clusters_segment",&vec_LTCC__clusters_segment);
      }
      if(dictionary->hasEntry("LTCC::clusters","status")==true){
         LTCC__clusters_status = reader.getBranch<int8_t>    ("LTCC::clusters","status");
         tree->Branch("LTCC__clusters_status",&vec_LTCC__clusters_status);
      }
      if(dictionary->hasEntry("LTCC::clusters","time")==true){
         LTCC__clusters_time = reader.getBranch<float>     ("LTCC::clusters","time");
         tree->Branch("LTCC__clusters_time",&vec_LTCC__clusters_time);
      }
      if(dictionary->hasEntry("LTCC::clusters","x")==true){
         LTCC__clusters_x = reader.getBranch<float>     ("LTCC::clusters","x");
         tree->Branch("LTCC__clusters_x",&vec_LTCC__clusters_x);
      }
      if(dictionary->hasEntry("LTCC::clusters","y")==true){
         LTCC__clusters_y = reader.getBranch<float>     ("LTCC::clusters","y");
         tree->Branch("LTCC__clusters_y",&vec_LTCC__clusters_y);
      }
      if(dictionary->hasEntry("LTCC::clusters","z")==true){
         LTCC__clusters_z = reader.getBranch<float>     ("LTCC::clusters","z");
         tree->Branch("LTCC__clusters_z",&vec_LTCC__clusters_z);
      }
   }
   hipo::node<int32_t>   *LTCC__tdc_TDC;
   std::vector<Int_t>   vec_LTCC__tdc_TDC;
   hipo::node<int16_t>   *LTCC__tdc_component;
   std::vector<Short_t>   vec_LTCC__tdc_component;
   hipo::node<int8_t>    *LTCC__tdc_layer;
   std::vector<Char_t>   vec_LTCC__tdc_layer;
   hipo::node<int8_t>    *LTCC__tdc_order;
   std::vector<Char_t>   vec_LTCC__tdc_order;
   hipo::node<int8_t>    *LTCC__tdc_sector;
   std::vector<Char_t>   vec_LTCC__tdc_sector;
   if(dictionary->hasSchema("LTCC::tdc")==true){
      if(dictionary->hasEntry("LTCC::tdc","TDC")==true){
         LTCC__tdc_TDC = reader.getBranch<int32_t>   ("LTCC::tdc","TDC");
         tree->Branch("LTCC__tdc_TDC",&vec_LTCC__tdc_TDC);
      }
      if(dictionary->hasEntry("LTCC::tdc","component")==true){
         LTCC__tdc_component = reader.getBranch<int16_t>   ("LTCC::tdc","component");
         tree->Branch("LTCC__tdc_component",&vec_LTCC__tdc_component);
      }
      if(dictionary->hasEntry("LTCC::tdc","layer")==true){
         LTCC__tdc_layer = reader.getBranch<int8_t>    ("LTCC::tdc","layer");
         tree->Branch("LTCC__tdc_layer",&vec_LTCC__tdc_layer);
      }
      if(dictionary->hasEntry("LTCC::tdc","order")==true){
         LTCC__tdc_order = reader.getBranch<int8_t>    ("LTCC::tdc","order");
         tree->Branch("LTCC__tdc_order",&vec_LTCC__tdc_order);
      }
      if(dictionary->hasEntry("LTCC::tdc","sector")==true){
         LTCC__tdc_sector = reader.getBranch<int8_t>    ("LTCC::tdc","sector");
         tree->Branch("LTCC__tdc_sector",&vec_LTCC__tdc_sector);
      }
   }
   hipo::node<int16_t>   *MC__Event_atarget;
   std::vector<Short_t>   vec_MC__Event_atarget;
   hipo::node<int16_t>   *MC__Event_btype;
   std::vector<Short_t>   vec_MC__Event_btype;
   hipo::node<float>     *MC__Event_ebeam;
   std::vector<Float_t>   vec_MC__Event_ebeam;
   hipo::node<int16_t>   *MC__Event_npart;
   std::vector<Short_t>   vec_MC__Event_npart;
   hipo::node<float>     *MC__Event_pbeam;
   std::vector<Float_t>   vec_MC__Event_pbeam;
   hipo::node<int16_t>   *MC__Event_processid;
   std::vector<Short_t>   vec_MC__Event_processid;
   hipo::node<float>     *MC__Event_ptarget;
   std::vector<Float_t>   vec_MC__Event_ptarget;
   hipo::node<int16_t>   *MC__Event_targetid;
   std::vector<Short_t>   vec_MC__Event_targetid;
   hipo::node<float>     *MC__Event_weight;
   std::vector<Float_t>   vec_MC__Event_weight;
   hipo::node<int16_t>   *MC__Event_ztarget;
   std::vector<Short_t>   vec_MC__Event_ztarget;
   if(dictionary->hasSchema("MC::Event")==true){
      if(dictionary->hasEntry("MC::Event","atarget")==true){
         MC__Event_atarget = reader.getBranch<int16_t>   ("MC::Event","atarget");
         tree->Branch("MC__Event_atarget",&vec_MC__Event_atarget);
      }
      if(dictionary->hasEntry("MC::Event","btype")==true){
         MC__Event_btype = reader.getBranch<int16_t>   ("MC::Event","btype");
         tree->Branch("MC__Event_btype",&vec_MC__Event_btype);
      }
      if(dictionary->hasEntry("MC::Event","ebeam")==true){
         MC__Event_ebeam = reader.getBranch<float>     ("MC::Event","ebeam");
         tree->Branch("MC__Event_ebeam",&vec_MC__Event_ebeam);
      }
      if(dictionary->hasEntry("MC::Event","npart")==true){
         MC__Event_npart = reader.getBranch<int16_t>   ("MC::Event","npart");
         tree->Branch("MC__Event_npart",&vec_MC__Event_npart);
      }
      if(dictionary->hasEntry("MC::Event","pbeam")==true){
         MC__Event_pbeam = reader.getBranch<float>     ("MC::Event","pbeam");
         tree->Branch("MC__Event_pbeam",&vec_MC__Event_pbeam);
      }
      if(dictionary->hasEntry("MC::Event","processid")==true){
         MC__Event_processid = reader.getBranch<int16_t>   ("MC::Event","processid");
         tree->Branch("MC__Event_processid",&vec_MC__Event_processid);
      }
      if(dictionary->hasEntry("MC::Event","ptarget")==true){
         MC__Event_ptarget = reader.getBranch<float>     ("MC::Event","ptarget");
         tree->Branch("MC__Event_ptarget",&vec_MC__Event_ptarget);
      }
      if(dictionary->hasEntry("MC::Event","targetid")==true){
         MC__Event_targetid = reader.getBranch<int16_t>   ("MC::Event","targetid");
         tree->Branch("MC__Event_targetid",&vec_MC__Event_targetid);
      }
      if(dictionary->hasEntry("MC::Event","weight")==true){
         MC__Event_weight = reader.getBranch<float>     ("MC::Event","weight");
         tree->Branch("MC__Event_weight",&vec_MC__Event_weight);
      }
      if(dictionary->hasEntry("MC::Event","ztarget")==true){
         MC__Event_ztarget = reader.getBranch<int16_t>   ("MC::Event","ztarget");
         tree->Branch("MC__Event_ztarget",&vec_MC__Event_ztarget);
      }
   }
   hipo::node<int32_t>   *MC__Header_event;
   std::vector<Int_t>   vec_MC__Header_event;
   hipo::node<float>     *MC__Header_helicity;
   std::vector<Float_t>   vec_MC__Header_helicity;
   hipo::node<int32_t>   *MC__Header_run;
   std::vector<Int_t>   vec_MC__Header_run;
   hipo::node<int8_t>    *MC__Header_type;
   std::vector<Char_t>   vec_MC__Header_type;
   if(dictionary->hasSchema("MC::Header")==true){
      if(dictionary->hasEntry("MC::Header","event")==true){
         MC__Header_event = reader.getBranch<int32_t>   ("MC::Header","event");
         tree->Branch("MC__Header_event",&vec_MC__Header_event);
      }
      if(dictionary->hasEntry("MC::Header","helicity")==true){
         MC__Header_helicity = reader.getBranch<float>     ("MC::Header","helicity");
         tree->Branch("MC__Header_helicity",&vec_MC__Header_helicity);
      }
      if(dictionary->hasEntry("MC::Header","run")==true){
         MC__Header_run = reader.getBranch<int32_t>   ("MC::Header","run");
         tree->Branch("MC__Header_run",&vec_MC__Header_run);
      }
      if(dictionary->hasEntry("MC::Header","type")==true){
         MC__Header_type = reader.getBranch<int8_t>    ("MC::Header","type");
         tree->Branch("MC__Header_type",&vec_MC__Header_type);
      }
   }
   hipo::node<float>     *MC__Lund_E;
   std::vector<Float_t>   vec_MC__Lund_E;
   hipo::node<int8_t>    *MC__Lund_daughter;
   std::vector<Char_t>   vec_MC__Lund_daughter;
   hipo::node<int8_t>    *MC__Lund_index;
   std::vector<Char_t>   vec_MC__Lund_index;
   hipo::node<float>     *MC__Lund_ltime;
   std::vector<Float_t>   vec_MC__Lund_ltime;
   hipo::node<float>     *MC__Lund_mass;
   std::vector<Float_t>   vec_MC__Lund_mass;
   hipo::node<int8_t>    *MC__Lund_parent;
   std::vector<Char_t>   vec_MC__Lund_parent;
   hipo::node<int32_t>   *MC__Lund_pid;
   std::vector<Int_t>   vec_MC__Lund_pid;
   hipo::node<float>     *MC__Lund_px;
   std::vector<Float_t>   vec_MC__Lund_px;
   hipo::node<float>     *MC__Lund_py;
   std::vector<Float_t>   vec_MC__Lund_py;
   hipo::node<float>     *MC__Lund_pz;
   std::vector<Float_t>   vec_MC__Lund_pz;
   hipo::node<int8_t>    *MC__Lund_type;
   std::vector<Char_t>   vec_MC__Lund_type;
   hipo::node<float>     *MC__Lund_vx;
   std::vector<Float_t>   vec_MC__Lund_vx;
   hipo::node<float>     *MC__Lund_vy;
   std::vector<Float_t>   vec_MC__Lund_vy;
   hipo::node<float>     *MC__Lund_vz;
   std::vector<Float_t>   vec_MC__Lund_vz;
   if(dictionary->hasSchema("MC::Lund")==true){
      if(dictionary->hasEntry("MC::Lund","E")==true){
         MC__Lund_E = reader.getBranch<float>     ("MC::Lund","E");
         tree->Branch("MC__Lund_E",&vec_MC__Lund_E);
      }
      if(dictionary->hasEntry("MC::Lund","daughter")==true){
         MC__Lund_daughter = reader.getBranch<int8_t>    ("MC::Lund","daughter");
         tree->Branch("MC__Lund_daughter",&vec_MC__Lund_daughter);
      }
      if(dictionary->hasEntry("MC::Lund","index")==true){
         MC__Lund_index = reader.getBranch<int8_t>    ("MC::Lund","index");
         tree->Branch("MC__Lund_index",&vec_MC__Lund_index);
      }
      if(dictionary->hasEntry("MC::Lund","ltime")==true){
         MC__Lund_ltime = reader.getBranch<float>     ("MC::Lund","ltime");
         tree->Branch("MC__Lund_ltime",&vec_MC__Lund_ltime);
      }
      if(dictionary->hasEntry("MC::Lund","mass")==true){
         MC__Lund_mass = reader.getBranch<float>     ("MC::Lund","mass");
         tree->Branch("MC__Lund_mass",&vec_MC__Lund_mass);
      }
      if(dictionary->hasEntry("MC::Lund","parent")==true){
         MC__Lund_parent = reader.getBranch<int8_t>    ("MC::Lund","parent");
         tree->Branch("MC__Lund_parent",&vec_MC__Lund_parent);
      }
      if(dictionary->hasEntry("MC::Lund","pid")==true){
         MC__Lund_pid = reader.getBranch<int32_t>   ("MC::Lund","pid");
         tree->Branch("MC__Lund_pid",&vec_MC__Lund_pid);
      }
      if(dictionary->hasEntry("MC::Lund","px")==true){
         MC__Lund_px = reader.getBranch<float>     ("MC::Lund","px");
         tree->Branch("MC__Lund_px",&vec_MC__Lund_px);
      }
      if(dictionary->hasEntry("MC::Lund","py")==true){
         MC__Lund_py = reader.getBranch<float>     ("MC::Lund","py");
         tree->Branch("MC__Lund_py",&vec_MC__Lund_py);
      }
      if(dictionary->hasEntry("MC::Lund","pz")==true){
         MC__Lund_pz = reader.getBranch<float>     ("MC::Lund","pz");
         tree->Branch("MC__Lund_pz",&vec_MC__Lund_pz);
      }
      if(dictionary->hasEntry("MC::Lund","type")==true){
         MC__Lund_type = reader.getBranch<int8_t>    ("MC::Lund","type");
         tree->Branch("MC__Lund_type",&vec_MC__Lund_type);
      }
      if(dictionary->hasEntry("MC::Lund","vx")==true){
         MC__Lund_vx = reader.getBranch<float>     ("MC::Lund","vx");
         tree->Branch("MC__Lund_vx",&vec_MC__Lund_vx);
      }
      if(dictionary->hasEntry("MC::Lund","vy")==true){
         MC__Lund_vy = reader.getBranch<float>     ("MC::Lund","vy");
         tree->Branch("MC__Lund_vy",&vec_MC__Lund_vy);
      }
      if(dictionary->hasEntry("MC::Lund","vz")==true){
         MC__Lund_vz = reader.getBranch<float>     ("MC::Lund","vz");
         tree->Branch("MC__Lund_vz",&vec_MC__Lund_vz);
      }
   }
   hipo::node<int32_t>   *MC__Particle_pid;
   std::vector<Int_t>   vec_MC__Particle_pid;
   hipo::node<float>     *MC__Particle_px;
   std::vector<Float_t>   vec_MC__Particle_px;
   hipo::node<float>     *MC__Particle_py;
   std::vector<Float_t>   vec_MC__Particle_py;
   hipo::node<float>     *MC__Particle_pz;
   std::vector<Float_t>   vec_MC__Particle_pz;
   hipo::node<float>     *MC__Particle_vt;
   std::vector<Float_t>   vec_MC__Particle_vt;
   hipo::node<float>     *MC__Particle_vx;
   std::vector<Float_t>   vec_MC__Particle_vx;
   hipo::node<float>     *MC__Particle_vy;
   std::vector<Float_t>   vec_MC__Particle_vy;
   hipo::node<float>     *MC__Particle_vz;
   std::vector<Float_t>   vec_MC__Particle_vz;
   if(dictionary->hasSchema("MC::Particle")==true){
      if(dictionary->hasEntry("MC::Particle","pid")==true){
         MC__Particle_pid = reader.getBranch<int32_t>   ("MC::Particle","pid");
         tree->Branch("MC__Particle_pid",&vec_MC__Particle_pid);
      }
      if(dictionary->hasEntry("MC::Particle","px")==true){
         MC__Particle_px = reader.getBranch<float>     ("MC::Particle","px");
         tree->Branch("MC__Particle_px",&vec_MC__Particle_px);
      }
      if(dictionary->hasEntry("MC::Particle","py")==true){
         MC__Particle_py = reader.getBranch<float>     ("MC::Particle","py");
         tree->Branch("MC__Particle_py",&vec_MC__Particle_py);
      }
      if(dictionary->hasEntry("MC::Particle","pz")==true){
         MC__Particle_pz = reader.getBranch<float>     ("MC::Particle","pz");
         tree->Branch("MC__Particle_pz",&vec_MC__Particle_pz);
      }
      if(dictionary->hasEntry("MC::Particle","vt")==true){
         MC__Particle_vt = reader.getBranch<float>     ("MC::Particle","vt");
         tree->Branch("MC__Particle_vt",&vec_MC__Particle_vt);
      }
      if(dictionary->hasEntry("MC::Particle","vx")==true){
         MC__Particle_vx = reader.getBranch<float>     ("MC::Particle","vx");
         tree->Branch("MC__Particle_vx",&vec_MC__Particle_vx);
      }
      if(dictionary->hasEntry("MC::Particle","vy")==true){
         MC__Particle_vy = reader.getBranch<float>     ("MC::Particle","vy");
         tree->Branch("MC__Particle_vy",&vec_MC__Particle_vy);
      }
      if(dictionary->hasEntry("MC::Particle","vz")==true){
         MC__Particle_vz = reader.getBranch<float>     ("MC::Particle","vz");
         tree->Branch("MC__Particle_vz",&vec_MC__Particle_vz);
      }
   }
   hipo::node<float>     *MC__True_avgLx;
   std::vector<Float_t>   vec_MC__True_avgLx;
   hipo::node<float>     *MC__True_avgLy;
   std::vector<Float_t>   vec_MC__True_avgLy;
   hipo::node<float>     *MC__True_avgLz;
   std::vector<Float_t>   vec_MC__True_avgLz;
   hipo::node<float>     *MC__True_avgT;
   std::vector<Float_t>   vec_MC__True_avgT;
   hipo::node<float>     *MC__True_avgX;
   std::vector<Float_t>   vec_MC__True_avgX;
   hipo::node<float>     *MC__True_avgY;
   std::vector<Float_t>   vec_MC__True_avgY;
   hipo::node<float>     *MC__True_avgZ;
   std::vector<Float_t>   vec_MC__True_avgZ;
   hipo::node<int8_t>    *MC__True_detector;
   std::vector<Char_t>   vec_MC__True_detector;
   hipo::node<int32_t>   *MC__True_hitn;
   std::vector<Int_t>   vec_MC__True_hitn;
   hipo::node<int32_t>   *MC__True_mpid;
   std::vector<Int_t>   vec_MC__True_mpid;
   hipo::node<int32_t>   *MC__True_mtid;
   std::vector<Int_t>   vec_MC__True_mtid;
   hipo::node<float>     *MC__True_mvx;
   std::vector<Float_t>   vec_MC__True_mvx;
   hipo::node<float>     *MC__True_mvy;
   std::vector<Float_t>   vec_MC__True_mvy;
   hipo::node<float>     *MC__True_mvz;
   std::vector<Float_t>   vec_MC__True_mvz;
   hipo::node<int32_t>   *MC__True_nsteps;
   std::vector<Int_t>   vec_MC__True_nsteps;
   hipo::node<int32_t>   *MC__True_otid;
   std::vector<Int_t>   vec_MC__True_otid;
   hipo::node<int32_t>   *MC__True_pid;
   std::vector<Int_t>   vec_MC__True_pid;
   hipo::node<int32_t>   *MC__True_procID;
   std::vector<Int_t>   vec_MC__True_procID;
   hipo::node<float>     *MC__True_px;
   std::vector<Float_t>   vec_MC__True_px;
   hipo::node<float>     *MC__True_py;
   std::vector<Float_t>   vec_MC__True_py;
   hipo::node<float>     *MC__True_pz;
   std::vector<Float_t>   vec_MC__True_pz;
   hipo::node<int32_t>   *MC__True_tid;
   std::vector<Int_t>   vec_MC__True_tid;
   hipo::node<float>     *MC__True_totEdep;
   std::vector<Float_t>   vec_MC__True_totEdep;
   hipo::node<float>     *MC__True_trackE;
   std::vector<Float_t>   vec_MC__True_trackE;
   hipo::node<float>     *MC__True_vx;
   std::vector<Float_t>   vec_MC__True_vx;
   hipo::node<float>     *MC__True_vy;
   std::vector<Float_t>   vec_MC__True_vy;
   hipo::node<float>     *MC__True_vz;
   std::vector<Float_t>   vec_MC__True_vz;
   if(dictionary->hasSchema("MC::True")==true){
      if(dictionary->hasEntry("MC::True","avgLx")==true){
         MC__True_avgLx = reader.getBranch<float>     ("MC::True","avgLx");
         tree->Branch("MC__True_avgLx",&vec_MC__True_avgLx);
      }
      if(dictionary->hasEntry("MC::True","avgLy")==true){
         MC__True_avgLy = reader.getBranch<float>     ("MC::True","avgLy");
         tree->Branch("MC__True_avgLy",&vec_MC__True_avgLy);
      }
      if(dictionary->hasEntry("MC::True","avgLz")==true){
         MC__True_avgLz = reader.getBranch<float>     ("MC::True","avgLz");
         tree->Branch("MC__True_avgLz",&vec_MC__True_avgLz);
      }
      if(dictionary->hasEntry("MC::True","avgT")==true){
         MC__True_avgT = reader.getBranch<float>     ("MC::True","avgT");
         tree->Branch("MC__True_avgT",&vec_MC__True_avgT);
      }
      if(dictionary->hasEntry("MC::True","avgX")==true){
         MC__True_avgX = reader.getBranch<float>     ("MC::True","avgX");
         tree->Branch("MC__True_avgX",&vec_MC__True_avgX);
      }
      if(dictionary->hasEntry("MC::True","avgY")==true){
         MC__True_avgY = reader.getBranch<float>     ("MC::True","avgY");
         tree->Branch("MC__True_avgY",&vec_MC__True_avgY);
      }
      if(dictionary->hasEntry("MC::True","avgZ")==true){
         MC__True_avgZ = reader.getBranch<float>     ("MC::True","avgZ");
         tree->Branch("MC__True_avgZ",&vec_MC__True_avgZ);
      }
      if(dictionary->hasEntry("MC::True","detector")==true){
         MC__True_detector = reader.getBranch<int8_t>    ("MC::True","detector");
         tree->Branch("MC__True_detector",&vec_MC__True_detector);
      }
      if(dictionary->hasEntry("MC::True","hitn")==true){
         MC__True_hitn = reader.getBranch<int32_t>   ("MC::True","hitn");
         tree->Branch("MC__True_hitn",&vec_MC__True_hitn);
      }
      if(dictionary->hasEntry("MC::True","mpid")==true){
         MC__True_mpid = reader.getBranch<int32_t>   ("MC::True","mpid");
         tree->Branch("MC__True_mpid",&vec_MC__True_mpid);
      }
      if(dictionary->hasEntry("MC::True","mtid")==true){
         MC__True_mtid = reader.getBranch<int32_t>   ("MC::True","mtid");
         tree->Branch("MC__True_mtid",&vec_MC__True_mtid);
      }
      if(dictionary->hasEntry("MC::True","mvx")==true){
         MC__True_mvx = reader.getBranch<float>     ("MC::True","mvx");
         tree->Branch("MC__True_mvx",&vec_MC__True_mvx);
      }
      if(dictionary->hasEntry("MC::True","mvy")==true){
         MC__True_mvy = reader.getBranch<float>     ("MC::True","mvy");
         tree->Branch("MC__True_mvy",&vec_MC__True_mvy);
      }
      if(dictionary->hasEntry("MC::True","mvz")==true){
         MC__True_mvz = reader.getBranch<float>     ("MC::True","mvz");
         tree->Branch("MC__True_mvz",&vec_MC__True_mvz);
      }
      if(dictionary->hasEntry("MC::True","nsteps")==true){
         MC__True_nsteps = reader.getBranch<int32_t>   ("MC::True","nsteps");
         tree->Branch("MC__True_nsteps",&vec_MC__True_nsteps);
      }
      if(dictionary->hasEntry("MC::True","otid")==true){
         MC__True_otid = reader.getBranch<int32_t>   ("MC::True","otid");
         tree->Branch("MC__True_otid",&vec_MC__True_otid);
      }
      if(dictionary->hasEntry("MC::True","pid")==true){
         MC__True_pid = reader.getBranch<int32_t>   ("MC::True","pid");
         tree->Branch("MC__True_pid",&vec_MC__True_pid);
      }
      if(dictionary->hasEntry("MC::True","procID")==true){
         MC__True_procID = reader.getBranch<int32_t>   ("MC::True","procID");
         tree->Branch("MC__True_procID",&vec_MC__True_procID);
      }
      if(dictionary->hasEntry("MC::True","px")==true){
         MC__True_px = reader.getBranch<float>     ("MC::True","px");
         tree->Branch("MC__True_px",&vec_MC__True_px);
      }
      if(dictionary->hasEntry("MC::True","py")==true){
         MC__True_py = reader.getBranch<float>     ("MC::True","py");
         tree->Branch("MC__True_py",&vec_MC__True_py);
      }
      if(dictionary->hasEntry("MC::True","pz")==true){
         MC__True_pz = reader.getBranch<float>     ("MC::True","pz");
         tree->Branch("MC__True_pz",&vec_MC__True_pz);
      }
      if(dictionary->hasEntry("MC::True","tid")==true){
         MC__True_tid = reader.getBranch<int32_t>   ("MC::True","tid");
         tree->Branch("MC__True_tid",&vec_MC__True_tid);
      }
      if(dictionary->hasEntry("MC::True","totEdep")==true){
         MC__True_totEdep = reader.getBranch<float>     ("MC::True","totEdep");
         tree->Branch("MC__True_totEdep",&vec_MC__True_totEdep);
      }
      if(dictionary->hasEntry("MC::True","trackE")==true){
         MC__True_trackE = reader.getBranch<float>     ("MC::True","trackE");
         tree->Branch("MC__True_trackE",&vec_MC__True_trackE);
      }
      if(dictionary->hasEntry("MC::True","vx")==true){
         MC__True_vx = reader.getBranch<float>     ("MC::True","vx");
         tree->Branch("MC__True_vx",&vec_MC__True_vx);
      }
      if(dictionary->hasEntry("MC::True","vy")==true){
         MC__True_vy = reader.getBranch<float>     ("MC::True","vy");
         tree->Branch("MC__True_vy",&vec_MC__True_vy);
      }
      if(dictionary->hasEntry("MC::True","vz")==true){
         MC__True_vz = reader.getBranch<float>     ("MC::True","vz");
         tree->Branch("MC__True_vz",&vec_MC__True_vz);
      }
   }
   hipo::node<int32_t>   *RAW__adc_ADC;
   std::vector<Int_t>   vec_RAW__adc_ADC;
   hipo::node<int16_t>   *RAW__adc_channel;
   std::vector<Short_t>   vec_RAW__adc_channel;
   hipo::node<int8_t>    *RAW__adc_crate;
   std::vector<Char_t>   vec_RAW__adc_crate;
   hipo::node<int16_t>   *RAW__adc_ped;
   std::vector<Short_t>   vec_RAW__adc_ped;
   hipo::node<int8_t>    *RAW__adc_slot;
   std::vector<Char_t>   vec_RAW__adc_slot;
   hipo::node<float>     *RAW__adc_time;
   std::vector<Float_t>   vec_RAW__adc_time;
   if(dictionary->hasSchema("RAW::adc")==true){
      if(dictionary->hasEntry("RAW::adc","ADC")==true){
         RAW__adc_ADC = reader.getBranch<int32_t>   ("RAW::adc","ADC");
         tree->Branch("RAW__adc_ADC",&vec_RAW__adc_ADC);
      }
      if(dictionary->hasEntry("RAW::adc","channel")==true){
         RAW__adc_channel = reader.getBranch<int16_t>   ("RAW::adc","channel");
         tree->Branch("RAW__adc_channel",&vec_RAW__adc_channel);
      }
      if(dictionary->hasEntry("RAW::adc","crate")==true){
         RAW__adc_crate = reader.getBranch<int8_t>    ("RAW::adc","crate");
         tree->Branch("RAW__adc_crate",&vec_RAW__adc_crate);
      }
      if(dictionary->hasEntry("RAW::adc","ped")==true){
         RAW__adc_ped = reader.getBranch<int16_t>   ("RAW::adc","ped");
         tree->Branch("RAW__adc_ped",&vec_RAW__adc_ped);
      }
      if(dictionary->hasEntry("RAW::adc","slot")==true){
         RAW__adc_slot = reader.getBranch<int8_t>    ("RAW::adc","slot");
         tree->Branch("RAW__adc_slot",&vec_RAW__adc_slot);
      }
      if(dictionary->hasEntry("RAW::adc","time")==true){
         RAW__adc_time = reader.getBranch<float>     ("RAW::adc","time");
         tree->Branch("RAW__adc_time",&vec_RAW__adc_time);
      }
   }
   hipo::node<int16_t>   *RAW__scaler_channel;
   std::vector<Short_t>   vec_RAW__scaler_channel;
   hipo::node<int8_t>    *RAW__scaler_crate;
   std::vector<Char_t>   vec_RAW__scaler_crate;
   hipo::node<int8_t>    *RAW__scaler_helicity;
   std::vector<Char_t>   vec_RAW__scaler_helicity;
   hipo::node<int8_t>    *RAW__scaler_quartet;
   std::vector<Char_t>   vec_RAW__scaler_quartet;
   hipo::node<int8_t>    *RAW__scaler_slot;
   std::vector<Char_t>   vec_RAW__scaler_slot;
   hipo::node<int32_t>   *RAW__scaler_value;
   std::vector<Int_t>   vec_RAW__scaler_value;
   if(dictionary->hasSchema("RAW::scaler")==true){
      if(dictionary->hasEntry("RAW::scaler","channel")==true){
         RAW__scaler_channel = reader.getBranch<int16_t>   ("RAW::scaler","channel");
         tree->Branch("RAW__scaler_channel",&vec_RAW__scaler_channel);
      }
      if(dictionary->hasEntry("RAW::scaler","crate")==true){
         RAW__scaler_crate = reader.getBranch<int8_t>    ("RAW::scaler","crate");
         tree->Branch("RAW__scaler_crate",&vec_RAW__scaler_crate);
      }
      if(dictionary->hasEntry("RAW::scaler","helicity")==true){
         RAW__scaler_helicity = reader.getBranch<int8_t>    ("RAW::scaler","helicity");
         tree->Branch("RAW__scaler_helicity",&vec_RAW__scaler_helicity);
      }
      if(dictionary->hasEntry("RAW::scaler","quartet")==true){
         RAW__scaler_quartet = reader.getBranch<int8_t>    ("RAW::scaler","quartet");
         tree->Branch("RAW__scaler_quartet",&vec_RAW__scaler_quartet);
      }
      if(dictionary->hasEntry("RAW::scaler","slot")==true){
         RAW__scaler_slot = reader.getBranch<int8_t>    ("RAW::scaler","slot");
         tree->Branch("RAW__scaler_slot",&vec_RAW__scaler_slot);
      }
      if(dictionary->hasEntry("RAW::scaler","value")==true){
         RAW__scaler_value = reader.getBranch<int32_t>   ("RAW::scaler","value");
         tree->Branch("RAW__scaler_value",&vec_RAW__scaler_value);
      }
   }
   hipo::node<int32_t>   *RAW__tdc_TDC;
   std::vector<Int_t>   vec_RAW__tdc_TDC;
   hipo::node<int16_t>   *RAW__tdc_channel;
   std::vector<Short_t>   vec_RAW__tdc_channel;
   hipo::node<int8_t>    *RAW__tdc_crate;
   std::vector<Char_t>   vec_RAW__tdc_crate;
   hipo::node<int8_t>    *RAW__tdc_slot;
   std::vector<Char_t>   vec_RAW__tdc_slot;
   if(dictionary->hasSchema("RAW::tdc")==true){
      if(dictionary->hasEntry("RAW::tdc","TDC")==true){
         RAW__tdc_TDC = reader.getBranch<int32_t>   ("RAW::tdc","TDC");
         tree->Branch("RAW__tdc_TDC",&vec_RAW__tdc_TDC);
      }
      if(dictionary->hasEntry("RAW::tdc","channel")==true){
         RAW__tdc_channel = reader.getBranch<int16_t>   ("RAW::tdc","channel");
         tree->Branch("RAW__tdc_channel",&vec_RAW__tdc_channel);
      }
      if(dictionary->hasEntry("RAW::tdc","crate")==true){
         RAW__tdc_crate = reader.getBranch<int8_t>    ("RAW::tdc","crate");
         tree->Branch("RAW__tdc_crate",&vec_RAW__tdc_crate);
      }
      if(dictionary->hasEntry("RAW::tdc","slot")==true){
         RAW__tdc_slot = reader.getBranch<int8_t>    ("RAW::tdc","slot");
         tree->Branch("RAW__tdc_slot",&vec_RAW__tdc_slot);
      }
   }
   hipo::node<int16_t>   *RAW__vtp_channel;
   std::vector<Short_t>   vec_RAW__vtp_channel;
   hipo::node<int8_t>    *RAW__vtp_crate;
   std::vector<Char_t>   vec_RAW__vtp_crate;
   hipo::node<int8_t>    *RAW__vtp_slot;
   std::vector<Char_t>   vec_RAW__vtp_slot;
   hipo::node<int32_t>   *RAW__vtp_word;
   std::vector<Int_t>   vec_RAW__vtp_word;
   if(dictionary->hasSchema("RAW::vtp")==true){
      if(dictionary->hasEntry("RAW::vtp","channel")==true){
         RAW__vtp_channel = reader.getBranch<int16_t>   ("RAW::vtp","channel");
         tree->Branch("RAW__vtp_channel",&vec_RAW__vtp_channel);
      }
      if(dictionary->hasEntry("RAW::vtp","crate")==true){
         RAW__vtp_crate = reader.getBranch<int8_t>    ("RAW::vtp","crate");
         tree->Branch("RAW__vtp_crate",&vec_RAW__vtp_crate);
      }
      if(dictionary->hasEntry("RAW::vtp","slot")==true){
         RAW__vtp_slot = reader.getBranch<int8_t>    ("RAW::vtp","slot");
         tree->Branch("RAW__vtp_slot",&vec_RAW__vtp_slot);
      }
      if(dictionary->hasEntry("RAW::vtp","word")==true){
         RAW__vtp_word = reader.getBranch<int32_t>   ("RAW::vtp","word");
         tree->Branch("RAW__vtp_word",&vec_RAW__vtp_word);
      }
   }
   hipo::node<float>     *REC__Calorimeter_chi2;
   std::vector<Float_t>   vec_REC__Calorimeter_chi2;
   hipo::node<int8_t>    *REC__Calorimeter_detector;
   std::vector<Char_t>   vec_REC__Calorimeter_detector;
   hipo::node<float>     *REC__Calorimeter_du;
   std::vector<Float_t>   vec_REC__Calorimeter_du;
   hipo::node<float>     *REC__Calorimeter_dv;
   std::vector<Float_t>   vec_REC__Calorimeter_dv;
   hipo::node<float>     *REC__Calorimeter_dw;
   std::vector<Float_t>   vec_REC__Calorimeter_dw;
   hipo::node<float>     *REC__Calorimeter_energy;
   std::vector<Float_t>   vec_REC__Calorimeter_energy;
   hipo::node<float>     *REC__Calorimeter_hx;
   std::vector<Float_t>   vec_REC__Calorimeter_hx;
   hipo::node<float>     *REC__Calorimeter_hy;
   std::vector<Float_t>   vec_REC__Calorimeter_hy;
   hipo::node<float>     *REC__Calorimeter_hz;
   std::vector<Float_t>   vec_REC__Calorimeter_hz;
   hipo::node<int16_t>   *REC__Calorimeter_index;
   std::vector<Short_t>   vec_REC__Calorimeter_index;
   hipo::node<int8_t>    *REC__Calorimeter_layer;
   std::vector<Char_t>   vec_REC__Calorimeter_layer;
   hipo::node<float>     *REC__Calorimeter_lu;
   std::vector<Float_t>   vec_REC__Calorimeter_lu;
   hipo::node<float>     *REC__Calorimeter_lv;
   std::vector<Float_t>   vec_REC__Calorimeter_lv;
   hipo::node<float>     *REC__Calorimeter_lw;
   std::vector<Float_t>   vec_REC__Calorimeter_lw;
   hipo::node<float>     *REC__Calorimeter_m2u;
   std::vector<Float_t>   vec_REC__Calorimeter_m2u;
   hipo::node<float>     *REC__Calorimeter_m2v;
   std::vector<Float_t>   vec_REC__Calorimeter_m2v;
   hipo::node<float>     *REC__Calorimeter_m2w;
   std::vector<Float_t>   vec_REC__Calorimeter_m2w;
   hipo::node<float>     *REC__Calorimeter_m3u;
   std::vector<Float_t>   vec_REC__Calorimeter_m3u;
   hipo::node<float>     *REC__Calorimeter_m3v;
   std::vector<Float_t>   vec_REC__Calorimeter_m3v;
   hipo::node<float>     *REC__Calorimeter_m3w;
   std::vector<Float_t>   vec_REC__Calorimeter_m3w;
   hipo::node<float>     *REC__Calorimeter_path;
   std::vector<Float_t>   vec_REC__Calorimeter_path;
   hipo::node<int16_t>   *REC__Calorimeter_pindex;
   std::vector<Short_t>   vec_REC__Calorimeter_pindex;
   hipo::node<int8_t>    *REC__Calorimeter_sector;
   std::vector<Char_t>   vec_REC__Calorimeter_sector;
   hipo::node<int16_t>   *REC__Calorimeter_status;
   std::vector<Short_t>   vec_REC__Calorimeter_status;
   hipo::node<float>     *REC__Calorimeter_time;
   std::vector<Float_t>   vec_REC__Calorimeter_time;
   hipo::node<float>     *REC__Calorimeter_x;
   std::vector<Float_t>   vec_REC__Calorimeter_x;
   hipo::node<float>     *REC__Calorimeter_y;
   std::vector<Float_t>   vec_REC__Calorimeter_y;
   hipo::node<float>     *REC__Calorimeter_z;
   std::vector<Float_t>   vec_REC__Calorimeter_z;
   if(dictionary->hasSchema("REC::Calorimeter")==true){
      if(dictionary->hasEntry("REC::Calorimeter","chi2")==true){
         REC__Calorimeter_chi2 = reader.getBranch<float>     ("REC::Calorimeter","chi2");
         tree->Branch("REC__Calorimeter_chi2",&vec_REC__Calorimeter_chi2);
      }
      if(dictionary->hasEntry("REC::Calorimeter","detector")==true){
         REC__Calorimeter_detector = reader.getBranch<int8_t>    ("REC::Calorimeter","detector");
         tree->Branch("REC__Calorimeter_detector",&vec_REC__Calorimeter_detector);
      }
      if(dictionary->hasEntry("REC::Calorimeter","du")==true){
         REC__Calorimeter_du = reader.getBranch<float>     ("REC::Calorimeter","du");
         tree->Branch("REC__Calorimeter_du",&vec_REC__Calorimeter_du);
      }
      if(dictionary->hasEntry("REC::Calorimeter","dv")==true){
         REC__Calorimeter_dv = reader.getBranch<float>     ("REC::Calorimeter","dv");
         tree->Branch("REC__Calorimeter_dv",&vec_REC__Calorimeter_dv);
      }
      if(dictionary->hasEntry("REC::Calorimeter","dw")==true){
         REC__Calorimeter_dw = reader.getBranch<float>     ("REC::Calorimeter","dw");
         tree->Branch("REC__Calorimeter_dw",&vec_REC__Calorimeter_dw);
      }
      if(dictionary->hasEntry("REC::Calorimeter","energy")==true){
         REC__Calorimeter_energy = reader.getBranch<float>     ("REC::Calorimeter","energy");
         tree->Branch("REC__Calorimeter_energy",&vec_REC__Calorimeter_energy);
      }
      if(dictionary->hasEntry("REC::Calorimeter","hx")==true){
         REC__Calorimeter_hx = reader.getBranch<float>     ("REC::Calorimeter","hx");
         tree->Branch("REC__Calorimeter_hx",&vec_REC__Calorimeter_hx);
      }
      if(dictionary->hasEntry("REC::Calorimeter","hy")==true){
         REC__Calorimeter_hy = reader.getBranch<float>     ("REC::Calorimeter","hy");
         tree->Branch("REC__Calorimeter_hy",&vec_REC__Calorimeter_hy);
      }
      if(dictionary->hasEntry("REC::Calorimeter","hz")==true){
         REC__Calorimeter_hz = reader.getBranch<float>     ("REC::Calorimeter","hz");
         tree->Branch("REC__Calorimeter_hz",&vec_REC__Calorimeter_hz);
      }
      if(dictionary->hasEntry("REC::Calorimeter","index")==true){
         REC__Calorimeter_index = reader.getBranch<int16_t>   ("REC::Calorimeter","index");
         tree->Branch("REC__Calorimeter_index",&vec_REC__Calorimeter_index);
      }
      if(dictionary->hasEntry("REC::Calorimeter","layer")==true){
         REC__Calorimeter_layer = reader.getBranch<int8_t>    ("REC::Calorimeter","layer");
         tree->Branch("REC__Calorimeter_layer",&vec_REC__Calorimeter_layer);
      }
      if(dictionary->hasEntry("REC::Calorimeter","lu")==true){
         REC__Calorimeter_lu = reader.getBranch<float>     ("REC::Calorimeter","lu");
         tree->Branch("REC__Calorimeter_lu",&vec_REC__Calorimeter_lu);
      }
      if(dictionary->hasEntry("REC::Calorimeter","lv")==true){
         REC__Calorimeter_lv = reader.getBranch<float>     ("REC::Calorimeter","lv");
         tree->Branch("REC__Calorimeter_lv",&vec_REC__Calorimeter_lv);
      }
      if(dictionary->hasEntry("REC::Calorimeter","lw")==true){
         REC__Calorimeter_lw = reader.getBranch<float>     ("REC::Calorimeter","lw");
         tree->Branch("REC__Calorimeter_lw",&vec_REC__Calorimeter_lw);
      }
      if(dictionary->hasEntry("REC::Calorimeter","m2u")==true){
         REC__Calorimeter_m2u = reader.getBranch<float>     ("REC::Calorimeter","m2u");
         tree->Branch("REC__Calorimeter_m2u",&vec_REC__Calorimeter_m2u);
      }
      if(dictionary->hasEntry("REC::Calorimeter","m2v")==true){
         REC__Calorimeter_m2v = reader.getBranch<float>     ("REC::Calorimeter","m2v");
         tree->Branch("REC__Calorimeter_m2v",&vec_REC__Calorimeter_m2v);
      }
      if(dictionary->hasEntry("REC::Calorimeter","m2w")==true){
         REC__Calorimeter_m2w = reader.getBranch<float>     ("REC::Calorimeter","m2w");
         tree->Branch("REC__Calorimeter_m2w",&vec_REC__Calorimeter_m2w);
      }
      if(dictionary->hasEntry("REC::Calorimeter","m3u")==true){
         REC__Calorimeter_m3u = reader.getBranch<float>     ("REC::Calorimeter","m3u");
         tree->Branch("REC__Calorimeter_m3u",&vec_REC__Calorimeter_m3u);
      }
      if(dictionary->hasEntry("REC::Calorimeter","m3v")==true){
         REC__Calorimeter_m3v = reader.getBranch<float>     ("REC::Calorimeter","m3v");
         tree->Branch("REC__Calorimeter_m3v",&vec_REC__Calorimeter_m3v);
      }
      if(dictionary->hasEntry("REC::Calorimeter","m3w")==true){
         REC__Calorimeter_m3w = reader.getBranch<float>     ("REC::Calorimeter","m3w");
         tree->Branch("REC__Calorimeter_m3w",&vec_REC__Calorimeter_m3w);
      }
      if(dictionary->hasEntry("REC::Calorimeter","path")==true){
         REC__Calorimeter_path = reader.getBranch<float>     ("REC::Calorimeter","path");
         tree->Branch("REC__Calorimeter_path",&vec_REC__Calorimeter_path);
      }
      if(dictionary->hasEntry("REC::Calorimeter","pindex")==true){
         REC__Calorimeter_pindex = reader.getBranch<int16_t>   ("REC::Calorimeter","pindex");
         tree->Branch("REC__Calorimeter_pindex",&vec_REC__Calorimeter_pindex);
      }
      if(dictionary->hasEntry("REC::Calorimeter","sector")==true){
         REC__Calorimeter_sector = reader.getBranch<int8_t>    ("REC::Calorimeter","sector");
         tree->Branch("REC__Calorimeter_sector",&vec_REC__Calorimeter_sector);
      }
      if(dictionary->hasEntry("REC::Calorimeter","status")==true){
         REC__Calorimeter_status = reader.getBranch<int16_t>   ("REC::Calorimeter","status");
         tree->Branch("REC__Calorimeter_status",&vec_REC__Calorimeter_status);
      }
      if(dictionary->hasEntry("REC::Calorimeter","time")==true){
         REC__Calorimeter_time = reader.getBranch<float>     ("REC::Calorimeter","time");
         tree->Branch("REC__Calorimeter_time",&vec_REC__Calorimeter_time);
      }
      if(dictionary->hasEntry("REC::Calorimeter","x")==true){
         REC__Calorimeter_x = reader.getBranch<float>     ("REC::Calorimeter","x");
         tree->Branch("REC__Calorimeter_x",&vec_REC__Calorimeter_x);
      }
      if(dictionary->hasEntry("REC::Calorimeter","y")==true){
         REC__Calorimeter_y = reader.getBranch<float>     ("REC::Calorimeter","y");
         tree->Branch("REC__Calorimeter_y",&vec_REC__Calorimeter_y);
      }
      if(dictionary->hasEntry("REC::Calorimeter","z")==true){
         REC__Calorimeter_z = reader.getBranch<float>     ("REC::Calorimeter","z");
         tree->Branch("REC__Calorimeter_z",&vec_REC__Calorimeter_z);
      }
   }
   hipo::node<float>     *REC__Cherenkov_chi2;
   std::vector<Float_t>   vec_REC__Cherenkov_chi2;
   hipo::node<int8_t>    *REC__Cherenkov_detector;
   std::vector<Char_t>   vec_REC__Cherenkov_detector;
   hipo::node<float>     *REC__Cherenkov_dphi;
   std::vector<Float_t>   vec_REC__Cherenkov_dphi;
   hipo::node<float>     *REC__Cherenkov_dtheta;
   std::vector<Float_t>   vec_REC__Cherenkov_dtheta;
   hipo::node<int16_t>   *REC__Cherenkov_index;
   std::vector<Short_t>   vec_REC__Cherenkov_index;
   hipo::node<float>     *REC__Cherenkov_nphe;
   std::vector<Float_t>   vec_REC__Cherenkov_nphe;
   hipo::node<float>     *REC__Cherenkov_path;
   std::vector<Float_t>   vec_REC__Cherenkov_path;
   hipo::node<float>     *REC__Cherenkov_phi;
   std::vector<Float_t>   vec_REC__Cherenkov_phi;
   hipo::node<int16_t>   *REC__Cherenkov_pindex;
   std::vector<Short_t>   vec_REC__Cherenkov_pindex;
   hipo::node<int8_t>    *REC__Cherenkov_sector;
   std::vector<Char_t>   vec_REC__Cherenkov_sector;
   hipo::node<int16_t>   *REC__Cherenkov_status;
   std::vector<Short_t>   vec_REC__Cherenkov_status;
   hipo::node<float>     *REC__Cherenkov_theta;
   std::vector<Float_t>   vec_REC__Cherenkov_theta;
   hipo::node<float>     *REC__Cherenkov_time;
   std::vector<Float_t>   vec_REC__Cherenkov_time;
   hipo::node<float>     *REC__Cherenkov_x;
   std::vector<Float_t>   vec_REC__Cherenkov_x;
   hipo::node<float>     *REC__Cherenkov_y;
   std::vector<Float_t>   vec_REC__Cherenkov_y;
   hipo::node<float>     *REC__Cherenkov_z;
   std::vector<Float_t>   vec_REC__Cherenkov_z;
   if(dictionary->hasSchema("REC::Cherenkov")==true){
      if(dictionary->hasEntry("REC::Cherenkov","chi2")==true){
         REC__Cherenkov_chi2 = reader.getBranch<float>     ("REC::Cherenkov","chi2");
         tree->Branch("REC__Cherenkov_chi2",&vec_REC__Cherenkov_chi2);
      }
      if(dictionary->hasEntry("REC::Cherenkov","detector")==true){
         REC__Cherenkov_detector = reader.getBranch<int8_t>    ("REC::Cherenkov","detector");
         tree->Branch("REC__Cherenkov_detector",&vec_REC__Cherenkov_detector);
      }
      if(dictionary->hasEntry("REC::Cherenkov","dphi")==true){
         REC__Cherenkov_dphi = reader.getBranch<float>     ("REC::Cherenkov","dphi");
         tree->Branch("REC__Cherenkov_dphi",&vec_REC__Cherenkov_dphi);
      }
      if(dictionary->hasEntry("REC::Cherenkov","dtheta")==true){
         REC__Cherenkov_dtheta = reader.getBranch<float>     ("REC::Cherenkov","dtheta");
         tree->Branch("REC__Cherenkov_dtheta",&vec_REC__Cherenkov_dtheta);
      }
      if(dictionary->hasEntry("REC::Cherenkov","index")==true){
         REC__Cherenkov_index = reader.getBranch<int16_t>   ("REC::Cherenkov","index");
         tree->Branch("REC__Cherenkov_index",&vec_REC__Cherenkov_index);
      }
      if(dictionary->hasEntry("REC::Cherenkov","nphe")==true){
         REC__Cherenkov_nphe = reader.getBranch<float>     ("REC::Cherenkov","nphe");
         tree->Branch("REC__Cherenkov_nphe",&vec_REC__Cherenkov_nphe);
      }
      if(dictionary->hasEntry("REC::Cherenkov","path")==true){
         REC__Cherenkov_path = reader.getBranch<float>     ("REC::Cherenkov","path");
         tree->Branch("REC__Cherenkov_path",&vec_REC__Cherenkov_path);
      }
      if(dictionary->hasEntry("REC::Cherenkov","phi")==true){
         REC__Cherenkov_phi = reader.getBranch<float>     ("REC::Cherenkov","phi");
         tree->Branch("REC__Cherenkov_phi",&vec_REC__Cherenkov_phi);
      }
      if(dictionary->hasEntry("REC::Cherenkov","pindex")==true){
         REC__Cherenkov_pindex = reader.getBranch<int16_t>   ("REC::Cherenkov","pindex");
         tree->Branch("REC__Cherenkov_pindex",&vec_REC__Cherenkov_pindex);
      }
      if(dictionary->hasEntry("REC::Cherenkov","sector")==true){
         REC__Cherenkov_sector = reader.getBranch<int8_t>    ("REC::Cherenkov","sector");
         tree->Branch("REC__Cherenkov_sector",&vec_REC__Cherenkov_sector);
      }
      if(dictionary->hasEntry("REC::Cherenkov","status")==true){
         REC__Cherenkov_status = reader.getBranch<int16_t>   ("REC::Cherenkov","status");
         tree->Branch("REC__Cherenkov_status",&vec_REC__Cherenkov_status);
      }
      if(dictionary->hasEntry("REC::Cherenkov","theta")==true){
         REC__Cherenkov_theta = reader.getBranch<float>     ("REC::Cherenkov","theta");
         tree->Branch("REC__Cherenkov_theta",&vec_REC__Cherenkov_theta);
      }
      if(dictionary->hasEntry("REC::Cherenkov","time")==true){
         REC__Cherenkov_time = reader.getBranch<float>     ("REC::Cherenkov","time");
         tree->Branch("REC__Cherenkov_time",&vec_REC__Cherenkov_time);
      }
      if(dictionary->hasEntry("REC::Cherenkov","x")==true){
         REC__Cherenkov_x = reader.getBranch<float>     ("REC::Cherenkov","x");
         tree->Branch("REC__Cherenkov_x",&vec_REC__Cherenkov_x);
      }
      if(dictionary->hasEntry("REC::Cherenkov","y")==true){
         REC__Cherenkov_y = reader.getBranch<float>     ("REC::Cherenkov","y");
         tree->Branch("REC__Cherenkov_y",&vec_REC__Cherenkov_y);
      }
      if(dictionary->hasEntry("REC::Cherenkov","z")==true){
         REC__Cherenkov_z = reader.getBranch<float>     ("REC::Cherenkov","z");
         tree->Branch("REC__Cherenkov_z",&vec_REC__Cherenkov_z);
      }
   }
   hipo::node<float>     *REC__CovMat_C11;
   std::vector<Float_t>   vec_REC__CovMat_C11;
   hipo::node<float>     *REC__CovMat_C12;
   std::vector<Float_t>   vec_REC__CovMat_C12;
   hipo::node<float>     *REC__CovMat_C13;
   std::vector<Float_t>   vec_REC__CovMat_C13;
   hipo::node<float>     *REC__CovMat_C14;
   std::vector<Float_t>   vec_REC__CovMat_C14;
   hipo::node<float>     *REC__CovMat_C15;
   std::vector<Float_t>   vec_REC__CovMat_C15;
   hipo::node<float>     *REC__CovMat_C22;
   std::vector<Float_t>   vec_REC__CovMat_C22;
   hipo::node<float>     *REC__CovMat_C23;
   std::vector<Float_t>   vec_REC__CovMat_C23;
   hipo::node<float>     *REC__CovMat_C24;
   std::vector<Float_t>   vec_REC__CovMat_C24;
   hipo::node<float>     *REC__CovMat_C25;
   std::vector<Float_t>   vec_REC__CovMat_C25;
   hipo::node<float>     *REC__CovMat_C33;
   std::vector<Float_t>   vec_REC__CovMat_C33;
   hipo::node<float>     *REC__CovMat_C34;
   std::vector<Float_t>   vec_REC__CovMat_C34;
   hipo::node<float>     *REC__CovMat_C35;
   std::vector<Float_t>   vec_REC__CovMat_C35;
   hipo::node<float>     *REC__CovMat_C44;
   std::vector<Float_t>   vec_REC__CovMat_C44;
   hipo::node<float>     *REC__CovMat_C45;
   std::vector<Float_t>   vec_REC__CovMat_C45;
   hipo::node<float>     *REC__CovMat_C55;
   std::vector<Float_t>   vec_REC__CovMat_C55;
   hipo::node<int16_t>   *REC__CovMat_index;
   std::vector<Short_t>   vec_REC__CovMat_index;
   hipo::node<int16_t>   *REC__CovMat_pindex;
   std::vector<Short_t>   vec_REC__CovMat_pindex;
   if(dictionary->hasSchema("REC::CovMat")==true){
      if(dictionary->hasEntry("REC::CovMat","C11")==true){
         REC__CovMat_C11 = reader.getBranch<float>     ("REC::CovMat","C11");
         tree->Branch("REC__CovMat_C11",&vec_REC__CovMat_C11);
      }
      if(dictionary->hasEntry("REC::CovMat","C12")==true){
         REC__CovMat_C12 = reader.getBranch<float>     ("REC::CovMat","C12");
         tree->Branch("REC__CovMat_C12",&vec_REC__CovMat_C12);
      }
      if(dictionary->hasEntry("REC::CovMat","C13")==true){
         REC__CovMat_C13 = reader.getBranch<float>     ("REC::CovMat","C13");
         tree->Branch("REC__CovMat_C13",&vec_REC__CovMat_C13);
      }
      if(dictionary->hasEntry("REC::CovMat","C14")==true){
         REC__CovMat_C14 = reader.getBranch<float>     ("REC::CovMat","C14");
         tree->Branch("REC__CovMat_C14",&vec_REC__CovMat_C14);
      }
      if(dictionary->hasEntry("REC::CovMat","C15")==true){
         REC__CovMat_C15 = reader.getBranch<float>     ("REC::CovMat","C15");
         tree->Branch("REC__CovMat_C15",&vec_REC__CovMat_C15);
      }
      if(dictionary->hasEntry("REC::CovMat","C22")==true){
         REC__CovMat_C22 = reader.getBranch<float>     ("REC::CovMat","C22");
         tree->Branch("REC__CovMat_C22",&vec_REC__CovMat_C22);
      }
      if(dictionary->hasEntry("REC::CovMat","C23")==true){
         REC__CovMat_C23 = reader.getBranch<float>     ("REC::CovMat","C23");
         tree->Branch("REC__CovMat_C23",&vec_REC__CovMat_C23);
      }
      if(dictionary->hasEntry("REC::CovMat","C24")==true){
         REC__CovMat_C24 = reader.getBranch<float>     ("REC::CovMat","C24");
         tree->Branch("REC__CovMat_C24",&vec_REC__CovMat_C24);
      }
      if(dictionary->hasEntry("REC::CovMat","C25")==true){
         REC__CovMat_C25 = reader.getBranch<float>     ("REC::CovMat","C25");
         tree->Branch("REC__CovMat_C25",&vec_REC__CovMat_C25);
      }
      if(dictionary->hasEntry("REC::CovMat","C33")==true){
         REC__CovMat_C33 = reader.getBranch<float>     ("REC::CovMat","C33");
         tree->Branch("REC__CovMat_C33",&vec_REC__CovMat_C33);
      }
      if(dictionary->hasEntry("REC::CovMat","C34")==true){
         REC__CovMat_C34 = reader.getBranch<float>     ("REC::CovMat","C34");
         tree->Branch("REC__CovMat_C34",&vec_REC__CovMat_C34);
      }
      if(dictionary->hasEntry("REC::CovMat","C35")==true){
         REC__CovMat_C35 = reader.getBranch<float>     ("REC::CovMat","C35");
         tree->Branch("REC__CovMat_C35",&vec_REC__CovMat_C35);
      }
      if(dictionary->hasEntry("REC::CovMat","C44")==true){
         REC__CovMat_C44 = reader.getBranch<float>     ("REC::CovMat","C44");
         tree->Branch("REC__CovMat_C44",&vec_REC__CovMat_C44);
      }
      if(dictionary->hasEntry("REC::CovMat","C45")==true){
         REC__CovMat_C45 = reader.getBranch<float>     ("REC::CovMat","C45");
         tree->Branch("REC__CovMat_C45",&vec_REC__CovMat_C45);
      }
      if(dictionary->hasEntry("REC::CovMat","C55")==true){
         REC__CovMat_C55 = reader.getBranch<float>     ("REC::CovMat","C55");
         tree->Branch("REC__CovMat_C55",&vec_REC__CovMat_C55);
      }
      if(dictionary->hasEntry("REC::CovMat","index")==true){
         REC__CovMat_index = reader.getBranch<int16_t>   ("REC::CovMat","index");
         tree->Branch("REC__CovMat_index",&vec_REC__CovMat_index);
      }
      if(dictionary->hasEntry("REC::CovMat","pindex")==true){
         REC__CovMat_pindex = reader.getBranch<int16_t>   ("REC::CovMat","pindex");
         tree->Branch("REC__CovMat_pindex",&vec_REC__CovMat_pindex);
      }
   }
   hipo::node<float>     *REC__Event_BCG;
   std::vector<Float_t>   vec_REC__Event_BCG;
   hipo::node<float>     *REC__Event_EVNTime;
   std::vector<Float_t>   vec_REC__Event_EVNTime;
   hipo::node<int16_t>   *REC__Event_EvCAT;
   std::vector<Short_t>   vec_REC__Event_EvCAT;
   hipo::node<int8_t>    *REC__Event_Helic;
   std::vector<Char_t>   vec_REC__Event_Helic;
   hipo::node<double>    *REC__Event_LT;
   std::vector<Double_t>   vec_REC__Event_LT;
   hipo::node<int32_t>   *REC__Event_NEVENT;
   std::vector<Int_t>   vec_REC__Event_NEVENT;
   hipo::node<int16_t>   *REC__Event_NPGP;
   std::vector<Short_t>   vec_REC__Event_NPGP;
   hipo::node<int32_t>   *REC__Event_NRUN;
   std::vector<Int_t>   vec_REC__Event_NRUN;
   hipo::node<float>     *REC__Event_PTIME;
   std::vector<Float_t>   vec_REC__Event_PTIME;
   hipo::node<float>     *REC__Event_RFTime;
   std::vector<Float_t>   vec_REC__Event_RFTime;
   hipo::node<float>     *REC__Event_STTime;
   std::vector<Float_t>   vec_REC__Event_STTime;
   hipo::node<int64_t>   *REC__Event_TRG;
   std::vector<Long64_t>   vec_REC__Event_TRG;
   hipo::node<int8_t>    *REC__Event_TYPE;
   std::vector<Char_t>   vec_REC__Event_TYPE;
   if(dictionary->hasSchema("REC::Event")==true){
      if(dictionary->hasEntry("REC::Event","BCG")==true){
         REC__Event_BCG = reader.getBranch<float>     ("REC::Event","BCG");
         tree->Branch("REC__Event_BCG",&vec_REC__Event_BCG);
      }
      if(dictionary->hasEntry("REC::Event","EVNTime")==true){
         REC__Event_EVNTime = reader.getBranch<float>     ("REC::Event","EVNTime");
         tree->Branch("REC__Event_EVNTime",&vec_REC__Event_EVNTime);
      }
      if(dictionary->hasEntry("REC::Event","EvCAT")==true){
         REC__Event_EvCAT = reader.getBranch<int16_t>   ("REC::Event","EvCAT");
         tree->Branch("REC__Event_EvCAT",&vec_REC__Event_EvCAT);
      }
      if(dictionary->hasEntry("REC::Event","Helic")==true){
         REC__Event_Helic = reader.getBranch<int8_t>    ("REC::Event","Helic");
         tree->Branch("REC__Event_Helic",&vec_REC__Event_Helic);
      }
      if(dictionary->hasEntry("REC::Event","LT")==true){
         REC__Event_LT = reader.getBranch<double>    ("REC::Event","LT");
         tree->Branch("REC__Event_LT",&vec_REC__Event_LT);
      }
      if(dictionary->hasEntry("REC::Event","NEVENT")==true){
         REC__Event_NEVENT = reader.getBranch<int32_t>   ("REC::Event","NEVENT");
         tree->Branch("REC__Event_NEVENT",&vec_REC__Event_NEVENT);
      }
      if(dictionary->hasEntry("REC::Event","NPGP")==true){
         REC__Event_NPGP = reader.getBranch<int16_t>   ("REC::Event","NPGP");
         tree->Branch("REC__Event_NPGP",&vec_REC__Event_NPGP);
      }
      if(dictionary->hasEntry("REC::Event","NRUN")==true){
         REC__Event_NRUN = reader.getBranch<int32_t>   ("REC::Event","NRUN");
         tree->Branch("REC__Event_NRUN",&vec_REC__Event_NRUN);
      }
      if(dictionary->hasEntry("REC::Event","PTIME")==true){
         REC__Event_PTIME = reader.getBranch<float>     ("REC::Event","PTIME");
         tree->Branch("REC__Event_PTIME",&vec_REC__Event_PTIME);
      }
      if(dictionary->hasEntry("REC::Event","RFTime")==true){
         REC__Event_RFTime = reader.getBranch<float>     ("REC::Event","RFTime");
         tree->Branch("REC__Event_RFTime",&vec_REC__Event_RFTime);
      }
      if(dictionary->hasEntry("REC::Event","STTime")==true){
         REC__Event_STTime = reader.getBranch<float>     ("REC::Event","STTime");
         tree->Branch("REC__Event_STTime",&vec_REC__Event_STTime);
      }
      if(dictionary->hasEntry("REC::Event","TRG")==true){
         REC__Event_TRG = reader.getBranch<int64_t>   ("REC::Event","TRG");
         tree->Branch("REC__Event_TRG",&vec_REC__Event_TRG);
      }
      if(dictionary->hasEntry("REC::Event","TYPE")==true){
         REC__Event_TYPE = reader.getBranch<int8_t>    ("REC::Event","TYPE");
         tree->Branch("REC__Event_TYPE",&vec_REC__Event_TYPE);
      }
   }
   hipo::node<float>     *REC__ForwardTagger_chi2;
   std::vector<Float_t>   vec_REC__ForwardTagger_chi2;
   hipo::node<int8_t>    *REC__ForwardTagger_detector;
   std::vector<Char_t>   vec_REC__ForwardTagger_detector;
   hipo::node<float>     *REC__ForwardTagger_dx;
   std::vector<Float_t>   vec_REC__ForwardTagger_dx;
   hipo::node<float>     *REC__ForwardTagger_dy;
   std::vector<Float_t>   vec_REC__ForwardTagger_dy;
   hipo::node<float>     *REC__ForwardTagger_energy;
   std::vector<Float_t>   vec_REC__ForwardTagger_energy;
   hipo::node<int16_t>   *REC__ForwardTagger_index;
   std::vector<Short_t>   vec_REC__ForwardTagger_index;
   hipo::node<float>     *REC__ForwardTagger_path;
   std::vector<Float_t>   vec_REC__ForwardTagger_path;
   hipo::node<int16_t>   *REC__ForwardTagger_pindex;
   std::vector<Short_t>   vec_REC__ForwardTagger_pindex;
   hipo::node<float>     *REC__ForwardTagger_radius;
   std::vector<Float_t>   vec_REC__ForwardTagger_radius;
   hipo::node<int16_t>   *REC__ForwardTagger_size;
   std::vector<Short_t>   vec_REC__ForwardTagger_size;
   hipo::node<int16_t>   *REC__ForwardTagger_status;
   std::vector<Short_t>   vec_REC__ForwardTagger_status;
   hipo::node<float>     *REC__ForwardTagger_time;
   std::vector<Float_t>   vec_REC__ForwardTagger_time;
   hipo::node<float>     *REC__ForwardTagger_x;
   std::vector<Float_t>   vec_REC__ForwardTagger_x;
   hipo::node<float>     *REC__ForwardTagger_y;
   std::vector<Float_t>   vec_REC__ForwardTagger_y;
   hipo::node<float>     *REC__ForwardTagger_z;
   std::vector<Float_t>   vec_REC__ForwardTagger_z;
   if(dictionary->hasSchema("REC::ForwardTagger")==true){
      if(dictionary->hasEntry("REC::ForwardTagger","chi2")==true){
         REC__ForwardTagger_chi2 = reader.getBranch<float>     ("REC::ForwardTagger","chi2");
         tree->Branch("REC__ForwardTagger_chi2",&vec_REC__ForwardTagger_chi2);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","detector")==true){
         REC__ForwardTagger_detector = reader.getBranch<int8_t>    ("REC::ForwardTagger","detector");
         tree->Branch("REC__ForwardTagger_detector",&vec_REC__ForwardTagger_detector);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","dx")==true){
         REC__ForwardTagger_dx = reader.getBranch<float>     ("REC::ForwardTagger","dx");
         tree->Branch("REC__ForwardTagger_dx",&vec_REC__ForwardTagger_dx);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","dy")==true){
         REC__ForwardTagger_dy = reader.getBranch<float>     ("REC::ForwardTagger","dy");
         tree->Branch("REC__ForwardTagger_dy",&vec_REC__ForwardTagger_dy);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","energy")==true){
         REC__ForwardTagger_energy = reader.getBranch<float>     ("REC::ForwardTagger","energy");
         tree->Branch("REC__ForwardTagger_energy",&vec_REC__ForwardTagger_energy);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","index")==true){
         REC__ForwardTagger_index = reader.getBranch<int16_t>   ("REC::ForwardTagger","index");
         tree->Branch("REC__ForwardTagger_index",&vec_REC__ForwardTagger_index);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","path")==true){
         REC__ForwardTagger_path = reader.getBranch<float>     ("REC::ForwardTagger","path");
         tree->Branch("REC__ForwardTagger_path",&vec_REC__ForwardTagger_path);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","pindex")==true){
         REC__ForwardTagger_pindex = reader.getBranch<int16_t>   ("REC::ForwardTagger","pindex");
         tree->Branch("REC__ForwardTagger_pindex",&vec_REC__ForwardTagger_pindex);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","radius")==true){
         REC__ForwardTagger_radius = reader.getBranch<float>     ("REC::ForwardTagger","radius");
         tree->Branch("REC__ForwardTagger_radius",&vec_REC__ForwardTagger_radius);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","size")==true){
         REC__ForwardTagger_size = reader.getBranch<int16_t>   ("REC::ForwardTagger","size");
         tree->Branch("REC__ForwardTagger_size",&vec_REC__ForwardTagger_size);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","status")==true){
         REC__ForwardTagger_status = reader.getBranch<int16_t>   ("REC::ForwardTagger","status");
         tree->Branch("REC__ForwardTagger_status",&vec_REC__ForwardTagger_status);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","time")==true){
         REC__ForwardTagger_time = reader.getBranch<float>     ("REC::ForwardTagger","time");
         tree->Branch("REC__ForwardTagger_time",&vec_REC__ForwardTagger_time);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","x")==true){
         REC__ForwardTagger_x = reader.getBranch<float>     ("REC::ForwardTagger","x");
         tree->Branch("REC__ForwardTagger_x",&vec_REC__ForwardTagger_x);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","y")==true){
         REC__ForwardTagger_y = reader.getBranch<float>     ("REC::ForwardTagger","y");
         tree->Branch("REC__ForwardTagger_y",&vec_REC__ForwardTagger_y);
      }
      if(dictionary->hasEntry("REC::ForwardTagger","z")==true){
         REC__ForwardTagger_z = reader.getBranch<float>     ("REC::ForwardTagger","z");
         tree->Branch("REC__ForwardTagger_z",&vec_REC__ForwardTagger_z);
      }
   }
   hipo::node<float>     *REC__Particle_beta;
   std::vector<Float_t>   vec_REC__Particle_beta;
   hipo::node<int8_t>    *REC__Particle_charge;
   std::vector<Char_t>   vec_REC__Particle_charge;
   hipo::node<float>     *REC__Particle_chi2pid;
   std::vector<Float_t>   vec_REC__Particle_chi2pid;
   hipo::node<int32_t>   *REC__Particle_pid;
   std::vector<Int_t>   vec_REC__Particle_pid;
   hipo::node<float>     *REC__Particle_px;
   std::vector<Float_t>   vec_REC__Particle_px;
   hipo::node<float>     *REC__Particle_py;
   std::vector<Float_t>   vec_REC__Particle_py;
   hipo::node<float>     *REC__Particle_pz;
   std::vector<Float_t>   vec_REC__Particle_pz;
   hipo::node<int16_t>   *REC__Particle_status;
   std::vector<Short_t>   vec_REC__Particle_status;
   hipo::node<float>     *REC__Particle_vx;
   std::vector<Float_t>   vec_REC__Particle_vx;
   hipo::node<float>     *REC__Particle_vy;
   std::vector<Float_t>   vec_REC__Particle_vy;
   hipo::node<float>     *REC__Particle_vz;
   std::vector<Float_t>   vec_REC__Particle_vz;
   if(dictionary->hasSchema("REC::Particle")==true){
      if(dictionary->hasEntry("REC::Particle","beta")==true){
         REC__Particle_beta = reader.getBranch<float>     ("REC::Particle","beta");
         tree->Branch("REC__Particle_beta",&vec_REC__Particle_beta);
      }
      if(dictionary->hasEntry("REC::Particle","charge")==true){
         REC__Particle_charge = reader.getBranch<int8_t>    ("REC::Particle","charge");
         tree->Branch("REC__Particle_charge",&vec_REC__Particle_charge);
      }
      if(dictionary->hasEntry("REC::Particle","chi2pid")==true){
         REC__Particle_chi2pid = reader.getBranch<float>     ("REC::Particle","chi2pid");
         tree->Branch("REC__Particle_chi2pid",&vec_REC__Particle_chi2pid);
      }
      if(dictionary->hasEntry("REC::Particle","pid")==true){
         REC__Particle_pid = reader.getBranch<int32_t>   ("REC::Particle","pid");
         tree->Branch("REC__Particle_pid",&vec_REC__Particle_pid);
      }
      if(dictionary->hasEntry("REC::Particle","px")==true){
         REC__Particle_px = reader.getBranch<float>     ("REC::Particle","px");
         tree->Branch("REC__Particle_px",&vec_REC__Particle_px);
      }
      if(dictionary->hasEntry("REC::Particle","py")==true){
         REC__Particle_py = reader.getBranch<float>     ("REC::Particle","py");
         tree->Branch("REC__Particle_py",&vec_REC__Particle_py);
      }
      if(dictionary->hasEntry("REC::Particle","pz")==true){
         REC__Particle_pz = reader.getBranch<float>     ("REC::Particle","pz");
         tree->Branch("REC__Particle_pz",&vec_REC__Particle_pz);
      }
      if(dictionary->hasEntry("REC::Particle","status")==true){
         REC__Particle_status = reader.getBranch<int16_t>   ("REC::Particle","status");
         tree->Branch("REC__Particle_status",&vec_REC__Particle_status);
      }
      if(dictionary->hasEntry("REC::Particle","vx")==true){
         REC__Particle_vx = reader.getBranch<float>     ("REC::Particle","vx");
         tree->Branch("REC__Particle_vx",&vec_REC__Particle_vx);
      }
      if(dictionary->hasEntry("REC::Particle","vy")==true){
         REC__Particle_vy = reader.getBranch<float>     ("REC::Particle","vy");
         tree->Branch("REC__Particle_vy",&vec_REC__Particle_vy);
      }
      if(dictionary->hasEntry("REC::Particle","vz")==true){
         REC__Particle_vz = reader.getBranch<float>     ("REC::Particle","vz");
         tree->Branch("REC__Particle_vz",&vec_REC__Particle_vz);
      }
   }
   hipo::node<float>     *REC__Scintillator_chi2;
   std::vector<Float_t>   vec_REC__Scintillator_chi2;
   hipo::node<int16_t>   *REC__Scintillator_component;
   std::vector<Short_t>   vec_REC__Scintillator_component;
   hipo::node<int8_t>    *REC__Scintillator_detector;
   std::vector<Char_t>   vec_REC__Scintillator_detector;
   hipo::node<float>     *REC__Scintillator_energy;
   std::vector<Float_t>   vec_REC__Scintillator_energy;
   hipo::node<float>     *REC__Scintillator_hx;
   std::vector<Float_t>   vec_REC__Scintillator_hx;
   hipo::node<float>     *REC__Scintillator_hy;
   std::vector<Float_t>   vec_REC__Scintillator_hy;
   hipo::node<float>     *REC__Scintillator_hz;
   std::vector<Float_t>   vec_REC__Scintillator_hz;
   hipo::node<int16_t>   *REC__Scintillator_index;
   std::vector<Short_t>   vec_REC__Scintillator_index;
   hipo::node<int8_t>    *REC__Scintillator_layer;
   std::vector<Char_t>   vec_REC__Scintillator_layer;
   hipo::node<float>     *REC__Scintillator_path;
   std::vector<Float_t>   vec_REC__Scintillator_path;
   hipo::node<int16_t>   *REC__Scintillator_pindex;
   std::vector<Short_t>   vec_REC__Scintillator_pindex;
   hipo::node<int8_t>    *REC__Scintillator_sector;
   std::vector<Char_t>   vec_REC__Scintillator_sector;
   hipo::node<int16_t>   *REC__Scintillator_status;
   std::vector<Short_t>   vec_REC__Scintillator_status;
   hipo::node<float>     *REC__Scintillator_time;
   std::vector<Float_t>   vec_REC__Scintillator_time;
   hipo::node<float>     *REC__Scintillator_x;
   std::vector<Float_t>   vec_REC__Scintillator_x;
   hipo::node<float>     *REC__Scintillator_y;
   std::vector<Float_t>   vec_REC__Scintillator_y;
   hipo::node<float>     *REC__Scintillator_z;
   std::vector<Float_t>   vec_REC__Scintillator_z;
   if(dictionary->hasSchema("REC::Scintillator")==true){
      if(dictionary->hasEntry("REC::Scintillator","chi2")==true){
         REC__Scintillator_chi2 = reader.getBranch<float>     ("REC::Scintillator","chi2");
         tree->Branch("REC__Scintillator_chi2",&vec_REC__Scintillator_chi2);
      }
      if(dictionary->hasEntry("REC::Scintillator","component")==true){
         REC__Scintillator_component = reader.getBranch<int16_t>   ("REC::Scintillator","component");
         tree->Branch("REC__Scintillator_component",&vec_REC__Scintillator_component);
      }
      if(dictionary->hasEntry("REC::Scintillator","detector")==true){
         REC__Scintillator_detector = reader.getBranch<int8_t>    ("REC::Scintillator","detector");
         tree->Branch("REC__Scintillator_detector",&vec_REC__Scintillator_detector);
      }
      if(dictionary->hasEntry("REC::Scintillator","energy")==true){
         REC__Scintillator_energy = reader.getBranch<float>     ("REC::Scintillator","energy");
         tree->Branch("REC__Scintillator_energy",&vec_REC__Scintillator_energy);
      }
      if(dictionary->hasEntry("REC::Scintillator","hx")==true){
         REC__Scintillator_hx = reader.getBranch<float>     ("REC::Scintillator","hx");
         tree->Branch("REC__Scintillator_hx",&vec_REC__Scintillator_hx);
      }
      if(dictionary->hasEntry("REC::Scintillator","hy")==true){
         REC__Scintillator_hy = reader.getBranch<float>     ("REC::Scintillator","hy");
         tree->Branch("REC__Scintillator_hy",&vec_REC__Scintillator_hy);
      }
      if(dictionary->hasEntry("REC::Scintillator","hz")==true){
         REC__Scintillator_hz = reader.getBranch<float>     ("REC::Scintillator","hz");
         tree->Branch("REC__Scintillator_hz",&vec_REC__Scintillator_hz);
      }
      if(dictionary->hasEntry("REC::Scintillator","index")==true){
         REC__Scintillator_index = reader.getBranch<int16_t>   ("REC::Scintillator","index");
         tree->Branch("REC__Scintillator_index",&vec_REC__Scintillator_index);
      }
      if(dictionary->hasEntry("REC::Scintillator","layer")==true){
         REC__Scintillator_layer = reader.getBranch<int8_t>    ("REC::Scintillator","layer");
         tree->Branch("REC__Scintillator_layer",&vec_REC__Scintillator_layer);
      }
      if(dictionary->hasEntry("REC::Scintillator","path")==true){
         REC__Scintillator_path = reader.getBranch<float>     ("REC::Scintillator","path");
         tree->Branch("REC__Scintillator_path",&vec_REC__Scintillator_path);
      }
      if(dictionary->hasEntry("REC::Scintillator","pindex")==true){
         REC__Scintillator_pindex = reader.getBranch<int16_t>   ("REC::Scintillator","pindex");
         tree->Branch("REC__Scintillator_pindex",&vec_REC__Scintillator_pindex);
      }
      if(dictionary->hasEntry("REC::Scintillator","sector")==true){
         REC__Scintillator_sector = reader.getBranch<int8_t>    ("REC::Scintillator","sector");
         tree->Branch("REC__Scintillator_sector",&vec_REC__Scintillator_sector);
      }
      if(dictionary->hasEntry("REC::Scintillator","status")==true){
         REC__Scintillator_status = reader.getBranch<int16_t>   ("REC::Scintillator","status");
         tree->Branch("REC__Scintillator_status",&vec_REC__Scintillator_status);
      }
      if(dictionary->hasEntry("REC::Scintillator","time")==true){
         REC__Scintillator_time = reader.getBranch<float>     ("REC::Scintillator","time");
         tree->Branch("REC__Scintillator_time",&vec_REC__Scintillator_time);
      }
      if(dictionary->hasEntry("REC::Scintillator","x")==true){
         REC__Scintillator_x = reader.getBranch<float>     ("REC::Scintillator","x");
         tree->Branch("REC__Scintillator_x",&vec_REC__Scintillator_x);
      }
      if(dictionary->hasEntry("REC::Scintillator","y")==true){
         REC__Scintillator_y = reader.getBranch<float>     ("REC::Scintillator","y");
         tree->Branch("REC__Scintillator_y",&vec_REC__Scintillator_y);
      }
      if(dictionary->hasEntry("REC::Scintillator","z")==true){
         REC__Scintillator_z = reader.getBranch<float>     ("REC::Scintillator","z");
         tree->Branch("REC__Scintillator_z",&vec_REC__Scintillator_z);
      }
   }
   hipo::node<int16_t>   *REC__Track_NDF;
   std::vector<Short_t>   vec_REC__Track_NDF;
   hipo::node<int16_t>   *REC__Track_NDF_nomm;
   std::vector<Short_t>   vec_REC__Track_NDF_nomm;
   hipo::node<float>     *REC__Track_chi2;
   std::vector<Float_t>   vec_REC__Track_chi2;
   hipo::node<float>     *REC__Track_chi2_nomm;
   std::vector<Float_t>   vec_REC__Track_chi2_nomm;
   hipo::node<int8_t>    *REC__Track_detector;
   std::vector<Char_t>   vec_REC__Track_detector;
   hipo::node<int16_t>   *REC__Track_index;
   std::vector<Short_t>   vec_REC__Track_index;
   hipo::node<int16_t>   *REC__Track_pindex;
   std::vector<Short_t>   vec_REC__Track_pindex;
   hipo::node<float>     *REC__Track_px_nomm;
   std::vector<Float_t>   vec_REC__Track_px_nomm;
   hipo::node<float>     *REC__Track_py_nomm;
   std::vector<Float_t>   vec_REC__Track_py_nomm;
   hipo::node<float>     *REC__Track_pz_nomm;
   std::vector<Float_t>   vec_REC__Track_pz_nomm;
   hipo::node<int8_t>    *REC__Track_q;
   std::vector<Char_t>   vec_REC__Track_q;
   hipo::node<int8_t>    *REC__Track_sector;
   std::vector<Char_t>   vec_REC__Track_sector;
   hipo::node<int16_t>   *REC__Track_status;
   std::vector<Short_t>   vec_REC__Track_status;
   hipo::node<float>     *REC__Track_vx_nomm;
   std::vector<Float_t>   vec_REC__Track_vx_nomm;
   hipo::node<float>     *REC__Track_vy_nomm;
   std::vector<Float_t>   vec_REC__Track_vy_nomm;
   hipo::node<float>     *REC__Track_vz_nomm;
   std::vector<Float_t>   vec_REC__Track_vz_nomm;
   if(dictionary->hasSchema("REC::Track")==true){
      if(dictionary->hasEntry("REC::Track","NDF")==true){
         REC__Track_NDF = reader.getBranch<int16_t>   ("REC::Track","NDF");
         tree->Branch("REC__Track_NDF",&vec_REC__Track_NDF);
      }
      if(dictionary->hasEntry("REC::Track","NDF_nomm")==true){
         REC__Track_NDF_nomm = reader.getBranch<int16_t>   ("REC::Track","NDF_nomm");
         tree->Branch("REC__Track_NDF_nomm",&vec_REC__Track_NDF_nomm);
      }
      if(dictionary->hasEntry("REC::Track","chi2")==true){
         REC__Track_chi2 = reader.getBranch<float>     ("REC::Track","chi2");
         tree->Branch("REC__Track_chi2",&vec_REC__Track_chi2);
      }
      if(dictionary->hasEntry("REC::Track","chi2_nomm")==true){
         REC__Track_chi2_nomm = reader.getBranch<float>     ("REC::Track","chi2_nomm");
         tree->Branch("REC__Track_chi2_nomm",&vec_REC__Track_chi2_nomm);
      }
      if(dictionary->hasEntry("REC::Track","detector")==true){
         REC__Track_detector = reader.getBranch<int8_t>    ("REC::Track","detector");
         tree->Branch("REC__Track_detector",&vec_REC__Track_detector);
      }
      if(dictionary->hasEntry("REC::Track","index")==true){
         REC__Track_index = reader.getBranch<int16_t>   ("REC::Track","index");
         tree->Branch("REC__Track_index",&vec_REC__Track_index);
      }
      if(dictionary->hasEntry("REC::Track","pindex")==true){
         REC__Track_pindex = reader.getBranch<int16_t>   ("REC::Track","pindex");
         tree->Branch("REC__Track_pindex",&vec_REC__Track_pindex);
      }
      if(dictionary->hasEntry("REC::Track","px_nomm")==true){
         REC__Track_px_nomm = reader.getBranch<float>     ("REC::Track","px_nomm");
         tree->Branch("REC__Track_px_nomm",&vec_REC__Track_px_nomm);
      }
      if(dictionary->hasEntry("REC::Track","py_nomm")==true){
         REC__Track_py_nomm = reader.getBranch<float>     ("REC::Track","py_nomm");
         tree->Branch("REC__Track_py_nomm",&vec_REC__Track_py_nomm);
      }
      if(dictionary->hasEntry("REC::Track","pz_nomm")==true){
         REC__Track_pz_nomm = reader.getBranch<float>     ("REC::Track","pz_nomm");
         tree->Branch("REC__Track_pz_nomm",&vec_REC__Track_pz_nomm);
      }
      if(dictionary->hasEntry("REC::Track","q")==true){
         REC__Track_q = reader.getBranch<int8_t>    ("REC::Track","q");
         tree->Branch("REC__Track_q",&vec_REC__Track_q);
      }
      if(dictionary->hasEntry("REC::Track","sector")==true){
         REC__Track_sector = reader.getBranch<int8_t>    ("REC::Track","sector");
         tree->Branch("REC__Track_sector",&vec_REC__Track_sector);
      }
      if(dictionary->hasEntry("REC::Track","status")==true){
         REC__Track_status = reader.getBranch<int16_t>   ("REC::Track","status");
         tree->Branch("REC__Track_status",&vec_REC__Track_status);
      }
      if(dictionary->hasEntry("REC::Track","vx_nomm")==true){
         REC__Track_vx_nomm = reader.getBranch<float>     ("REC::Track","vx_nomm");
         tree->Branch("REC__Track_vx_nomm",&vec_REC__Track_vx_nomm);
      }
      if(dictionary->hasEntry("REC::Track","vy_nomm")==true){
         REC__Track_vy_nomm = reader.getBranch<float>     ("REC::Track","vy_nomm");
         tree->Branch("REC__Track_vy_nomm",&vec_REC__Track_vy_nomm);
      }
      if(dictionary->hasEntry("REC::Track","vz_nomm")==true){
         REC__Track_vz_nomm = reader.getBranch<float>     ("REC::Track","vz_nomm");
         tree->Branch("REC__Track_vz_nomm",&vec_REC__Track_vz_nomm);
      }
   }
   hipo::node<float>     *REC__TrackCross_c_ux;
   std::vector<Float_t>   vec_REC__TrackCross_c_ux;
   hipo::node<float>     *REC__TrackCross_c_uy;
   std::vector<Float_t>   vec_REC__TrackCross_c_uy;
   hipo::node<float>     *REC__TrackCross_c_uz;
   std::vector<Float_t>   vec_REC__TrackCross_c_uz;
   hipo::node<float>     *REC__TrackCross_c_x;
   std::vector<Float_t>   vec_REC__TrackCross_c_x;
   hipo::node<float>     *REC__TrackCross_c_y;
   std::vector<Float_t>   vec_REC__TrackCross_c_y;
   hipo::node<float>     *REC__TrackCross_c_z;
   std::vector<Float_t>   vec_REC__TrackCross_c_z;
   hipo::node<int8_t>    *REC__TrackCross_detector;
   std::vector<Char_t>   vec_REC__TrackCross_detector;
   hipo::node<int16_t>   *REC__TrackCross_index;
   std::vector<Short_t>   vec_REC__TrackCross_index;
   hipo::node<int8_t>    *REC__TrackCross_layer;
   std::vector<Char_t>   vec_REC__TrackCross_layer;
   hipo::node<int16_t>   *REC__TrackCross_pindex;
   std::vector<Short_t>   vec_REC__TrackCross_pindex;
   hipo::node<int8_t>    *REC__TrackCross_sector;
   std::vector<Char_t>   vec_REC__TrackCross_sector;
   hipo::node<int16_t>   *REC__TrackCross_status;
   std::vector<Short_t>   vec_REC__TrackCross_status;
   if(dictionary->hasSchema("REC::TrackCross")==true){
      if(dictionary->hasEntry("REC::TrackCross","c_ux")==true){
         REC__TrackCross_c_ux = reader.getBranch<float>     ("REC::TrackCross","c_ux");
         tree->Branch("REC__TrackCross_c_ux",&vec_REC__TrackCross_c_ux);
      }
      if(dictionary->hasEntry("REC::TrackCross","c_uy")==true){
         REC__TrackCross_c_uy = reader.getBranch<float>     ("REC::TrackCross","c_uy");
         tree->Branch("REC__TrackCross_c_uy",&vec_REC__TrackCross_c_uy);
      }
      if(dictionary->hasEntry("REC::TrackCross","c_uz")==true){
         REC__TrackCross_c_uz = reader.getBranch<float>     ("REC::TrackCross","c_uz");
         tree->Branch("REC__TrackCross_c_uz",&vec_REC__TrackCross_c_uz);
      }
      if(dictionary->hasEntry("REC::TrackCross","c_x")==true){
         REC__TrackCross_c_x = reader.getBranch<float>     ("REC::TrackCross","c_x");
         tree->Branch("REC__TrackCross_c_x",&vec_REC__TrackCross_c_x);
      }
      if(dictionary->hasEntry("REC::TrackCross","c_y")==true){
         REC__TrackCross_c_y = reader.getBranch<float>     ("REC::TrackCross","c_y");
         tree->Branch("REC__TrackCross_c_y",&vec_REC__TrackCross_c_y);
      }
      if(dictionary->hasEntry("REC::TrackCross","c_z")==true){
         REC__TrackCross_c_z = reader.getBranch<float>     ("REC::TrackCross","c_z");
         tree->Branch("REC__TrackCross_c_z",&vec_REC__TrackCross_c_z);
      }
      if(dictionary->hasEntry("REC::TrackCross","detector")==true){
         REC__TrackCross_detector = reader.getBranch<int8_t>    ("REC::TrackCross","detector");
         tree->Branch("REC__TrackCross_detector",&vec_REC__TrackCross_detector);
      }
      if(dictionary->hasEntry("REC::TrackCross","index")==true){
         REC__TrackCross_index = reader.getBranch<int16_t>   ("REC::TrackCross","index");
         tree->Branch("REC__TrackCross_index",&vec_REC__TrackCross_index);
      }
      if(dictionary->hasEntry("REC::TrackCross","layer")==true){
         REC__TrackCross_layer = reader.getBranch<int8_t>    ("REC::TrackCross","layer");
         tree->Branch("REC__TrackCross_layer",&vec_REC__TrackCross_layer);
      }
      if(dictionary->hasEntry("REC::TrackCross","pindex")==true){
         REC__TrackCross_pindex = reader.getBranch<int16_t>   ("REC::TrackCross","pindex");
         tree->Branch("REC__TrackCross_pindex",&vec_REC__TrackCross_pindex);
      }
      if(dictionary->hasEntry("REC::TrackCross","sector")==true){
         REC__TrackCross_sector = reader.getBranch<int8_t>    ("REC::TrackCross","sector");
         tree->Branch("REC__TrackCross_sector",&vec_REC__TrackCross_sector);
      }
      if(dictionary->hasEntry("REC::TrackCross","status")==true){
         REC__TrackCross_status = reader.getBranch<int16_t>   ("REC::TrackCross","status");
         tree->Branch("REC__TrackCross_status",&vec_REC__TrackCross_status);
      }
   }
   hipo::node<float>     *REC__Traj_cx;
   std::vector<Float_t>   vec_REC__Traj_cx;
   hipo::node<float>     *REC__Traj_cy;
   std::vector<Float_t>   vec_REC__Traj_cy;
   hipo::node<float>     *REC__Traj_cz;
   std::vector<Float_t>   vec_REC__Traj_cz;
   hipo::node<int16_t>   *REC__Traj_detId;
   std::vector<Short_t>   vec_REC__Traj_detId;
   hipo::node<int16_t>   *REC__Traj_index;
   std::vector<Short_t>   vec_REC__Traj_index;
   hipo::node<float>     *REC__Traj_pathlength;
   std::vector<Float_t>   vec_REC__Traj_pathlength;
   hipo::node<int16_t>   *REC__Traj_pindex;
   std::vector<Short_t>   vec_REC__Traj_pindex;
   hipo::node<int8_t>    *REC__Traj_q;
   std::vector<Char_t>   vec_REC__Traj_q;
   hipo::node<float>     *REC__Traj_x;
   std::vector<Float_t>   vec_REC__Traj_x;
   hipo::node<float>     *REC__Traj_y;
   std::vector<Float_t>   vec_REC__Traj_y;
   hipo::node<float>     *REC__Traj_z;
   std::vector<Float_t>   vec_REC__Traj_z;
   if(dictionary->hasSchema("REC::Traj")==true){
      if(dictionary->hasEntry("REC::Traj","cx")==true){
         REC__Traj_cx = reader.getBranch<float>     ("REC::Traj","cx");
         tree->Branch("REC__Traj_cx",&vec_REC__Traj_cx);
      }
      if(dictionary->hasEntry("REC::Traj","cy")==true){
         REC__Traj_cy = reader.getBranch<float>     ("REC::Traj","cy");
         tree->Branch("REC__Traj_cy",&vec_REC__Traj_cy);
      }
      if(dictionary->hasEntry("REC::Traj","cz")==true){
         REC__Traj_cz = reader.getBranch<float>     ("REC::Traj","cz");
         tree->Branch("REC__Traj_cz",&vec_REC__Traj_cz);
      }
      if(dictionary->hasEntry("REC::Traj","detId")==true){
         REC__Traj_detId = reader.getBranch<int16_t>   ("REC::Traj","detId");
         tree->Branch("REC__Traj_detId",&vec_REC__Traj_detId);
      }
      if(dictionary->hasEntry("REC::Traj","index")==true){
         REC__Traj_index = reader.getBranch<int16_t>   ("REC::Traj","index");
         tree->Branch("REC__Traj_index",&vec_REC__Traj_index);
      }
      if(dictionary->hasEntry("REC::Traj","pathlength")==true){
         REC__Traj_pathlength = reader.getBranch<float>     ("REC::Traj","pathlength");
         tree->Branch("REC__Traj_pathlength",&vec_REC__Traj_pathlength);
      }
      if(dictionary->hasEntry("REC::Traj","pindex")==true){
         REC__Traj_pindex = reader.getBranch<int16_t>   ("REC::Traj","pindex");
         tree->Branch("REC__Traj_pindex",&vec_REC__Traj_pindex);
      }
      if(dictionary->hasEntry("REC::Traj","q")==true){
         REC__Traj_q = reader.getBranch<int8_t>    ("REC::Traj","q");
         tree->Branch("REC__Traj_q",&vec_REC__Traj_q);
      }
      if(dictionary->hasEntry("REC::Traj","x")==true){
         REC__Traj_x = reader.getBranch<float>     ("REC::Traj","x");
         tree->Branch("REC__Traj_x",&vec_REC__Traj_x);
      }
      if(dictionary->hasEntry("REC::Traj","y")==true){
         REC__Traj_y = reader.getBranch<float>     ("REC::Traj","y");
         tree->Branch("REC__Traj_y",&vec_REC__Traj_y);
      }
      if(dictionary->hasEntry("REC::Traj","z")==true){
         REC__Traj_z = reader.getBranch<float>     ("REC::Traj","z");
         tree->Branch("REC__Traj_z",&vec_REC__Traj_z);
      }
   }
   hipo::node<float>     *REC__VertDoca_cx1;
   std::vector<Float_t>   vec_REC__VertDoca_cx1;
   hipo::node<float>     *REC__VertDoca_cx2;
   std::vector<Float_t>   vec_REC__VertDoca_cx2;
   hipo::node<float>     *REC__VertDoca_cy1;
   std::vector<Float_t>   vec_REC__VertDoca_cy1;
   hipo::node<float>     *REC__VertDoca_cy2;
   std::vector<Float_t>   vec_REC__VertDoca_cy2;
   hipo::node<float>     *REC__VertDoca_cz1;
   std::vector<Float_t>   vec_REC__VertDoca_cz1;
   hipo::node<float>     *REC__VertDoca_cz2;
   std::vector<Float_t>   vec_REC__VertDoca_cz2;
   hipo::node<int16_t>   *REC__VertDoca_index1;
   std::vector<Short_t>   vec_REC__VertDoca_index1;
   hipo::node<int16_t>   *REC__VertDoca_index2;
   std::vector<Short_t>   vec_REC__VertDoca_index2;
   hipo::node<float>     *REC__VertDoca_r;
   std::vector<Float_t>   vec_REC__VertDoca_r;
   hipo::node<float>     *REC__VertDoca_x;
   std::vector<Float_t>   vec_REC__VertDoca_x;
   hipo::node<float>     *REC__VertDoca_x1;
   std::vector<Float_t>   vec_REC__VertDoca_x1;
   hipo::node<float>     *REC__VertDoca_x2;
   std::vector<Float_t>   vec_REC__VertDoca_x2;
   hipo::node<float>     *REC__VertDoca_y;
   std::vector<Float_t>   vec_REC__VertDoca_y;
   hipo::node<float>     *REC__VertDoca_y1;
   std::vector<Float_t>   vec_REC__VertDoca_y1;
   hipo::node<float>     *REC__VertDoca_y2;
   std::vector<Float_t>   vec_REC__VertDoca_y2;
   hipo::node<float>     *REC__VertDoca_z;
   std::vector<Float_t>   vec_REC__VertDoca_z;
   hipo::node<float>     *REC__VertDoca_z1;
   std::vector<Float_t>   vec_REC__VertDoca_z1;
   hipo::node<float>     *REC__VertDoca_z2;
   std::vector<Float_t>   vec_REC__VertDoca_z2;
   if(dictionary->hasSchema("REC::VertDoca")==true){
      if(dictionary->hasEntry("REC::VertDoca","cx1")==true){
         REC__VertDoca_cx1 = reader.getBranch<float>     ("REC::VertDoca","cx1");
         tree->Branch("REC__VertDoca_cx1",&vec_REC__VertDoca_cx1);
      }
      if(dictionary->hasEntry("REC::VertDoca","cx2")==true){
         REC__VertDoca_cx2 = reader.getBranch<float>     ("REC::VertDoca","cx2");
         tree->Branch("REC__VertDoca_cx2",&vec_REC__VertDoca_cx2);
      }
      if(dictionary->hasEntry("REC::VertDoca","cy1")==true){
         REC__VertDoca_cy1 = reader.getBranch<float>     ("REC::VertDoca","cy1");
         tree->Branch("REC__VertDoca_cy1",&vec_REC__VertDoca_cy1);
      }
      if(dictionary->hasEntry("REC::VertDoca","cy2")==true){
         REC__VertDoca_cy2 = reader.getBranch<float>     ("REC::VertDoca","cy2");
         tree->Branch("REC__VertDoca_cy2",&vec_REC__VertDoca_cy2);
      }
      if(dictionary->hasEntry("REC::VertDoca","cz1")==true){
         REC__VertDoca_cz1 = reader.getBranch<float>     ("REC::VertDoca","cz1");
         tree->Branch("REC__VertDoca_cz1",&vec_REC__VertDoca_cz1);
      }
      if(dictionary->hasEntry("REC::VertDoca","cz2")==true){
         REC__VertDoca_cz2 = reader.getBranch<float>     ("REC::VertDoca","cz2");
         tree->Branch("REC__VertDoca_cz2",&vec_REC__VertDoca_cz2);
      }
      if(dictionary->hasEntry("REC::VertDoca","index1")==true){
         REC__VertDoca_index1 = reader.getBranch<int16_t>   ("REC::VertDoca","index1");
         tree->Branch("REC__VertDoca_index1",&vec_REC__VertDoca_index1);
      }
      if(dictionary->hasEntry("REC::VertDoca","index2")==true){
         REC__VertDoca_index2 = reader.getBranch<int16_t>   ("REC::VertDoca","index2");
         tree->Branch("REC__VertDoca_index2",&vec_REC__VertDoca_index2);
      }
      if(dictionary->hasEntry("REC::VertDoca","r")==true){
         REC__VertDoca_r = reader.getBranch<float>     ("REC::VertDoca","r");
         tree->Branch("REC__VertDoca_r",&vec_REC__VertDoca_r);
      }
      if(dictionary->hasEntry("REC::VertDoca","x")==true){
         REC__VertDoca_x = reader.getBranch<float>     ("REC::VertDoca","x");
         tree->Branch("REC__VertDoca_x",&vec_REC__VertDoca_x);
      }
      if(dictionary->hasEntry("REC::VertDoca","x1")==true){
         REC__VertDoca_x1 = reader.getBranch<float>     ("REC::VertDoca","x1");
         tree->Branch("REC__VertDoca_x1",&vec_REC__VertDoca_x1);
      }
      if(dictionary->hasEntry("REC::VertDoca","x2")==true){
         REC__VertDoca_x2 = reader.getBranch<float>     ("REC::VertDoca","x2");
         tree->Branch("REC__VertDoca_x2",&vec_REC__VertDoca_x2);
      }
      if(dictionary->hasEntry("REC::VertDoca","y")==true){
         REC__VertDoca_y = reader.getBranch<float>     ("REC::VertDoca","y");
         tree->Branch("REC__VertDoca_y",&vec_REC__VertDoca_y);
      }
      if(dictionary->hasEntry("REC::VertDoca","y1")==true){
         REC__VertDoca_y1 = reader.getBranch<float>     ("REC::VertDoca","y1");
         tree->Branch("REC__VertDoca_y1",&vec_REC__VertDoca_y1);
      }
      if(dictionary->hasEntry("REC::VertDoca","y2")==true){
         REC__VertDoca_y2 = reader.getBranch<float>     ("REC::VertDoca","y2");
         tree->Branch("REC__VertDoca_y2",&vec_REC__VertDoca_y2);
      }
      if(dictionary->hasEntry("REC::VertDoca","z")==true){
         REC__VertDoca_z = reader.getBranch<float>     ("REC::VertDoca","z");
         tree->Branch("REC__VertDoca_z",&vec_REC__VertDoca_z);
      }
      if(dictionary->hasEntry("REC::VertDoca","z1")==true){
         REC__VertDoca_z1 = reader.getBranch<float>     ("REC::VertDoca","z1");
         tree->Branch("REC__VertDoca_z1",&vec_REC__VertDoca_z1);
      }
      if(dictionary->hasEntry("REC::VertDoca","z2")==true){
         REC__VertDoca_z2 = reader.getBranch<float>     ("REC::VertDoca","z2");
         tree->Branch("REC__VertDoca_z2",&vec_REC__VertDoca_z2);
      }
   }
   hipo::node<float>     *RECHB__Calorimeter_chi2;
   std::vector<Float_t>   vec_RECHB__Calorimeter_chi2;
   hipo::node<int8_t>    *RECHB__Calorimeter_detector;
   std::vector<Char_t>   vec_RECHB__Calorimeter_detector;
   hipo::node<float>     *RECHB__Calorimeter_du;
   std::vector<Float_t>   vec_RECHB__Calorimeter_du;
   hipo::node<float>     *RECHB__Calorimeter_dv;
   std::vector<Float_t>   vec_RECHB__Calorimeter_dv;
   hipo::node<float>     *RECHB__Calorimeter_dw;
   std::vector<Float_t>   vec_RECHB__Calorimeter_dw;
   hipo::node<float>     *RECHB__Calorimeter_energy;
   std::vector<Float_t>   vec_RECHB__Calorimeter_energy;
   hipo::node<float>     *RECHB__Calorimeter_hx;
   std::vector<Float_t>   vec_RECHB__Calorimeter_hx;
   hipo::node<float>     *RECHB__Calorimeter_hy;
   std::vector<Float_t>   vec_RECHB__Calorimeter_hy;
   hipo::node<float>     *RECHB__Calorimeter_hz;
   std::vector<Float_t>   vec_RECHB__Calorimeter_hz;
   hipo::node<int16_t>   *RECHB__Calorimeter_index;
   std::vector<Short_t>   vec_RECHB__Calorimeter_index;
   hipo::node<int8_t>    *RECHB__Calorimeter_layer;
   std::vector<Char_t>   vec_RECHB__Calorimeter_layer;
   hipo::node<float>     *RECHB__Calorimeter_lu;
   std::vector<Float_t>   vec_RECHB__Calorimeter_lu;
   hipo::node<float>     *RECHB__Calorimeter_lv;
   std::vector<Float_t>   vec_RECHB__Calorimeter_lv;
   hipo::node<float>     *RECHB__Calorimeter_lw;
   std::vector<Float_t>   vec_RECHB__Calorimeter_lw;
   hipo::node<float>     *RECHB__Calorimeter_m2u;
   std::vector<Float_t>   vec_RECHB__Calorimeter_m2u;
   hipo::node<float>     *RECHB__Calorimeter_m2v;
   std::vector<Float_t>   vec_RECHB__Calorimeter_m2v;
   hipo::node<float>     *RECHB__Calorimeter_m2w;
   std::vector<Float_t>   vec_RECHB__Calorimeter_m2w;
   hipo::node<float>     *RECHB__Calorimeter_m3u;
   std::vector<Float_t>   vec_RECHB__Calorimeter_m3u;
   hipo::node<float>     *RECHB__Calorimeter_m3v;
   std::vector<Float_t>   vec_RECHB__Calorimeter_m3v;
   hipo::node<float>     *RECHB__Calorimeter_m3w;
   std::vector<Float_t>   vec_RECHB__Calorimeter_m3w;
   hipo::node<float>     *RECHB__Calorimeter_path;
   std::vector<Float_t>   vec_RECHB__Calorimeter_path;
   hipo::node<int16_t>   *RECHB__Calorimeter_pindex;
   std::vector<Short_t>   vec_RECHB__Calorimeter_pindex;
   hipo::node<int8_t>    *RECHB__Calorimeter_sector;
   std::vector<Char_t>   vec_RECHB__Calorimeter_sector;
   hipo::node<int16_t>   *RECHB__Calorimeter_status;
   std::vector<Short_t>   vec_RECHB__Calorimeter_status;
   hipo::node<float>     *RECHB__Calorimeter_time;
   std::vector<Float_t>   vec_RECHB__Calorimeter_time;
   hipo::node<float>     *RECHB__Calorimeter_x;
   std::vector<Float_t>   vec_RECHB__Calorimeter_x;
   hipo::node<float>     *RECHB__Calorimeter_y;
   std::vector<Float_t>   vec_RECHB__Calorimeter_y;
   hipo::node<float>     *RECHB__Calorimeter_z;
   std::vector<Float_t>   vec_RECHB__Calorimeter_z;
   if(dictionary->hasSchema("RECHB::Calorimeter")==true){
      if(dictionary->hasEntry("RECHB::Calorimeter","chi2")==true){
         RECHB__Calorimeter_chi2 = reader.getBranch<float>     ("RECHB::Calorimeter","chi2");
         tree->Branch("RECHB__Calorimeter_chi2",&vec_RECHB__Calorimeter_chi2);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","detector")==true){
         RECHB__Calorimeter_detector = reader.getBranch<int8_t>    ("RECHB::Calorimeter","detector");
         tree->Branch("RECHB__Calorimeter_detector",&vec_RECHB__Calorimeter_detector);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","du")==true){
         RECHB__Calorimeter_du = reader.getBranch<float>     ("RECHB::Calorimeter","du");
         tree->Branch("RECHB__Calorimeter_du",&vec_RECHB__Calorimeter_du);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","dv")==true){
         RECHB__Calorimeter_dv = reader.getBranch<float>     ("RECHB::Calorimeter","dv");
         tree->Branch("RECHB__Calorimeter_dv",&vec_RECHB__Calorimeter_dv);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","dw")==true){
         RECHB__Calorimeter_dw = reader.getBranch<float>     ("RECHB::Calorimeter","dw");
         tree->Branch("RECHB__Calorimeter_dw",&vec_RECHB__Calorimeter_dw);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","energy")==true){
         RECHB__Calorimeter_energy = reader.getBranch<float>     ("RECHB::Calorimeter","energy");
         tree->Branch("RECHB__Calorimeter_energy",&vec_RECHB__Calorimeter_energy);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","hx")==true){
         RECHB__Calorimeter_hx = reader.getBranch<float>     ("RECHB::Calorimeter","hx");
         tree->Branch("RECHB__Calorimeter_hx",&vec_RECHB__Calorimeter_hx);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","hy")==true){
         RECHB__Calorimeter_hy = reader.getBranch<float>     ("RECHB::Calorimeter","hy");
         tree->Branch("RECHB__Calorimeter_hy",&vec_RECHB__Calorimeter_hy);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","hz")==true){
         RECHB__Calorimeter_hz = reader.getBranch<float>     ("RECHB::Calorimeter","hz");
         tree->Branch("RECHB__Calorimeter_hz",&vec_RECHB__Calorimeter_hz);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","index")==true){
         RECHB__Calorimeter_index = reader.getBranch<int16_t>   ("RECHB::Calorimeter","index");
         tree->Branch("RECHB__Calorimeter_index",&vec_RECHB__Calorimeter_index);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","layer")==true){
         RECHB__Calorimeter_layer = reader.getBranch<int8_t>    ("RECHB::Calorimeter","layer");
         tree->Branch("RECHB__Calorimeter_layer",&vec_RECHB__Calorimeter_layer);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","lu")==true){
         RECHB__Calorimeter_lu = reader.getBranch<float>     ("RECHB::Calorimeter","lu");
         tree->Branch("RECHB__Calorimeter_lu",&vec_RECHB__Calorimeter_lu);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","lv")==true){
         RECHB__Calorimeter_lv = reader.getBranch<float>     ("RECHB::Calorimeter","lv");
         tree->Branch("RECHB__Calorimeter_lv",&vec_RECHB__Calorimeter_lv);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","lw")==true){
         RECHB__Calorimeter_lw = reader.getBranch<float>     ("RECHB::Calorimeter","lw");
         tree->Branch("RECHB__Calorimeter_lw",&vec_RECHB__Calorimeter_lw);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m2u")==true){
         RECHB__Calorimeter_m2u = reader.getBranch<float>     ("RECHB::Calorimeter","m2u");
         tree->Branch("RECHB__Calorimeter_m2u",&vec_RECHB__Calorimeter_m2u);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m2v")==true){
         RECHB__Calorimeter_m2v = reader.getBranch<float>     ("RECHB::Calorimeter","m2v");
         tree->Branch("RECHB__Calorimeter_m2v",&vec_RECHB__Calorimeter_m2v);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m2w")==true){
         RECHB__Calorimeter_m2w = reader.getBranch<float>     ("RECHB::Calorimeter","m2w");
         tree->Branch("RECHB__Calorimeter_m2w",&vec_RECHB__Calorimeter_m2w);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m3u")==true){
         RECHB__Calorimeter_m3u = reader.getBranch<float>     ("RECHB::Calorimeter","m3u");
         tree->Branch("RECHB__Calorimeter_m3u",&vec_RECHB__Calorimeter_m3u);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m3v")==true){
         RECHB__Calorimeter_m3v = reader.getBranch<float>     ("RECHB::Calorimeter","m3v");
         tree->Branch("RECHB__Calorimeter_m3v",&vec_RECHB__Calorimeter_m3v);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m3w")==true){
         RECHB__Calorimeter_m3w = reader.getBranch<float>     ("RECHB::Calorimeter","m3w");
         tree->Branch("RECHB__Calorimeter_m3w",&vec_RECHB__Calorimeter_m3w);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","path")==true){
         RECHB__Calorimeter_path = reader.getBranch<float>     ("RECHB::Calorimeter","path");
         tree->Branch("RECHB__Calorimeter_path",&vec_RECHB__Calorimeter_path);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","pindex")==true){
         RECHB__Calorimeter_pindex = reader.getBranch<int16_t>   ("RECHB::Calorimeter","pindex");
         tree->Branch("RECHB__Calorimeter_pindex",&vec_RECHB__Calorimeter_pindex);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","sector")==true){
         RECHB__Calorimeter_sector = reader.getBranch<int8_t>    ("RECHB::Calorimeter","sector");
         tree->Branch("RECHB__Calorimeter_sector",&vec_RECHB__Calorimeter_sector);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","status")==true){
         RECHB__Calorimeter_status = reader.getBranch<int16_t>   ("RECHB::Calorimeter","status");
         tree->Branch("RECHB__Calorimeter_status",&vec_RECHB__Calorimeter_status);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","time")==true){
         RECHB__Calorimeter_time = reader.getBranch<float>     ("RECHB::Calorimeter","time");
         tree->Branch("RECHB__Calorimeter_time",&vec_RECHB__Calorimeter_time);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","x")==true){
         RECHB__Calorimeter_x = reader.getBranch<float>     ("RECHB::Calorimeter","x");
         tree->Branch("RECHB__Calorimeter_x",&vec_RECHB__Calorimeter_x);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","y")==true){
         RECHB__Calorimeter_y = reader.getBranch<float>     ("RECHB::Calorimeter","y");
         tree->Branch("RECHB__Calorimeter_y",&vec_RECHB__Calorimeter_y);
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","z")==true){
         RECHB__Calorimeter_z = reader.getBranch<float>     ("RECHB::Calorimeter","z");
         tree->Branch("RECHB__Calorimeter_z",&vec_RECHB__Calorimeter_z);
      }
   }
   hipo::node<float>     *RECHB__Cherenkov_chi2;
   std::vector<Float_t>   vec_RECHB__Cherenkov_chi2;
   hipo::node<int8_t>    *RECHB__Cherenkov_detector;
   std::vector<Char_t>   vec_RECHB__Cherenkov_detector;
   hipo::node<float>     *RECHB__Cherenkov_dphi;
   std::vector<Float_t>   vec_RECHB__Cherenkov_dphi;
   hipo::node<float>     *RECHB__Cherenkov_dtheta;
   std::vector<Float_t>   vec_RECHB__Cherenkov_dtheta;
   hipo::node<int16_t>   *RECHB__Cherenkov_index;
   std::vector<Short_t>   vec_RECHB__Cherenkov_index;
   hipo::node<float>     *RECHB__Cherenkov_nphe;
   std::vector<Float_t>   vec_RECHB__Cherenkov_nphe;
   hipo::node<float>     *RECHB__Cherenkov_path;
   std::vector<Float_t>   vec_RECHB__Cherenkov_path;
   hipo::node<float>     *RECHB__Cherenkov_phi;
   std::vector<Float_t>   vec_RECHB__Cherenkov_phi;
   hipo::node<int16_t>   *RECHB__Cherenkov_pindex;
   std::vector<Short_t>   vec_RECHB__Cherenkov_pindex;
   hipo::node<int8_t>    *RECHB__Cherenkov_sector;
   std::vector<Char_t>   vec_RECHB__Cherenkov_sector;
   hipo::node<int16_t>   *RECHB__Cherenkov_status;
   std::vector<Short_t>   vec_RECHB__Cherenkov_status;
   hipo::node<float>     *RECHB__Cherenkov_theta;
   std::vector<Float_t>   vec_RECHB__Cherenkov_theta;
   hipo::node<float>     *RECHB__Cherenkov_time;
   std::vector<Float_t>   vec_RECHB__Cherenkov_time;
   hipo::node<float>     *RECHB__Cherenkov_x;
   std::vector<Float_t>   vec_RECHB__Cherenkov_x;
   hipo::node<float>     *RECHB__Cherenkov_y;
   std::vector<Float_t>   vec_RECHB__Cherenkov_y;
   hipo::node<float>     *RECHB__Cherenkov_z;
   std::vector<Float_t>   vec_RECHB__Cherenkov_z;
   if(dictionary->hasSchema("RECHB::Cherenkov")==true){
      if(dictionary->hasEntry("RECHB::Cherenkov","chi2")==true){
         RECHB__Cherenkov_chi2 = reader.getBranch<float>     ("RECHB::Cherenkov","chi2");
         tree->Branch("RECHB__Cherenkov_chi2",&vec_RECHB__Cherenkov_chi2);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","detector")==true){
         RECHB__Cherenkov_detector = reader.getBranch<int8_t>    ("RECHB::Cherenkov","detector");
         tree->Branch("RECHB__Cherenkov_detector",&vec_RECHB__Cherenkov_detector);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","dphi")==true){
         RECHB__Cherenkov_dphi = reader.getBranch<float>     ("RECHB::Cherenkov","dphi");
         tree->Branch("RECHB__Cherenkov_dphi",&vec_RECHB__Cherenkov_dphi);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","dtheta")==true){
         RECHB__Cherenkov_dtheta = reader.getBranch<float>     ("RECHB::Cherenkov","dtheta");
         tree->Branch("RECHB__Cherenkov_dtheta",&vec_RECHB__Cherenkov_dtheta);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","index")==true){
         RECHB__Cherenkov_index = reader.getBranch<int16_t>   ("RECHB::Cherenkov","index");
         tree->Branch("RECHB__Cherenkov_index",&vec_RECHB__Cherenkov_index);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","nphe")==true){
         RECHB__Cherenkov_nphe = reader.getBranch<float>     ("RECHB::Cherenkov","nphe");
         tree->Branch("RECHB__Cherenkov_nphe",&vec_RECHB__Cherenkov_nphe);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","path")==true){
         RECHB__Cherenkov_path = reader.getBranch<float>     ("RECHB::Cherenkov","path");
         tree->Branch("RECHB__Cherenkov_path",&vec_RECHB__Cherenkov_path);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","phi")==true){
         RECHB__Cherenkov_phi = reader.getBranch<float>     ("RECHB::Cherenkov","phi");
         tree->Branch("RECHB__Cherenkov_phi",&vec_RECHB__Cherenkov_phi);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","pindex")==true){
         RECHB__Cherenkov_pindex = reader.getBranch<int16_t>   ("RECHB::Cherenkov","pindex");
         tree->Branch("RECHB__Cherenkov_pindex",&vec_RECHB__Cherenkov_pindex);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","sector")==true){
         RECHB__Cherenkov_sector = reader.getBranch<int8_t>    ("RECHB::Cherenkov","sector");
         tree->Branch("RECHB__Cherenkov_sector",&vec_RECHB__Cherenkov_sector);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","status")==true){
         RECHB__Cherenkov_status = reader.getBranch<int16_t>   ("RECHB::Cherenkov","status");
         tree->Branch("RECHB__Cherenkov_status",&vec_RECHB__Cherenkov_status);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","theta")==true){
         RECHB__Cherenkov_theta = reader.getBranch<float>     ("RECHB::Cherenkov","theta");
         tree->Branch("RECHB__Cherenkov_theta",&vec_RECHB__Cherenkov_theta);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","time")==true){
         RECHB__Cherenkov_time = reader.getBranch<float>     ("RECHB::Cherenkov","time");
         tree->Branch("RECHB__Cherenkov_time",&vec_RECHB__Cherenkov_time);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","x")==true){
         RECHB__Cherenkov_x = reader.getBranch<float>     ("RECHB::Cherenkov","x");
         tree->Branch("RECHB__Cherenkov_x",&vec_RECHB__Cherenkov_x);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","y")==true){
         RECHB__Cherenkov_y = reader.getBranch<float>     ("RECHB::Cherenkov","y");
         tree->Branch("RECHB__Cherenkov_y",&vec_RECHB__Cherenkov_y);
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","z")==true){
         RECHB__Cherenkov_z = reader.getBranch<float>     ("RECHB::Cherenkov","z");
         tree->Branch("RECHB__Cherenkov_z",&vec_RECHB__Cherenkov_z);
      }
   }
   hipo::node<float>     *RECHB__Event_BCG;
   std::vector<Float_t>   vec_RECHB__Event_BCG;
   hipo::node<float>     *RECHB__Event_EVNTime;
   std::vector<Float_t>   vec_RECHB__Event_EVNTime;
   hipo::node<int16_t>   *RECHB__Event_EvCAT;
   std::vector<Short_t>   vec_RECHB__Event_EvCAT;
   hipo::node<int8_t>    *RECHB__Event_Helic;
   std::vector<Char_t>   vec_RECHB__Event_Helic;
   hipo::node<double>    *RECHB__Event_LT;
   std::vector<Double_t>   vec_RECHB__Event_LT;
   hipo::node<int32_t>   *RECHB__Event_NEVENT;
   std::vector<Int_t>   vec_RECHB__Event_NEVENT;
   hipo::node<int16_t>   *RECHB__Event_NPGP;
   std::vector<Short_t>   vec_RECHB__Event_NPGP;
   hipo::node<int32_t>   *RECHB__Event_NRUN;
   std::vector<Int_t>   vec_RECHB__Event_NRUN;
   hipo::node<float>     *RECHB__Event_PTIME;
   std::vector<Float_t>   vec_RECHB__Event_PTIME;
   hipo::node<float>     *RECHB__Event_RFTime;
   std::vector<Float_t>   vec_RECHB__Event_RFTime;
   hipo::node<float>     *RECHB__Event_STTime;
   std::vector<Float_t>   vec_RECHB__Event_STTime;
   hipo::node<int64_t>   *RECHB__Event_TRG;
   std::vector<Long64_t>   vec_RECHB__Event_TRG;
   hipo::node<int8_t>    *RECHB__Event_TYPE;
   std::vector<Char_t>   vec_RECHB__Event_TYPE;
   if(dictionary->hasSchema("RECHB::Event")==true){
      if(dictionary->hasEntry("RECHB::Event","BCG")==true){
         RECHB__Event_BCG = reader.getBranch<float>     ("RECHB::Event","BCG");
         tree->Branch("RECHB__Event_BCG",&vec_RECHB__Event_BCG);
      }
      if(dictionary->hasEntry("RECHB::Event","EVNTime")==true){
         RECHB__Event_EVNTime = reader.getBranch<float>     ("RECHB::Event","EVNTime");
         tree->Branch("RECHB__Event_EVNTime",&vec_RECHB__Event_EVNTime);
      }
      if(dictionary->hasEntry("RECHB::Event","EvCAT")==true){
         RECHB__Event_EvCAT = reader.getBranch<int16_t>   ("RECHB::Event","EvCAT");
         tree->Branch("RECHB__Event_EvCAT",&vec_RECHB__Event_EvCAT);
      }
      if(dictionary->hasEntry("RECHB::Event","Helic")==true){
         RECHB__Event_Helic = reader.getBranch<int8_t>    ("RECHB::Event","Helic");
         tree->Branch("RECHB__Event_Helic",&vec_RECHB__Event_Helic);
      }
      if(dictionary->hasEntry("RECHB::Event","LT")==true){
         RECHB__Event_LT = reader.getBranch<double>    ("RECHB::Event","LT");
         tree->Branch("RECHB__Event_LT",&vec_RECHB__Event_LT);
      }
      if(dictionary->hasEntry("RECHB::Event","NEVENT")==true){
         RECHB__Event_NEVENT = reader.getBranch<int32_t>   ("RECHB::Event","NEVENT");
         tree->Branch("RECHB__Event_NEVENT",&vec_RECHB__Event_NEVENT);
      }
      if(dictionary->hasEntry("RECHB::Event","NPGP")==true){
         RECHB__Event_NPGP = reader.getBranch<int16_t>   ("RECHB::Event","NPGP");
         tree->Branch("RECHB__Event_NPGP",&vec_RECHB__Event_NPGP);
      }
      if(dictionary->hasEntry("RECHB::Event","NRUN")==true){
         RECHB__Event_NRUN = reader.getBranch<int32_t>   ("RECHB::Event","NRUN");
         tree->Branch("RECHB__Event_NRUN",&vec_RECHB__Event_NRUN);
      }
      if(dictionary->hasEntry("RECHB::Event","PTIME")==true){
         RECHB__Event_PTIME = reader.getBranch<float>     ("RECHB::Event","PTIME");
         tree->Branch("RECHB__Event_PTIME",&vec_RECHB__Event_PTIME);
      }
      if(dictionary->hasEntry("RECHB::Event","RFTime")==true){
         RECHB__Event_RFTime = reader.getBranch<float>     ("RECHB::Event","RFTime");
         tree->Branch("RECHB__Event_RFTime",&vec_RECHB__Event_RFTime);
      }
      if(dictionary->hasEntry("RECHB::Event","STTime")==true){
         RECHB__Event_STTime = reader.getBranch<float>     ("RECHB::Event","STTime");
         tree->Branch("RECHB__Event_STTime",&vec_RECHB__Event_STTime);
      }
      if(dictionary->hasEntry("RECHB::Event","TRG")==true){
         RECHB__Event_TRG = reader.getBranch<int64_t>   ("RECHB::Event","TRG");
         tree->Branch("RECHB__Event_TRG",&vec_RECHB__Event_TRG);
      }
      if(dictionary->hasEntry("RECHB::Event","TYPE")==true){
         RECHB__Event_TYPE = reader.getBranch<int8_t>    ("RECHB::Event","TYPE");
         tree->Branch("RECHB__Event_TYPE",&vec_RECHB__Event_TYPE);
      }
   }
   hipo::node<float>     *RECHB__ForwardTagger_chi2;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_chi2;
   hipo::node<int8_t>    *RECHB__ForwardTagger_detector;
   std::vector<Char_t>   vec_RECHB__ForwardTagger_detector;
   hipo::node<float>     *RECHB__ForwardTagger_dx;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_dx;
   hipo::node<float>     *RECHB__ForwardTagger_dy;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_dy;
   hipo::node<float>     *RECHB__ForwardTagger_energy;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_energy;
   hipo::node<int16_t>   *RECHB__ForwardTagger_index;
   std::vector<Short_t>   vec_RECHB__ForwardTagger_index;
   hipo::node<float>     *RECHB__ForwardTagger_path;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_path;
   hipo::node<int16_t>   *RECHB__ForwardTagger_pindex;
   std::vector<Short_t>   vec_RECHB__ForwardTagger_pindex;
   hipo::node<float>     *RECHB__ForwardTagger_radius;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_radius;
   hipo::node<int16_t>   *RECHB__ForwardTagger_size;
   std::vector<Short_t>   vec_RECHB__ForwardTagger_size;
   hipo::node<int16_t>   *RECHB__ForwardTagger_status;
   std::vector<Short_t>   vec_RECHB__ForwardTagger_status;
   hipo::node<float>     *RECHB__ForwardTagger_time;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_time;
   hipo::node<float>     *RECHB__ForwardTagger_x;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_x;
   hipo::node<float>     *RECHB__ForwardTagger_y;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_y;
   hipo::node<float>     *RECHB__ForwardTagger_z;
   std::vector<Float_t>   vec_RECHB__ForwardTagger_z;
   if(dictionary->hasSchema("RECHB::ForwardTagger")==true){
      if(dictionary->hasEntry("RECHB::ForwardTagger","chi2")==true){
         RECHB__ForwardTagger_chi2 = reader.getBranch<float>     ("RECHB::ForwardTagger","chi2");
         tree->Branch("RECHB__ForwardTagger_chi2",&vec_RECHB__ForwardTagger_chi2);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","detector")==true){
         RECHB__ForwardTagger_detector = reader.getBranch<int8_t>    ("RECHB::ForwardTagger","detector");
         tree->Branch("RECHB__ForwardTagger_detector",&vec_RECHB__ForwardTagger_detector);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","dx")==true){
         RECHB__ForwardTagger_dx = reader.getBranch<float>     ("RECHB::ForwardTagger","dx");
         tree->Branch("RECHB__ForwardTagger_dx",&vec_RECHB__ForwardTagger_dx);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","dy")==true){
         RECHB__ForwardTagger_dy = reader.getBranch<float>     ("RECHB::ForwardTagger","dy");
         tree->Branch("RECHB__ForwardTagger_dy",&vec_RECHB__ForwardTagger_dy);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","energy")==true){
         RECHB__ForwardTagger_energy = reader.getBranch<float>     ("RECHB::ForwardTagger","energy");
         tree->Branch("RECHB__ForwardTagger_energy",&vec_RECHB__ForwardTagger_energy);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","index")==true){
         RECHB__ForwardTagger_index = reader.getBranch<int16_t>   ("RECHB::ForwardTagger","index");
         tree->Branch("RECHB__ForwardTagger_index",&vec_RECHB__ForwardTagger_index);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","path")==true){
         RECHB__ForwardTagger_path = reader.getBranch<float>     ("RECHB::ForwardTagger","path");
         tree->Branch("RECHB__ForwardTagger_path",&vec_RECHB__ForwardTagger_path);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","pindex")==true){
         RECHB__ForwardTagger_pindex = reader.getBranch<int16_t>   ("RECHB::ForwardTagger","pindex");
         tree->Branch("RECHB__ForwardTagger_pindex",&vec_RECHB__ForwardTagger_pindex);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","radius")==true){
         RECHB__ForwardTagger_radius = reader.getBranch<float>     ("RECHB::ForwardTagger","radius");
         tree->Branch("RECHB__ForwardTagger_radius",&vec_RECHB__ForwardTagger_radius);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","size")==true){
         RECHB__ForwardTagger_size = reader.getBranch<int16_t>   ("RECHB::ForwardTagger","size");
         tree->Branch("RECHB__ForwardTagger_size",&vec_RECHB__ForwardTagger_size);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","status")==true){
         RECHB__ForwardTagger_status = reader.getBranch<int16_t>   ("RECHB::ForwardTagger","status");
         tree->Branch("RECHB__ForwardTagger_status",&vec_RECHB__ForwardTagger_status);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","time")==true){
         RECHB__ForwardTagger_time = reader.getBranch<float>     ("RECHB::ForwardTagger","time");
         tree->Branch("RECHB__ForwardTagger_time",&vec_RECHB__ForwardTagger_time);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","x")==true){
         RECHB__ForwardTagger_x = reader.getBranch<float>     ("RECHB::ForwardTagger","x");
         tree->Branch("RECHB__ForwardTagger_x",&vec_RECHB__ForwardTagger_x);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","y")==true){
         RECHB__ForwardTagger_y = reader.getBranch<float>     ("RECHB::ForwardTagger","y");
         tree->Branch("RECHB__ForwardTagger_y",&vec_RECHB__ForwardTagger_y);
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","z")==true){
         RECHB__ForwardTagger_z = reader.getBranch<float>     ("RECHB::ForwardTagger","z");
         tree->Branch("RECHB__ForwardTagger_z",&vec_RECHB__ForwardTagger_z);
      }
   }
   hipo::node<float>     *RECHB__Particle_beta;
   std::vector<Float_t>   vec_RECHB__Particle_beta;
   hipo::node<int8_t>    *RECHB__Particle_charge;
   std::vector<Char_t>   vec_RECHB__Particle_charge;
   hipo::node<float>     *RECHB__Particle_chi2pid;
   std::vector<Float_t>   vec_RECHB__Particle_chi2pid;
   hipo::node<int32_t>   *RECHB__Particle_pid;
   std::vector<Int_t>   vec_RECHB__Particle_pid;
   hipo::node<float>     *RECHB__Particle_px;
   std::vector<Float_t>   vec_RECHB__Particle_px;
   hipo::node<float>     *RECHB__Particle_py;
   std::vector<Float_t>   vec_RECHB__Particle_py;
   hipo::node<float>     *RECHB__Particle_pz;
   std::vector<Float_t>   vec_RECHB__Particle_pz;
   hipo::node<int16_t>   *RECHB__Particle_status;
   std::vector<Short_t>   vec_RECHB__Particle_status;
   hipo::node<float>     *RECHB__Particle_vx;
   std::vector<Float_t>   vec_RECHB__Particle_vx;
   hipo::node<float>     *RECHB__Particle_vy;
   std::vector<Float_t>   vec_RECHB__Particle_vy;
   hipo::node<float>     *RECHB__Particle_vz;
   std::vector<Float_t>   vec_RECHB__Particle_vz;
   if(dictionary->hasSchema("RECHB::Particle")==true){
      if(dictionary->hasEntry("RECHB::Particle","beta")==true){
         RECHB__Particle_beta = reader.getBranch<float>     ("RECHB::Particle","beta");
         tree->Branch("RECHB__Particle_beta",&vec_RECHB__Particle_beta);
      }
      if(dictionary->hasEntry("RECHB::Particle","charge")==true){
         RECHB__Particle_charge = reader.getBranch<int8_t>    ("RECHB::Particle","charge");
         tree->Branch("RECHB__Particle_charge",&vec_RECHB__Particle_charge);
      }
      if(dictionary->hasEntry("RECHB::Particle","chi2pid")==true){
         RECHB__Particle_chi2pid = reader.getBranch<float>     ("RECHB::Particle","chi2pid");
         tree->Branch("RECHB__Particle_chi2pid",&vec_RECHB__Particle_chi2pid);
      }
      if(dictionary->hasEntry("RECHB::Particle","pid")==true){
         RECHB__Particle_pid = reader.getBranch<int32_t>   ("RECHB::Particle","pid");
         tree->Branch("RECHB__Particle_pid",&vec_RECHB__Particle_pid);
      }
      if(dictionary->hasEntry("RECHB::Particle","px")==true){
         RECHB__Particle_px = reader.getBranch<float>     ("RECHB::Particle","px");
         tree->Branch("RECHB__Particle_px",&vec_RECHB__Particle_px);
      }
      if(dictionary->hasEntry("RECHB::Particle","py")==true){
         RECHB__Particle_py = reader.getBranch<float>     ("RECHB::Particle","py");
         tree->Branch("RECHB__Particle_py",&vec_RECHB__Particle_py);
      }
      if(dictionary->hasEntry("RECHB::Particle","pz")==true){
         RECHB__Particle_pz = reader.getBranch<float>     ("RECHB::Particle","pz");
         tree->Branch("RECHB__Particle_pz",&vec_RECHB__Particle_pz);
      }
      if(dictionary->hasEntry("RECHB::Particle","status")==true){
         RECHB__Particle_status = reader.getBranch<int16_t>   ("RECHB::Particle","status");
         tree->Branch("RECHB__Particle_status",&vec_RECHB__Particle_status);
      }
      if(dictionary->hasEntry("RECHB::Particle","vx")==true){
         RECHB__Particle_vx = reader.getBranch<float>     ("RECHB::Particle","vx");
         tree->Branch("RECHB__Particle_vx",&vec_RECHB__Particle_vx);
      }
      if(dictionary->hasEntry("RECHB::Particle","vy")==true){
         RECHB__Particle_vy = reader.getBranch<float>     ("RECHB::Particle","vy");
         tree->Branch("RECHB__Particle_vy",&vec_RECHB__Particle_vy);
      }
      if(dictionary->hasEntry("RECHB::Particle","vz")==true){
         RECHB__Particle_vz = reader.getBranch<float>     ("RECHB::Particle","vz");
         tree->Branch("RECHB__Particle_vz",&vec_RECHB__Particle_vz);
      }
   }
   hipo::node<float>     *RECHB__Scintillator_chi2;
   std::vector<Float_t>   vec_RECHB__Scintillator_chi2;
   hipo::node<int16_t>   *RECHB__Scintillator_component;
   std::vector<Short_t>   vec_RECHB__Scintillator_component;
   hipo::node<int8_t>    *RECHB__Scintillator_detector;
   std::vector<Char_t>   vec_RECHB__Scintillator_detector;
   hipo::node<float>     *RECHB__Scintillator_energy;
   std::vector<Float_t>   vec_RECHB__Scintillator_energy;
   hipo::node<float>     *RECHB__Scintillator_hx;
   std::vector<Float_t>   vec_RECHB__Scintillator_hx;
   hipo::node<float>     *RECHB__Scintillator_hy;
   std::vector<Float_t>   vec_RECHB__Scintillator_hy;
   hipo::node<float>     *RECHB__Scintillator_hz;
   std::vector<Float_t>   vec_RECHB__Scintillator_hz;
   hipo::node<int16_t>   *RECHB__Scintillator_index;
   std::vector<Short_t>   vec_RECHB__Scintillator_index;
   hipo::node<int8_t>    *RECHB__Scintillator_layer;
   std::vector<Char_t>   vec_RECHB__Scintillator_layer;
   hipo::node<float>     *RECHB__Scintillator_path;
   std::vector<Float_t>   vec_RECHB__Scintillator_path;
   hipo::node<int16_t>   *RECHB__Scintillator_pindex;
   std::vector<Short_t>   vec_RECHB__Scintillator_pindex;
   hipo::node<int8_t>    *RECHB__Scintillator_sector;
   std::vector<Char_t>   vec_RECHB__Scintillator_sector;
   hipo::node<int16_t>   *RECHB__Scintillator_status;
   std::vector<Short_t>   vec_RECHB__Scintillator_status;
   hipo::node<float>     *RECHB__Scintillator_time;
   std::vector<Float_t>   vec_RECHB__Scintillator_time;
   hipo::node<float>     *RECHB__Scintillator_x;
   std::vector<Float_t>   vec_RECHB__Scintillator_x;
   hipo::node<float>     *RECHB__Scintillator_y;
   std::vector<Float_t>   vec_RECHB__Scintillator_y;
   hipo::node<float>     *RECHB__Scintillator_z;
   std::vector<Float_t>   vec_RECHB__Scintillator_z;
   if(dictionary->hasSchema("RECHB::Scintillator")==true){
      if(dictionary->hasEntry("RECHB::Scintillator","chi2")==true){
         RECHB__Scintillator_chi2 = reader.getBranch<float>     ("RECHB::Scintillator","chi2");
         tree->Branch("RECHB__Scintillator_chi2",&vec_RECHB__Scintillator_chi2);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","component")==true){
         RECHB__Scintillator_component = reader.getBranch<int16_t>   ("RECHB::Scintillator","component");
         tree->Branch("RECHB__Scintillator_component",&vec_RECHB__Scintillator_component);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","detector")==true){
         RECHB__Scintillator_detector = reader.getBranch<int8_t>    ("RECHB::Scintillator","detector");
         tree->Branch("RECHB__Scintillator_detector",&vec_RECHB__Scintillator_detector);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","energy")==true){
         RECHB__Scintillator_energy = reader.getBranch<float>     ("RECHB::Scintillator","energy");
         tree->Branch("RECHB__Scintillator_energy",&vec_RECHB__Scintillator_energy);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","hx")==true){
         RECHB__Scintillator_hx = reader.getBranch<float>     ("RECHB::Scintillator","hx");
         tree->Branch("RECHB__Scintillator_hx",&vec_RECHB__Scintillator_hx);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","hy")==true){
         RECHB__Scintillator_hy = reader.getBranch<float>     ("RECHB::Scintillator","hy");
         tree->Branch("RECHB__Scintillator_hy",&vec_RECHB__Scintillator_hy);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","hz")==true){
         RECHB__Scintillator_hz = reader.getBranch<float>     ("RECHB::Scintillator","hz");
         tree->Branch("RECHB__Scintillator_hz",&vec_RECHB__Scintillator_hz);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","index")==true){
         RECHB__Scintillator_index = reader.getBranch<int16_t>   ("RECHB::Scintillator","index");
         tree->Branch("RECHB__Scintillator_index",&vec_RECHB__Scintillator_index);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","layer")==true){
         RECHB__Scintillator_layer = reader.getBranch<int8_t>    ("RECHB::Scintillator","layer");
         tree->Branch("RECHB__Scintillator_layer",&vec_RECHB__Scintillator_layer);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","path")==true){
         RECHB__Scintillator_path = reader.getBranch<float>     ("RECHB::Scintillator","path");
         tree->Branch("RECHB__Scintillator_path",&vec_RECHB__Scintillator_path);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","pindex")==true){
         RECHB__Scintillator_pindex = reader.getBranch<int16_t>   ("RECHB::Scintillator","pindex");
         tree->Branch("RECHB__Scintillator_pindex",&vec_RECHB__Scintillator_pindex);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","sector")==true){
         RECHB__Scintillator_sector = reader.getBranch<int8_t>    ("RECHB::Scintillator","sector");
         tree->Branch("RECHB__Scintillator_sector",&vec_RECHB__Scintillator_sector);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","status")==true){
         RECHB__Scintillator_status = reader.getBranch<int16_t>   ("RECHB::Scintillator","status");
         tree->Branch("RECHB__Scintillator_status",&vec_RECHB__Scintillator_status);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","time")==true){
         RECHB__Scintillator_time = reader.getBranch<float>     ("RECHB::Scintillator","time");
         tree->Branch("RECHB__Scintillator_time",&vec_RECHB__Scintillator_time);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","x")==true){
         RECHB__Scintillator_x = reader.getBranch<float>     ("RECHB::Scintillator","x");
         tree->Branch("RECHB__Scintillator_x",&vec_RECHB__Scintillator_x);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","y")==true){
         RECHB__Scintillator_y = reader.getBranch<float>     ("RECHB::Scintillator","y");
         tree->Branch("RECHB__Scintillator_y",&vec_RECHB__Scintillator_y);
      }
      if(dictionary->hasEntry("RECHB::Scintillator","z")==true){
         RECHB__Scintillator_z = reader.getBranch<float>     ("RECHB::Scintillator","z");
         tree->Branch("RECHB__Scintillator_z",&vec_RECHB__Scintillator_z);
      }
   }
   hipo::node<int16_t>   *RECHB__Track_NDF;
   std::vector<Short_t>   vec_RECHB__Track_NDF;
   hipo::node<int16_t>   *RECHB__Track_NDF_nomm;
   std::vector<Short_t>   vec_RECHB__Track_NDF_nomm;
   hipo::node<float>     *RECHB__Track_chi2;
   std::vector<Float_t>   vec_RECHB__Track_chi2;
   hipo::node<float>     *RECHB__Track_chi2_nomm;
   std::vector<Float_t>   vec_RECHB__Track_chi2_nomm;
   hipo::node<int8_t>    *RECHB__Track_detector;
   std::vector<Char_t>   vec_RECHB__Track_detector;
   hipo::node<int16_t>   *RECHB__Track_index;
   std::vector<Short_t>   vec_RECHB__Track_index;
   hipo::node<int16_t>   *RECHB__Track_pindex;
   std::vector<Short_t>   vec_RECHB__Track_pindex;
   hipo::node<float>     *RECHB__Track_px_nomm;
   std::vector<Float_t>   vec_RECHB__Track_px_nomm;
   hipo::node<float>     *RECHB__Track_py_nomm;
   std::vector<Float_t>   vec_RECHB__Track_py_nomm;
   hipo::node<float>     *RECHB__Track_pz_nomm;
   std::vector<Float_t>   vec_RECHB__Track_pz_nomm;
   hipo::node<int8_t>    *RECHB__Track_q;
   std::vector<Char_t>   vec_RECHB__Track_q;
   hipo::node<int8_t>    *RECHB__Track_sector;
   std::vector<Char_t>   vec_RECHB__Track_sector;
   hipo::node<int16_t>   *RECHB__Track_status;
   std::vector<Short_t>   vec_RECHB__Track_status;
   hipo::node<float>     *RECHB__Track_vx_nomm;
   std::vector<Float_t>   vec_RECHB__Track_vx_nomm;
   hipo::node<float>     *RECHB__Track_vy_nomm;
   std::vector<Float_t>   vec_RECHB__Track_vy_nomm;
   hipo::node<float>     *RECHB__Track_vz_nomm;
   std::vector<Float_t>   vec_RECHB__Track_vz_nomm;
   if(dictionary->hasSchema("RECHB::Track")==true){
      if(dictionary->hasEntry("RECHB::Track","NDF")==true){
         RECHB__Track_NDF = reader.getBranch<int16_t>   ("RECHB::Track","NDF");
         tree->Branch("RECHB__Track_NDF",&vec_RECHB__Track_NDF);
      }
      if(dictionary->hasEntry("RECHB::Track","NDF_nomm")==true){
         RECHB__Track_NDF_nomm = reader.getBranch<int16_t>   ("RECHB::Track","NDF_nomm");
         tree->Branch("RECHB__Track_NDF_nomm",&vec_RECHB__Track_NDF_nomm);
      }
      if(dictionary->hasEntry("RECHB::Track","chi2")==true){
         RECHB__Track_chi2 = reader.getBranch<float>     ("RECHB::Track","chi2");
         tree->Branch("RECHB__Track_chi2",&vec_RECHB__Track_chi2);
      }
      if(dictionary->hasEntry("RECHB::Track","chi2_nomm")==true){
         RECHB__Track_chi2_nomm = reader.getBranch<float>     ("RECHB::Track","chi2_nomm");
         tree->Branch("RECHB__Track_chi2_nomm",&vec_RECHB__Track_chi2_nomm);
      }
      if(dictionary->hasEntry("RECHB::Track","detector")==true){
         RECHB__Track_detector = reader.getBranch<int8_t>    ("RECHB::Track","detector");
         tree->Branch("RECHB__Track_detector",&vec_RECHB__Track_detector);
      }
      if(dictionary->hasEntry("RECHB::Track","index")==true){
         RECHB__Track_index = reader.getBranch<int16_t>   ("RECHB::Track","index");
         tree->Branch("RECHB__Track_index",&vec_RECHB__Track_index);
      }
      if(dictionary->hasEntry("RECHB::Track","pindex")==true){
         RECHB__Track_pindex = reader.getBranch<int16_t>   ("RECHB::Track","pindex");
         tree->Branch("RECHB__Track_pindex",&vec_RECHB__Track_pindex);
      }
      if(dictionary->hasEntry("RECHB::Track","px_nomm")==true){
         RECHB__Track_px_nomm = reader.getBranch<float>     ("RECHB::Track","px_nomm");
         tree->Branch("RECHB__Track_px_nomm",&vec_RECHB__Track_px_nomm);
      }
      if(dictionary->hasEntry("RECHB::Track","py_nomm")==true){
         RECHB__Track_py_nomm = reader.getBranch<float>     ("RECHB::Track","py_nomm");
         tree->Branch("RECHB__Track_py_nomm",&vec_RECHB__Track_py_nomm);
      }
      if(dictionary->hasEntry("RECHB::Track","pz_nomm")==true){
         RECHB__Track_pz_nomm = reader.getBranch<float>     ("RECHB::Track","pz_nomm");
         tree->Branch("RECHB__Track_pz_nomm",&vec_RECHB__Track_pz_nomm);
      }
      if(dictionary->hasEntry("RECHB::Track","q")==true){
         RECHB__Track_q = reader.getBranch<int8_t>    ("RECHB::Track","q");
         tree->Branch("RECHB__Track_q",&vec_RECHB__Track_q);
      }
      if(dictionary->hasEntry("RECHB::Track","sector")==true){
         RECHB__Track_sector = reader.getBranch<int8_t>    ("RECHB::Track","sector");
         tree->Branch("RECHB__Track_sector",&vec_RECHB__Track_sector);
      }
      if(dictionary->hasEntry("RECHB::Track","status")==true){
         RECHB__Track_status = reader.getBranch<int16_t>   ("RECHB::Track","status");
         tree->Branch("RECHB__Track_status",&vec_RECHB__Track_status);
      }
      if(dictionary->hasEntry("RECHB::Track","vx_nomm")==true){
         RECHB__Track_vx_nomm = reader.getBranch<float>     ("RECHB::Track","vx_nomm");
         tree->Branch("RECHB__Track_vx_nomm",&vec_RECHB__Track_vx_nomm);
      }
      if(dictionary->hasEntry("RECHB::Track","vy_nomm")==true){
         RECHB__Track_vy_nomm = reader.getBranch<float>     ("RECHB::Track","vy_nomm");
         tree->Branch("RECHB__Track_vy_nomm",&vec_RECHB__Track_vy_nomm);
      }
      if(dictionary->hasEntry("RECHB::Track","vz_nomm")==true){
         RECHB__Track_vz_nomm = reader.getBranch<float>     ("RECHB::Track","vz_nomm");
         tree->Branch("RECHB__Track_vz_nomm",&vec_RECHB__Track_vz_nomm);
      }
   }
   hipo::node<float>     *RECHB__TrackCross_c_ux;
   std::vector<Float_t>   vec_RECHB__TrackCross_c_ux;
   hipo::node<float>     *RECHB__TrackCross_c_uy;
   std::vector<Float_t>   vec_RECHB__TrackCross_c_uy;
   hipo::node<float>     *RECHB__TrackCross_c_uz;
   std::vector<Float_t>   vec_RECHB__TrackCross_c_uz;
   hipo::node<float>     *RECHB__TrackCross_c_x;
   std::vector<Float_t>   vec_RECHB__TrackCross_c_x;
   hipo::node<float>     *RECHB__TrackCross_c_y;
   std::vector<Float_t>   vec_RECHB__TrackCross_c_y;
   hipo::node<float>     *RECHB__TrackCross_c_z;
   std::vector<Float_t>   vec_RECHB__TrackCross_c_z;
   hipo::node<int8_t>    *RECHB__TrackCross_detector;
   std::vector<Char_t>   vec_RECHB__TrackCross_detector;
   hipo::node<int16_t>   *RECHB__TrackCross_index;
   std::vector<Short_t>   vec_RECHB__TrackCross_index;
   hipo::node<int8_t>    *RECHB__TrackCross_layer;
   std::vector<Char_t>   vec_RECHB__TrackCross_layer;
   hipo::node<int16_t>   *RECHB__TrackCross_pindex;
   std::vector<Short_t>   vec_RECHB__TrackCross_pindex;
   hipo::node<int8_t>    *RECHB__TrackCross_sector;
   std::vector<Char_t>   vec_RECHB__TrackCross_sector;
   hipo::node<int16_t>   *RECHB__TrackCross_status;
   std::vector<Short_t>   vec_RECHB__TrackCross_status;
   if(dictionary->hasSchema("RECHB::TrackCross")==true){
      if(dictionary->hasEntry("RECHB::TrackCross","c_ux")==true){
         RECHB__TrackCross_c_ux = reader.getBranch<float>     ("RECHB::TrackCross","c_ux");
         tree->Branch("RECHB__TrackCross_c_ux",&vec_RECHB__TrackCross_c_ux);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_uy")==true){
         RECHB__TrackCross_c_uy = reader.getBranch<float>     ("RECHB::TrackCross","c_uy");
         tree->Branch("RECHB__TrackCross_c_uy",&vec_RECHB__TrackCross_c_uy);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_uz")==true){
         RECHB__TrackCross_c_uz = reader.getBranch<float>     ("RECHB::TrackCross","c_uz");
         tree->Branch("RECHB__TrackCross_c_uz",&vec_RECHB__TrackCross_c_uz);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_x")==true){
         RECHB__TrackCross_c_x = reader.getBranch<float>     ("RECHB::TrackCross","c_x");
         tree->Branch("RECHB__TrackCross_c_x",&vec_RECHB__TrackCross_c_x);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_y")==true){
         RECHB__TrackCross_c_y = reader.getBranch<float>     ("RECHB::TrackCross","c_y");
         tree->Branch("RECHB__TrackCross_c_y",&vec_RECHB__TrackCross_c_y);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_z")==true){
         RECHB__TrackCross_c_z = reader.getBranch<float>     ("RECHB::TrackCross","c_z");
         tree->Branch("RECHB__TrackCross_c_z",&vec_RECHB__TrackCross_c_z);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","detector")==true){
         RECHB__TrackCross_detector = reader.getBranch<int8_t>    ("RECHB::TrackCross","detector");
         tree->Branch("RECHB__TrackCross_detector",&vec_RECHB__TrackCross_detector);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","index")==true){
         RECHB__TrackCross_index = reader.getBranch<int16_t>   ("RECHB::TrackCross","index");
         tree->Branch("RECHB__TrackCross_index",&vec_RECHB__TrackCross_index);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","layer")==true){
         RECHB__TrackCross_layer = reader.getBranch<int8_t>    ("RECHB::TrackCross","layer");
         tree->Branch("RECHB__TrackCross_layer",&vec_RECHB__TrackCross_layer);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","pindex")==true){
         RECHB__TrackCross_pindex = reader.getBranch<int16_t>   ("RECHB::TrackCross","pindex");
         tree->Branch("RECHB__TrackCross_pindex",&vec_RECHB__TrackCross_pindex);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","sector")==true){
         RECHB__TrackCross_sector = reader.getBranch<int8_t>    ("RECHB::TrackCross","sector");
         tree->Branch("RECHB__TrackCross_sector",&vec_RECHB__TrackCross_sector);
      }
      if(dictionary->hasEntry("RECHB::TrackCross","status")==true){
         RECHB__TrackCross_status = reader.getBranch<int16_t>   ("RECHB::TrackCross","status");
         tree->Branch("RECHB__TrackCross_status",&vec_RECHB__TrackCross_status);
      }
   }
   hipo::node<int32_t>   *RF__adc_ADC;
   std::vector<Int_t>   vec_RF__adc_ADC;
   hipo::node<int16_t>   *RF__adc_component;
   std::vector<Short_t>   vec_RF__adc_component;
   hipo::node<int8_t>    *RF__adc_layer;
   std::vector<Char_t>   vec_RF__adc_layer;
   hipo::node<int8_t>    *RF__adc_order;
   std::vector<Char_t>   vec_RF__adc_order;
   hipo::node<int16_t>   *RF__adc_ped;
   std::vector<Short_t>   vec_RF__adc_ped;
   hipo::node<int8_t>    *RF__adc_sector;
   std::vector<Char_t>   vec_RF__adc_sector;
   hipo::node<float>     *RF__adc_time;
   std::vector<Float_t>   vec_RF__adc_time;
   if(dictionary->hasSchema("RF::adc")==true){
      if(dictionary->hasEntry("RF::adc","ADC")==true){
         RF__adc_ADC = reader.getBranch<int32_t>   ("RF::adc","ADC");
         tree->Branch("RF__adc_ADC",&vec_RF__adc_ADC);
      }
      if(dictionary->hasEntry("RF::adc","component")==true){
         RF__adc_component = reader.getBranch<int16_t>   ("RF::adc","component");
         tree->Branch("RF__adc_component",&vec_RF__adc_component);
      }
      if(dictionary->hasEntry("RF::adc","layer")==true){
         RF__adc_layer = reader.getBranch<int8_t>    ("RF::adc","layer");
         tree->Branch("RF__adc_layer",&vec_RF__adc_layer);
      }
      if(dictionary->hasEntry("RF::adc","order")==true){
         RF__adc_order = reader.getBranch<int8_t>    ("RF::adc","order");
         tree->Branch("RF__adc_order",&vec_RF__adc_order);
      }
      if(dictionary->hasEntry("RF::adc","ped")==true){
         RF__adc_ped = reader.getBranch<int16_t>   ("RF::adc","ped");
         tree->Branch("RF__adc_ped",&vec_RF__adc_ped);
      }
      if(dictionary->hasEntry("RF::adc","sector")==true){
         RF__adc_sector = reader.getBranch<int8_t>    ("RF::adc","sector");
         tree->Branch("RF__adc_sector",&vec_RF__adc_sector);
      }
      if(dictionary->hasEntry("RF::adc","time")==true){
         RF__adc_time = reader.getBranch<float>     ("RF::adc","time");
         tree->Branch("RF__adc_time",&vec_RF__adc_time);
      }
   }
   hipo::node<int32_t>   *RF__tdc_TDC;
   std::vector<Int_t>   vec_RF__tdc_TDC;
   hipo::node<int16_t>   *RF__tdc_component;
   std::vector<Short_t>   vec_RF__tdc_component;
   hipo::node<int8_t>    *RF__tdc_layer;
   std::vector<Char_t>   vec_RF__tdc_layer;
   hipo::node<int8_t>    *RF__tdc_order;
   std::vector<Char_t>   vec_RF__tdc_order;
   hipo::node<int8_t>    *RF__tdc_sector;
   std::vector<Char_t>   vec_RF__tdc_sector;
   if(dictionary->hasSchema("RF::tdc")==true){
      if(dictionary->hasEntry("RF::tdc","TDC")==true){
         RF__tdc_TDC = reader.getBranch<int32_t>   ("RF::tdc","TDC");
         tree->Branch("RF__tdc_TDC",&vec_RF__tdc_TDC);
      }
      if(dictionary->hasEntry("RF::tdc","component")==true){
         RF__tdc_component = reader.getBranch<int16_t>   ("RF::tdc","component");
         tree->Branch("RF__tdc_component",&vec_RF__tdc_component);
      }
      if(dictionary->hasEntry("RF::tdc","layer")==true){
         RF__tdc_layer = reader.getBranch<int8_t>    ("RF::tdc","layer");
         tree->Branch("RF__tdc_layer",&vec_RF__tdc_layer);
      }
      if(dictionary->hasEntry("RF::tdc","order")==true){
         RF__tdc_order = reader.getBranch<int8_t>    ("RF::tdc","order");
         tree->Branch("RF__tdc_order",&vec_RF__tdc_order);
      }
      if(dictionary->hasEntry("RF::tdc","sector")==true){
         RF__tdc_sector = reader.getBranch<int8_t>    ("RF::tdc","sector");
         tree->Branch("RF__tdc_sector",&vec_RF__tdc_sector);
      }
   }
   hipo::node<int32_t>   *RICH__adc_ADC;
   std::vector<Int_t>   vec_RICH__adc_ADC;
   hipo::node<int16_t>   *RICH__adc_component;
   std::vector<Short_t>   vec_RICH__adc_component;
   hipo::node<int8_t>    *RICH__adc_layer;
   std::vector<Char_t>   vec_RICH__adc_layer;
   hipo::node<int8_t>    *RICH__adc_order;
   std::vector<Char_t>   vec_RICH__adc_order;
   hipo::node<int16_t>   *RICH__adc_ped;
   std::vector<Short_t>   vec_RICH__adc_ped;
   hipo::node<int8_t>    *RICH__adc_sector;
   std::vector<Char_t>   vec_RICH__adc_sector;
   hipo::node<float>     *RICH__adc_time;
   std::vector<Float_t>   vec_RICH__adc_time;
   if(dictionary->hasSchema("RICH::adc")==true){
      if(dictionary->hasEntry("RICH::adc","ADC")==true){
         RICH__adc_ADC = reader.getBranch<int32_t>   ("RICH::adc","ADC");
         tree->Branch("RICH__adc_ADC",&vec_RICH__adc_ADC);
      }
      if(dictionary->hasEntry("RICH::adc","component")==true){
         RICH__adc_component = reader.getBranch<int16_t>   ("RICH::adc","component");
         tree->Branch("RICH__adc_component",&vec_RICH__adc_component);
      }
      if(dictionary->hasEntry("RICH::adc","layer")==true){
         RICH__adc_layer = reader.getBranch<int8_t>    ("RICH::adc","layer");
         tree->Branch("RICH__adc_layer",&vec_RICH__adc_layer);
      }
      if(dictionary->hasEntry("RICH::adc","order")==true){
         RICH__adc_order = reader.getBranch<int8_t>    ("RICH::adc","order");
         tree->Branch("RICH__adc_order",&vec_RICH__adc_order);
      }
      if(dictionary->hasEntry("RICH::adc","ped")==true){
         RICH__adc_ped = reader.getBranch<int16_t>   ("RICH::adc","ped");
         tree->Branch("RICH__adc_ped",&vec_RICH__adc_ped);
      }
      if(dictionary->hasEntry("RICH::adc","sector")==true){
         RICH__adc_sector = reader.getBranch<int8_t>    ("RICH::adc","sector");
         tree->Branch("RICH__adc_sector",&vec_RICH__adc_sector);
      }
      if(dictionary->hasEntry("RICH::adc","time")==true){
         RICH__adc_time = reader.getBranch<float>     ("RICH::adc","time");
         tree->Branch("RICH__adc_time",&vec_RICH__adc_time);
      }
   }
   hipo::node<float>     *RICH__clusters_charge;
   std::vector<Float_t>   vec_RICH__clusters_charge;
   hipo::node<int16_t>   *RICH__clusters_id;
   std::vector<Short_t>   vec_RICH__clusters_id;
   hipo::node<int16_t>   *RICH__clusters_pmt;
   std::vector<Short_t>   vec_RICH__clusters_pmt;
   hipo::node<int16_t>   *RICH__clusters_sector;
   std::vector<Short_t>   vec_RICH__clusters_sector;
   hipo::node<int16_t>   *RICH__clusters_size;
   std::vector<Short_t>   vec_RICH__clusters_size;
   hipo::node<int16_t>   *RICH__clusters_tile;
   std::vector<Short_t>   vec_RICH__clusters_tile;
   hipo::node<float>     *RICH__clusters_time;
   std::vector<Float_t>   vec_RICH__clusters_time;
   hipo::node<float>     *RICH__clusters_wtime;
   std::vector<Float_t>   vec_RICH__clusters_wtime;
   hipo::node<float>     *RICH__clusters_wx;
   std::vector<Float_t>   vec_RICH__clusters_wx;
   hipo::node<float>     *RICH__clusters_wy;
   std::vector<Float_t>   vec_RICH__clusters_wy;
   hipo::node<float>     *RICH__clusters_wz;
   std::vector<Float_t>   vec_RICH__clusters_wz;
   hipo::node<float>     *RICH__clusters_x;
   std::vector<Float_t>   vec_RICH__clusters_x;
   hipo::node<float>     *RICH__clusters_y;
   std::vector<Float_t>   vec_RICH__clusters_y;
   hipo::node<float>     *RICH__clusters_z;
   std::vector<Float_t>   vec_RICH__clusters_z;
   if(dictionary->hasSchema("RICH::clusters")==true){
      if(dictionary->hasEntry("RICH::clusters","charge")==true){
         RICH__clusters_charge = reader.getBranch<float>     ("RICH::clusters","charge");
         tree->Branch("RICH__clusters_charge",&vec_RICH__clusters_charge);
      }
      if(dictionary->hasEntry("RICH::clusters","id")==true){
         RICH__clusters_id = reader.getBranch<int16_t>   ("RICH::clusters","id");
         tree->Branch("RICH__clusters_id",&vec_RICH__clusters_id);
      }
      if(dictionary->hasEntry("RICH::clusters","pmt")==true){
         RICH__clusters_pmt = reader.getBranch<int16_t>   ("RICH::clusters","pmt");
         tree->Branch("RICH__clusters_pmt",&vec_RICH__clusters_pmt);
      }
      if(dictionary->hasEntry("RICH::clusters","sector")==true){
         RICH__clusters_sector = reader.getBranch<int16_t>   ("RICH::clusters","sector");
         tree->Branch("RICH__clusters_sector",&vec_RICH__clusters_sector);
      }
      if(dictionary->hasEntry("RICH::clusters","size")==true){
         RICH__clusters_size = reader.getBranch<int16_t>   ("RICH::clusters","size");
         tree->Branch("RICH__clusters_size",&vec_RICH__clusters_size);
      }
      if(dictionary->hasEntry("RICH::clusters","tile")==true){
         RICH__clusters_tile = reader.getBranch<int16_t>   ("RICH::clusters","tile");
         tree->Branch("RICH__clusters_tile",&vec_RICH__clusters_tile);
      }
      if(dictionary->hasEntry("RICH::clusters","time")==true){
         RICH__clusters_time = reader.getBranch<float>     ("RICH::clusters","time");
         tree->Branch("RICH__clusters_time",&vec_RICH__clusters_time);
      }
      if(dictionary->hasEntry("RICH::clusters","wtime")==true){
         RICH__clusters_wtime = reader.getBranch<float>     ("RICH::clusters","wtime");
         tree->Branch("RICH__clusters_wtime",&vec_RICH__clusters_wtime);
      }
      if(dictionary->hasEntry("RICH::clusters","wx")==true){
         RICH__clusters_wx = reader.getBranch<float>     ("RICH::clusters","wx");
         tree->Branch("RICH__clusters_wx",&vec_RICH__clusters_wx);
      }
      if(dictionary->hasEntry("RICH::clusters","wy")==true){
         RICH__clusters_wy = reader.getBranch<float>     ("RICH::clusters","wy");
         tree->Branch("RICH__clusters_wy",&vec_RICH__clusters_wy);
      }
      if(dictionary->hasEntry("RICH::clusters","wz")==true){
         RICH__clusters_wz = reader.getBranch<float>     ("RICH::clusters","wz");
         tree->Branch("RICH__clusters_wz",&vec_RICH__clusters_wz);
      }
      if(dictionary->hasEntry("RICH::clusters","x")==true){
         RICH__clusters_x = reader.getBranch<float>     ("RICH::clusters","x");
         tree->Branch("RICH__clusters_x",&vec_RICH__clusters_x);
      }
      if(dictionary->hasEntry("RICH::clusters","y")==true){
         RICH__clusters_y = reader.getBranch<float>     ("RICH::clusters","y");
         tree->Branch("RICH__clusters_y",&vec_RICH__clusters_y);
      }
      if(dictionary->hasEntry("RICH::clusters","z")==true){
         RICH__clusters_z = reader.getBranch<float>     ("RICH::clusters","z");
         tree->Branch("RICH__clusters_z",&vec_RICH__clusters_z);
      }
   }
   hipo::node<int16_t>   *RICH__hits_anode;
   std::vector<Short_t>   vec_RICH__hits_anode;
   hipo::node<int16_t>   *RICH__hits_cluster;
   std::vector<Short_t>   vec_RICH__hits_cluster;
   hipo::node<int16_t>   *RICH__hits_duration;
   std::vector<Short_t>   vec_RICH__hits_duration;
   hipo::node<int16_t>   *RICH__hits_glx;
   std::vector<Short_t>   vec_RICH__hits_glx;
   hipo::node<int16_t>   *RICH__hits_gly;
   std::vector<Short_t>   vec_RICH__hits_gly;
   hipo::node<int16_t>   *RICH__hits_id;
   std::vector<Short_t>   vec_RICH__hits_id;
   hipo::node<int16_t>   *RICH__hits_idx;
   std::vector<Short_t>   vec_RICH__hits_idx;
   hipo::node<int16_t>   *RICH__hits_idy;
   std::vector<Short_t>   vec_RICH__hits_idy;
   hipo::node<int16_t>   *RICH__hits_pmt;
   std::vector<Short_t>   vec_RICH__hits_pmt;
   hipo::node<int16_t>   *RICH__hits_sector;
   std::vector<Short_t>   vec_RICH__hits_sector;
   hipo::node<int16_t>   *RICH__hits_tile;
   std::vector<Short_t>   vec_RICH__hits_tile;
   hipo::node<int16_t>   *RICH__hits_time;
   std::vector<Short_t>   vec_RICH__hits_time;
   hipo::node<int16_t>   *RICH__hits_xtalk;
   std::vector<Short_t>   vec_RICH__hits_xtalk;
   if(dictionary->hasSchema("RICH::hits")==true){
      if(dictionary->hasEntry("RICH::hits","anode")==true){
         RICH__hits_anode = reader.getBranch<int16_t>   ("RICH::hits","anode");
         tree->Branch("RICH__hits_anode",&vec_RICH__hits_anode);
      }
      if(dictionary->hasEntry("RICH::hits","cluster")==true){
         RICH__hits_cluster = reader.getBranch<int16_t>   ("RICH::hits","cluster");
         tree->Branch("RICH__hits_cluster",&vec_RICH__hits_cluster);
      }
      if(dictionary->hasEntry("RICH::hits","duration")==true){
         RICH__hits_duration = reader.getBranch<int16_t>   ("RICH::hits","duration");
         tree->Branch("RICH__hits_duration",&vec_RICH__hits_duration);
      }
      if(dictionary->hasEntry("RICH::hits","glx")==true){
         RICH__hits_glx = reader.getBranch<int16_t>   ("RICH::hits","glx");
         tree->Branch("RICH__hits_glx",&vec_RICH__hits_glx);
      }
      if(dictionary->hasEntry("RICH::hits","gly")==true){
         RICH__hits_gly = reader.getBranch<int16_t>   ("RICH::hits","gly");
         tree->Branch("RICH__hits_gly",&vec_RICH__hits_gly);
      }
      if(dictionary->hasEntry("RICH::hits","id")==true){
         RICH__hits_id = reader.getBranch<int16_t>   ("RICH::hits","id");
         tree->Branch("RICH__hits_id",&vec_RICH__hits_id);
      }
      if(dictionary->hasEntry("RICH::hits","idx")==true){
         RICH__hits_idx = reader.getBranch<int16_t>   ("RICH::hits","idx");
         tree->Branch("RICH__hits_idx",&vec_RICH__hits_idx);
      }
      if(dictionary->hasEntry("RICH::hits","idy")==true){
         RICH__hits_idy = reader.getBranch<int16_t>   ("RICH::hits","idy");
         tree->Branch("RICH__hits_idy",&vec_RICH__hits_idy);
      }
      if(dictionary->hasEntry("RICH::hits","pmt")==true){
         RICH__hits_pmt = reader.getBranch<int16_t>   ("RICH::hits","pmt");
         tree->Branch("RICH__hits_pmt",&vec_RICH__hits_pmt);
      }
      if(dictionary->hasEntry("RICH::hits","sector")==true){
         RICH__hits_sector = reader.getBranch<int16_t>   ("RICH::hits","sector");
         tree->Branch("RICH__hits_sector",&vec_RICH__hits_sector);
      }
      if(dictionary->hasEntry("RICH::hits","tile")==true){
         RICH__hits_tile = reader.getBranch<int16_t>   ("RICH::hits","tile");
         tree->Branch("RICH__hits_tile",&vec_RICH__hits_tile);
      }
      if(dictionary->hasEntry("RICH::hits","time")==true){
         RICH__hits_time = reader.getBranch<int16_t>   ("RICH::hits","time");
         tree->Branch("RICH__hits_time",&vec_RICH__hits_time);
      }
      if(dictionary->hasEntry("RICH::hits","xtalk")==true){
         RICH__hits_xtalk = reader.getBranch<int16_t>   ("RICH::hits","xtalk");
         tree->Branch("RICH__hits_xtalk",&vec_RICH__hits_xtalk);
      }
   }
   hipo::node<int32_t>   *RICH__tdc_TDC;
   std::vector<Int_t>   vec_RICH__tdc_TDC;
   hipo::node<int16_t>   *RICH__tdc_component;
   std::vector<Short_t>   vec_RICH__tdc_component;
   hipo::node<int8_t>    *RICH__tdc_layer;
   std::vector<Char_t>   vec_RICH__tdc_layer;
   hipo::node<int8_t>    *RICH__tdc_order;
   std::vector<Char_t>   vec_RICH__tdc_order;
   hipo::node<int8_t>    *RICH__tdc_sector;
   std::vector<Char_t>   vec_RICH__tdc_sector;
   if(dictionary->hasSchema("RICH::tdc")==true){
      if(dictionary->hasEntry("RICH::tdc","TDC")==true){
         RICH__tdc_TDC = reader.getBranch<int32_t>   ("RICH::tdc","TDC");
         tree->Branch("RICH__tdc_TDC",&vec_RICH__tdc_TDC);
      }
      if(dictionary->hasEntry("RICH::tdc","component")==true){
         RICH__tdc_component = reader.getBranch<int16_t>   ("RICH::tdc","component");
         tree->Branch("RICH__tdc_component",&vec_RICH__tdc_component);
      }
      if(dictionary->hasEntry("RICH::tdc","layer")==true){
         RICH__tdc_layer = reader.getBranch<int8_t>    ("RICH::tdc","layer");
         tree->Branch("RICH__tdc_layer",&vec_RICH__tdc_layer);
      }
      if(dictionary->hasEntry("RICH::tdc","order")==true){
         RICH__tdc_order = reader.getBranch<int8_t>    ("RICH::tdc","order");
         tree->Branch("RICH__tdc_order",&vec_RICH__tdc_order);
      }
      if(dictionary->hasEntry("RICH::tdc","sector")==true){
         RICH__tdc_sector = reader.getBranch<int8_t>    ("RICH::tdc","sector");
         tree->Branch("RICH__tdc_sector",&vec_RICH__tdc_sector);
      }
   }
   hipo::node<int32_t>   *RTPC__adc_ADC;
   std::vector<Int_t>   vec_RTPC__adc_ADC;
   hipo::node<int16_t>   *RTPC__adc_component;
   std::vector<Short_t>   vec_RTPC__adc_component;
   hipo::node<int8_t>    *RTPC__adc_layer;
   std::vector<Char_t>   vec_RTPC__adc_layer;
   hipo::node<int8_t>    *RTPC__adc_order;
   std::vector<Char_t>   vec_RTPC__adc_order;
   hipo::node<int16_t>   *RTPC__adc_ped;
   std::vector<Short_t>   vec_RTPC__adc_ped;
   hipo::node<int8_t>    *RTPC__adc_sector;
   std::vector<Char_t>   vec_RTPC__adc_sector;
   hipo::node<float>     *RTPC__adc_time;
   std::vector<Float_t>   vec_RTPC__adc_time;
   if(dictionary->hasSchema("RTPC::adc")==true){
      if(dictionary->hasEntry("RTPC::adc","ADC")==true){
         RTPC__adc_ADC = reader.getBranch<int32_t>   ("RTPC::adc","ADC");
         tree->Branch("RTPC__adc_ADC",&vec_RTPC__adc_ADC);
      }
      if(dictionary->hasEntry("RTPC::adc","component")==true){
         RTPC__adc_component = reader.getBranch<int16_t>   ("RTPC::adc","component");
         tree->Branch("RTPC__adc_component",&vec_RTPC__adc_component);
      }
      if(dictionary->hasEntry("RTPC::adc","layer")==true){
         RTPC__adc_layer = reader.getBranch<int8_t>    ("RTPC::adc","layer");
         tree->Branch("RTPC__adc_layer",&vec_RTPC__adc_layer);
      }
      if(dictionary->hasEntry("RTPC::adc","order")==true){
         RTPC__adc_order = reader.getBranch<int8_t>    ("RTPC::adc","order");
         tree->Branch("RTPC__adc_order",&vec_RTPC__adc_order);
      }
      if(dictionary->hasEntry("RTPC::adc","ped")==true){
         RTPC__adc_ped = reader.getBranch<int16_t>   ("RTPC::adc","ped");
         tree->Branch("RTPC__adc_ped",&vec_RTPC__adc_ped);
      }
      if(dictionary->hasEntry("RTPC::adc","sector")==true){
         RTPC__adc_sector = reader.getBranch<int8_t>    ("RTPC::adc","sector");
         tree->Branch("RTPC__adc_sector",&vec_RTPC__adc_sector);
      }
      if(dictionary->hasEntry("RTPC::adc","time")==true){
         RTPC__adc_time = reader.getBranch<float>     ("RTPC::adc","time");
         tree->Branch("RTPC__adc_time",&vec_RTPC__adc_time);
      }
   }
   hipo::node<float>     *RTPC__pos_energy;
   std::vector<Float_t>   vec_RTPC__pos_energy;
   hipo::node<float>     *RTPC__pos_phi;
   std::vector<Float_t>   vec_RTPC__pos_phi;
   hipo::node<float>     *RTPC__pos_posx;
   std::vector<Float_t>   vec_RTPC__pos_posx;
   hipo::node<float>     *RTPC__pos_posy;
   std::vector<Float_t>   vec_RTPC__pos_posy;
   hipo::node<float>     *RTPC__pos_posz;
   std::vector<Float_t>   vec_RTPC__pos_posz;
   hipo::node<int32_t>   *RTPC__pos_step;
   std::vector<Int_t>   vec_RTPC__pos_step;
   hipo::node<float>     *RTPC__pos_time;
   std::vector<Float_t>   vec_RTPC__pos_time;
   if(dictionary->hasSchema("RTPC::pos")==true){
      if(dictionary->hasEntry("RTPC::pos","energy")==true){
         RTPC__pos_energy = reader.getBranch<float>     ("RTPC::pos","energy");
         tree->Branch("RTPC__pos_energy",&vec_RTPC__pos_energy);
      }
      if(dictionary->hasEntry("RTPC::pos","phi")==true){
         RTPC__pos_phi = reader.getBranch<float>     ("RTPC::pos","phi");
         tree->Branch("RTPC__pos_phi",&vec_RTPC__pos_phi);
      }
      if(dictionary->hasEntry("RTPC::pos","posx")==true){
         RTPC__pos_posx = reader.getBranch<float>     ("RTPC::pos","posx");
         tree->Branch("RTPC__pos_posx",&vec_RTPC__pos_posx);
      }
      if(dictionary->hasEntry("RTPC::pos","posy")==true){
         RTPC__pos_posy = reader.getBranch<float>     ("RTPC::pos","posy");
         tree->Branch("RTPC__pos_posy",&vec_RTPC__pos_posy);
      }
      if(dictionary->hasEntry("RTPC::pos","posz")==true){
         RTPC__pos_posz = reader.getBranch<float>     ("RTPC::pos","posz");
         tree->Branch("RTPC__pos_posz",&vec_RTPC__pos_posz);
      }
      if(dictionary->hasEntry("RTPC::pos","step")==true){
         RTPC__pos_step = reader.getBranch<int32_t>   ("RTPC::pos","step");
         tree->Branch("RTPC__pos_step",&vec_RTPC__pos_step);
      }
      if(dictionary->hasEntry("RTPC::pos","time")==true){
         RTPC__pos_time = reader.getBranch<float>     ("RTPC::pos","time");
         tree->Branch("RTPC__pos_time",&vec_RTPC__pos_time);
      }
   }
   hipo::node<int32_t>   *RUN__config_event;
   std::vector<Int_t>   vec_RUN__config_event;
   hipo::node<int8_t>    *RUN__config_mode;
   std::vector<Char_t>   vec_RUN__config_mode;
   hipo::node<int32_t>   *RUN__config_run;
   std::vector<Int_t>   vec_RUN__config_run;
   hipo::node<float>     *RUN__config_solenoid;
   std::vector<Float_t>   vec_RUN__config_solenoid;
   hipo::node<int64_t>   *RUN__config_timestamp;
   std::vector<Long64_t>   vec_RUN__config_timestamp;
   hipo::node<float>     *RUN__config_torus;
   std::vector<Float_t>   vec_RUN__config_torus;
   hipo::node<int64_t>   *RUN__config_trigger;
   std::vector<Long64_t>   vec_RUN__config_trigger;
   hipo::node<int8_t>    *RUN__config_type;
   std::vector<Char_t>   vec_RUN__config_type;
   hipo::node<int32_t>   *RUN__config_unixtime;
   std::vector<Int_t>   vec_RUN__config_unixtime;
   if(dictionary->hasSchema("RUN::config")==true){
      if(dictionary->hasEntry("RUN::config","event")==true){
         RUN__config_event = reader.getBranch<int32_t>   ("RUN::config","event");
         tree->Branch("RUN__config_event",&vec_RUN__config_event);
      }
      if(dictionary->hasEntry("RUN::config","mode")==true){
         RUN__config_mode = reader.getBranch<int8_t>    ("RUN::config","mode");
         tree->Branch("RUN__config_mode",&vec_RUN__config_mode);
      }
      if(dictionary->hasEntry("RUN::config","run")==true){
         RUN__config_run = reader.getBranch<int32_t>   ("RUN::config","run");
         tree->Branch("RUN__config_run",&vec_RUN__config_run);
      }
      if(dictionary->hasEntry("RUN::config","solenoid")==true){
         RUN__config_solenoid = reader.getBranch<float>     ("RUN::config","solenoid");
         tree->Branch("RUN__config_solenoid",&vec_RUN__config_solenoid);
      }
      if(dictionary->hasEntry("RUN::config","timestamp")==true){
         RUN__config_timestamp = reader.getBranch<int64_t>   ("RUN::config","timestamp");
         tree->Branch("RUN__config_timestamp",&vec_RUN__config_timestamp);
      }
      if(dictionary->hasEntry("RUN::config","torus")==true){
         RUN__config_torus = reader.getBranch<float>     ("RUN::config","torus");
         tree->Branch("RUN__config_torus",&vec_RUN__config_torus);
      }
      if(dictionary->hasEntry("RUN::config","trigger")==true){
         RUN__config_trigger = reader.getBranch<int64_t>   ("RUN::config","trigger");
         tree->Branch("RUN__config_trigger",&vec_RUN__config_trigger);
      }
      if(dictionary->hasEntry("RUN::config","type")==true){
         RUN__config_type = reader.getBranch<int8_t>    ("RUN::config","type");
         tree->Branch("RUN__config_type",&vec_RUN__config_type);
      }
      if(dictionary->hasEntry("RUN::config","unixtime")==true){
         RUN__config_unixtime = reader.getBranch<int32_t>   ("RUN::config","unixtime");
         tree->Branch("RUN__config_unixtime",&vec_RUN__config_unixtime);
      }
   }
   hipo::node<int16_t>   *RUN__rf_id;
   std::vector<Short_t>   vec_RUN__rf_id;
   hipo::node<float>     *RUN__rf_time;
   std::vector<Float_t>   vec_RUN__rf_time;
   if(dictionary->hasSchema("RUN::rf")==true){
      if(dictionary->hasEntry("RUN::rf","id")==true){
         RUN__rf_id = reader.getBranch<int16_t>   ("RUN::rf","id");
         tree->Branch("RUN__rf_id",&vec_RUN__rf_id);
      }
      if(dictionary->hasEntry("RUN::rf","time")==true){
         RUN__rf_time = reader.getBranch<float>     ("RUN::rf","time");
         tree->Branch("RUN__rf_time",&vec_RUN__rf_time);
      }
   }
   hipo::node<int32_t>   *RUN__trigger_id;
   std::vector<Int_t>   vec_RUN__trigger_id;
   hipo::node<int32_t>   *RUN__trigger_trigger;
   std::vector<Int_t>   vec_RUN__trigger_trigger;
   if(dictionary->hasSchema("RUN::trigger")==true){
      if(dictionary->hasEntry("RUN::trigger","id")==true){
         RUN__trigger_id = reader.getBranch<int32_t>   ("RUN::trigger","id");
         tree->Branch("RUN__trigger_id",&vec_RUN__trigger_id);
      }
      if(dictionary->hasEntry("RUN::trigger","trigger")==true){
         RUN__trigger_trigger = reader.getBranch<int32_t>   ("RUN::trigger","trigger");
         tree->Branch("RUN__trigger_trigger",&vec_RUN__trigger_trigger);
      }
   }
   hipo::node<int16_t>   *TAGGER__tgpb_eid;
   std::vector<Short_t>   vec_TAGGER__tgpb_eid;
   hipo::node<float>     *TAGGER__tgpb_energy;
   std::vector<Float_t>   vec_TAGGER__tgpb_energy;
   hipo::node<int8_t>    *TAGGER__tgpb_status;
   std::vector<Char_t>   vec_TAGGER__tgpb_status;
   hipo::node<int16_t>   *TAGGER__tgpb_tid;
   std::vector<Short_t>   vec_TAGGER__tgpb_tid;
   hipo::node<float>     *TAGGER__tgpb_time;
   std::vector<Float_t>   vec_TAGGER__tgpb_time;
   if(dictionary->hasSchema("TAGGER::tgpb")==true){
      if(dictionary->hasEntry("TAGGER::tgpb","eid")==true){
         TAGGER__tgpb_eid = reader.getBranch<int16_t>   ("TAGGER::tgpb","eid");
         tree->Branch("TAGGER__tgpb_eid",&vec_TAGGER__tgpb_eid);
      }
      if(dictionary->hasEntry("TAGGER::tgpb","energy")==true){
         TAGGER__tgpb_energy = reader.getBranch<float>     ("TAGGER::tgpb","energy");
         tree->Branch("TAGGER__tgpb_energy",&vec_TAGGER__tgpb_energy);
      }
      if(dictionary->hasEntry("TAGGER::tgpb","status")==true){
         TAGGER__tgpb_status = reader.getBranch<int8_t>    ("TAGGER::tgpb","status");
         tree->Branch("TAGGER__tgpb_status",&vec_TAGGER__tgpb_status);
      }
      if(dictionary->hasEntry("TAGGER::tgpb","tid")==true){
         TAGGER__tgpb_tid = reader.getBranch<int16_t>   ("TAGGER::tgpb","tid");
         tree->Branch("TAGGER__tgpb_tid",&vec_TAGGER__tgpb_tid);
      }
      if(dictionary->hasEntry("TAGGER::tgpb","time")==true){
         TAGGER__tgpb_time = reader.getBranch<float>     ("TAGGER::tgpb","time");
         tree->Branch("TAGGER__tgpb_time",&vec_TAGGER__tgpb_time);
      }
   }
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit10_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit10_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit11_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit11_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit12_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit12_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit1_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit1_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit2_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit2_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit3_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit3_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit4_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit4_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit5_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit5_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit6_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit6_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit7_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit7_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit8_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit8_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_Hit9_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_Hit9_ID;
   hipo::node<float>     *TimeBasedTrkg__TBClusters_avgWire;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBClusters_avgWire;
   hipo::node<float>     *TimeBasedTrkg__TBClusters_fitChisqProb;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBClusters_fitChisqProb;
   hipo::node<float>     *TimeBasedTrkg__TBClusters_fitInterc;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBClusters_fitInterc;
   hipo::node<float>     *TimeBasedTrkg__TBClusters_fitIntercErr;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBClusters_fitIntercErr;
   hipo::node<float>     *TimeBasedTrkg__TBClusters_fitSlope;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBClusters_fitSlope;
   hipo::node<float>     *TimeBasedTrkg__TBClusters_fitSlopeErr;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBClusters_fitSlopeErr;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_id;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_id;
   hipo::node<int8_t>    *TimeBasedTrkg__TBClusters_sector;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBClusters_sector;
   hipo::node<int8_t>    *TimeBasedTrkg__TBClusters_size;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBClusters_size;
   hipo::node<int16_t>   *TimeBasedTrkg__TBClusters_status;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBClusters_status;
   hipo::node<int8_t>    *TimeBasedTrkg__TBClusters_superlayer;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBClusters_superlayer;
   if(dictionary->hasSchema("TimeBasedTrkg::TBClusters")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit10_ID")==true){
         TimeBasedTrkg__TBClusters_Hit10_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit10_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit10_ID",&vec_TimeBasedTrkg__TBClusters_Hit10_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit11_ID")==true){
         TimeBasedTrkg__TBClusters_Hit11_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit11_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit11_ID",&vec_TimeBasedTrkg__TBClusters_Hit11_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit12_ID")==true){
         TimeBasedTrkg__TBClusters_Hit12_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit12_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit12_ID",&vec_TimeBasedTrkg__TBClusters_Hit12_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit1_ID")==true){
         TimeBasedTrkg__TBClusters_Hit1_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit1_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit1_ID",&vec_TimeBasedTrkg__TBClusters_Hit1_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit2_ID")==true){
         TimeBasedTrkg__TBClusters_Hit2_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit2_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit2_ID",&vec_TimeBasedTrkg__TBClusters_Hit2_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit3_ID")==true){
         TimeBasedTrkg__TBClusters_Hit3_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit3_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit3_ID",&vec_TimeBasedTrkg__TBClusters_Hit3_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit4_ID")==true){
         TimeBasedTrkg__TBClusters_Hit4_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit4_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit4_ID",&vec_TimeBasedTrkg__TBClusters_Hit4_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit5_ID")==true){
         TimeBasedTrkg__TBClusters_Hit5_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit5_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit5_ID",&vec_TimeBasedTrkg__TBClusters_Hit5_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit6_ID")==true){
         TimeBasedTrkg__TBClusters_Hit6_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit6_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit6_ID",&vec_TimeBasedTrkg__TBClusters_Hit6_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit7_ID")==true){
         TimeBasedTrkg__TBClusters_Hit7_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit7_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit7_ID",&vec_TimeBasedTrkg__TBClusters_Hit7_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit8_ID")==true){
         TimeBasedTrkg__TBClusters_Hit8_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit8_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit8_ID",&vec_TimeBasedTrkg__TBClusters_Hit8_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit9_ID")==true){
         TimeBasedTrkg__TBClusters_Hit9_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit9_ID");
         tree->Branch("TimeBasedTrkg__TBClusters_Hit9_ID",&vec_TimeBasedTrkg__TBClusters_Hit9_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","avgWire")==true){
         TimeBasedTrkg__TBClusters_avgWire = reader.getBranch<float>     ("TimeBasedTrkg::TBClusters","avgWire");
         tree->Branch("TimeBasedTrkg__TBClusters_avgWire",&vec_TimeBasedTrkg__TBClusters_avgWire);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitChisqProb")==true){
         TimeBasedTrkg__TBClusters_fitChisqProb = reader.getBranch<float>     ("TimeBasedTrkg::TBClusters","fitChisqProb");
         tree->Branch("TimeBasedTrkg__TBClusters_fitChisqProb",&vec_TimeBasedTrkg__TBClusters_fitChisqProb);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitInterc")==true){
         TimeBasedTrkg__TBClusters_fitInterc = reader.getBranch<float>     ("TimeBasedTrkg::TBClusters","fitInterc");
         tree->Branch("TimeBasedTrkg__TBClusters_fitInterc",&vec_TimeBasedTrkg__TBClusters_fitInterc);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitIntercErr")==true){
         TimeBasedTrkg__TBClusters_fitIntercErr = reader.getBranch<float>     ("TimeBasedTrkg::TBClusters","fitIntercErr");
         tree->Branch("TimeBasedTrkg__TBClusters_fitIntercErr",&vec_TimeBasedTrkg__TBClusters_fitIntercErr);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitSlope")==true){
         TimeBasedTrkg__TBClusters_fitSlope = reader.getBranch<float>     ("TimeBasedTrkg::TBClusters","fitSlope");
         tree->Branch("TimeBasedTrkg__TBClusters_fitSlope",&vec_TimeBasedTrkg__TBClusters_fitSlope);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitSlopeErr")==true){
         TimeBasedTrkg__TBClusters_fitSlopeErr = reader.getBranch<float>     ("TimeBasedTrkg::TBClusters","fitSlopeErr");
         tree->Branch("TimeBasedTrkg__TBClusters_fitSlopeErr",&vec_TimeBasedTrkg__TBClusters_fitSlopeErr);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","id")==true){
         TimeBasedTrkg__TBClusters_id = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","id");
         tree->Branch("TimeBasedTrkg__TBClusters_id",&vec_TimeBasedTrkg__TBClusters_id);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","sector")==true){
         TimeBasedTrkg__TBClusters_sector = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBClusters","sector");
         tree->Branch("TimeBasedTrkg__TBClusters_sector",&vec_TimeBasedTrkg__TBClusters_sector);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","size")==true){
         TimeBasedTrkg__TBClusters_size = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBClusters","size");
         tree->Branch("TimeBasedTrkg__TBClusters_size",&vec_TimeBasedTrkg__TBClusters_size);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","status")==true){
         TimeBasedTrkg__TBClusters_status = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","status");
         tree->Branch("TimeBasedTrkg__TBClusters_status",&vec_TimeBasedTrkg__TBClusters_status);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","superlayer")==true){
         TimeBasedTrkg__TBClusters_superlayer = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBClusters","superlayer");
         tree->Branch("TimeBasedTrkg__TBClusters_superlayer",&vec_TimeBasedTrkg__TBClusters_superlayer);
      }
   }
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C11;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C11;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C12;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C12;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C13;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C13;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C14;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C14;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C15;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C15;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C21;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C21;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C22;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C22;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C23;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C23;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C24;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C24;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C25;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C25;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C31;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C31;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C32;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C32;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C33;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C33;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C34;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C34;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C35;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C35;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C41;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C41;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C42;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C42;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C43;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C43;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C44;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C44;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C45;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C45;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C51;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C51;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C52;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C52;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C53;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C53;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C54;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C54;
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C55;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCovMat_C55;
   hipo::node<int16_t>   *TimeBasedTrkg__TBCovMat_id;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBCovMat_id;
   if(dictionary->hasSchema("TimeBasedTrkg::TBCovMat")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C11")==true){
         TimeBasedTrkg__TBCovMat_C11 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C11");
         tree->Branch("TimeBasedTrkg__TBCovMat_C11",&vec_TimeBasedTrkg__TBCovMat_C11);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C12")==true){
         TimeBasedTrkg__TBCovMat_C12 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C12");
         tree->Branch("TimeBasedTrkg__TBCovMat_C12",&vec_TimeBasedTrkg__TBCovMat_C12);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C13")==true){
         TimeBasedTrkg__TBCovMat_C13 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C13");
         tree->Branch("TimeBasedTrkg__TBCovMat_C13",&vec_TimeBasedTrkg__TBCovMat_C13);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C14")==true){
         TimeBasedTrkg__TBCovMat_C14 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C14");
         tree->Branch("TimeBasedTrkg__TBCovMat_C14",&vec_TimeBasedTrkg__TBCovMat_C14);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C15")==true){
         TimeBasedTrkg__TBCovMat_C15 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C15");
         tree->Branch("TimeBasedTrkg__TBCovMat_C15",&vec_TimeBasedTrkg__TBCovMat_C15);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C21")==true){
         TimeBasedTrkg__TBCovMat_C21 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C21");
         tree->Branch("TimeBasedTrkg__TBCovMat_C21",&vec_TimeBasedTrkg__TBCovMat_C21);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C22")==true){
         TimeBasedTrkg__TBCovMat_C22 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C22");
         tree->Branch("TimeBasedTrkg__TBCovMat_C22",&vec_TimeBasedTrkg__TBCovMat_C22);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C23")==true){
         TimeBasedTrkg__TBCovMat_C23 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C23");
         tree->Branch("TimeBasedTrkg__TBCovMat_C23",&vec_TimeBasedTrkg__TBCovMat_C23);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C24")==true){
         TimeBasedTrkg__TBCovMat_C24 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C24");
         tree->Branch("TimeBasedTrkg__TBCovMat_C24",&vec_TimeBasedTrkg__TBCovMat_C24);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C25")==true){
         TimeBasedTrkg__TBCovMat_C25 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C25");
         tree->Branch("TimeBasedTrkg__TBCovMat_C25",&vec_TimeBasedTrkg__TBCovMat_C25);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C31")==true){
         TimeBasedTrkg__TBCovMat_C31 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C31");
         tree->Branch("TimeBasedTrkg__TBCovMat_C31",&vec_TimeBasedTrkg__TBCovMat_C31);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C32")==true){
         TimeBasedTrkg__TBCovMat_C32 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C32");
         tree->Branch("TimeBasedTrkg__TBCovMat_C32",&vec_TimeBasedTrkg__TBCovMat_C32);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C33")==true){
         TimeBasedTrkg__TBCovMat_C33 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C33");
         tree->Branch("TimeBasedTrkg__TBCovMat_C33",&vec_TimeBasedTrkg__TBCovMat_C33);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C34")==true){
         TimeBasedTrkg__TBCovMat_C34 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C34");
         tree->Branch("TimeBasedTrkg__TBCovMat_C34",&vec_TimeBasedTrkg__TBCovMat_C34);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C35")==true){
         TimeBasedTrkg__TBCovMat_C35 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C35");
         tree->Branch("TimeBasedTrkg__TBCovMat_C35",&vec_TimeBasedTrkg__TBCovMat_C35);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C41")==true){
         TimeBasedTrkg__TBCovMat_C41 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C41");
         tree->Branch("TimeBasedTrkg__TBCovMat_C41",&vec_TimeBasedTrkg__TBCovMat_C41);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C42")==true){
         TimeBasedTrkg__TBCovMat_C42 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C42");
         tree->Branch("TimeBasedTrkg__TBCovMat_C42",&vec_TimeBasedTrkg__TBCovMat_C42);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C43")==true){
         TimeBasedTrkg__TBCovMat_C43 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C43");
         tree->Branch("TimeBasedTrkg__TBCovMat_C43",&vec_TimeBasedTrkg__TBCovMat_C43);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C44")==true){
         TimeBasedTrkg__TBCovMat_C44 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C44");
         tree->Branch("TimeBasedTrkg__TBCovMat_C44",&vec_TimeBasedTrkg__TBCovMat_C44);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C45")==true){
         TimeBasedTrkg__TBCovMat_C45 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C45");
         tree->Branch("TimeBasedTrkg__TBCovMat_C45",&vec_TimeBasedTrkg__TBCovMat_C45);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C51")==true){
         TimeBasedTrkg__TBCovMat_C51 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C51");
         tree->Branch("TimeBasedTrkg__TBCovMat_C51",&vec_TimeBasedTrkg__TBCovMat_C51);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C52")==true){
         TimeBasedTrkg__TBCovMat_C52 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C52");
         tree->Branch("TimeBasedTrkg__TBCovMat_C52",&vec_TimeBasedTrkg__TBCovMat_C52);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C53")==true){
         TimeBasedTrkg__TBCovMat_C53 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C53");
         tree->Branch("TimeBasedTrkg__TBCovMat_C53",&vec_TimeBasedTrkg__TBCovMat_C53);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C54")==true){
         TimeBasedTrkg__TBCovMat_C54 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C54");
         tree->Branch("TimeBasedTrkg__TBCovMat_C54",&vec_TimeBasedTrkg__TBCovMat_C54);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C55")==true){
         TimeBasedTrkg__TBCovMat_C55 = reader.getBranch<float>     ("TimeBasedTrkg::TBCovMat","C55");
         tree->Branch("TimeBasedTrkg__TBCovMat_C55",&vec_TimeBasedTrkg__TBCovMat_C55);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","id")==true){
         TimeBasedTrkg__TBCovMat_id = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBCovMat","id");
         tree->Branch("TimeBasedTrkg__TBCovMat_id",&vec_TimeBasedTrkg__TBCovMat_id);
      }
   }
   hipo::node<int16_t>   *TimeBasedTrkg__TBCrosses_Segment1_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBCrosses_Segment1_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBCrosses_Segment2_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBCrosses_Segment2_ID;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_err_ux;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_err_ux;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_err_uy;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_err_uy;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_err_uz;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_err_uz;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_err_x;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_err_x;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_err_y;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_err_y;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_err_z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_err_z;
   hipo::node<int16_t>   *TimeBasedTrkg__TBCrosses_id;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBCrosses_id;
   hipo::node<int8_t>    *TimeBasedTrkg__TBCrosses_region;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBCrosses_region;
   hipo::node<int8_t>    *TimeBasedTrkg__TBCrosses_sector;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBCrosses_sector;
   hipo::node<int16_t>   *TimeBasedTrkg__TBCrosses_status;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBCrosses_status;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_ux;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_ux;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_uy;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_uy;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_uz;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_uz;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_x;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_x;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_y;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_y;
   hipo::node<float>     *TimeBasedTrkg__TBCrosses_z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBCrosses_z;
   if(dictionary->hasSchema("TimeBasedTrkg::TBCrosses")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","Segment1_ID")==true){
         TimeBasedTrkg__TBCrosses_Segment1_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBCrosses","Segment1_ID");
         tree->Branch("TimeBasedTrkg__TBCrosses_Segment1_ID",&vec_TimeBasedTrkg__TBCrosses_Segment1_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","Segment2_ID")==true){
         TimeBasedTrkg__TBCrosses_Segment2_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBCrosses","Segment2_ID");
         tree->Branch("TimeBasedTrkg__TBCrosses_Segment2_ID",&vec_TimeBasedTrkg__TBCrosses_Segment2_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_ux")==true){
         TimeBasedTrkg__TBCrosses_err_ux = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_ux");
         tree->Branch("TimeBasedTrkg__TBCrosses_err_ux",&vec_TimeBasedTrkg__TBCrosses_err_ux);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_uy")==true){
         TimeBasedTrkg__TBCrosses_err_uy = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_uy");
         tree->Branch("TimeBasedTrkg__TBCrosses_err_uy",&vec_TimeBasedTrkg__TBCrosses_err_uy);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_uz")==true){
         TimeBasedTrkg__TBCrosses_err_uz = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_uz");
         tree->Branch("TimeBasedTrkg__TBCrosses_err_uz",&vec_TimeBasedTrkg__TBCrosses_err_uz);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_x")==true){
         TimeBasedTrkg__TBCrosses_err_x = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_x");
         tree->Branch("TimeBasedTrkg__TBCrosses_err_x",&vec_TimeBasedTrkg__TBCrosses_err_x);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_y")==true){
         TimeBasedTrkg__TBCrosses_err_y = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_y");
         tree->Branch("TimeBasedTrkg__TBCrosses_err_y",&vec_TimeBasedTrkg__TBCrosses_err_y);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_z")==true){
         TimeBasedTrkg__TBCrosses_err_z = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_z");
         tree->Branch("TimeBasedTrkg__TBCrosses_err_z",&vec_TimeBasedTrkg__TBCrosses_err_z);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","id")==true){
         TimeBasedTrkg__TBCrosses_id = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBCrosses","id");
         tree->Branch("TimeBasedTrkg__TBCrosses_id",&vec_TimeBasedTrkg__TBCrosses_id);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","region")==true){
         TimeBasedTrkg__TBCrosses_region = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBCrosses","region");
         tree->Branch("TimeBasedTrkg__TBCrosses_region",&vec_TimeBasedTrkg__TBCrosses_region);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","sector")==true){
         TimeBasedTrkg__TBCrosses_sector = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBCrosses","sector");
         tree->Branch("TimeBasedTrkg__TBCrosses_sector",&vec_TimeBasedTrkg__TBCrosses_sector);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","status")==true){
         TimeBasedTrkg__TBCrosses_status = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBCrosses","status");
         tree->Branch("TimeBasedTrkg__TBCrosses_status",&vec_TimeBasedTrkg__TBCrosses_status);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","ux")==true){
         TimeBasedTrkg__TBCrosses_ux = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","ux");
         tree->Branch("TimeBasedTrkg__TBCrosses_ux",&vec_TimeBasedTrkg__TBCrosses_ux);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","uy")==true){
         TimeBasedTrkg__TBCrosses_uy = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","uy");
         tree->Branch("TimeBasedTrkg__TBCrosses_uy",&vec_TimeBasedTrkg__TBCrosses_uy);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","uz")==true){
         TimeBasedTrkg__TBCrosses_uz = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","uz");
         tree->Branch("TimeBasedTrkg__TBCrosses_uz",&vec_TimeBasedTrkg__TBCrosses_uz);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","x")==true){
         TimeBasedTrkg__TBCrosses_x = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","x");
         tree->Branch("TimeBasedTrkg__TBCrosses_x",&vec_TimeBasedTrkg__TBCrosses_x);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","y")==true){
         TimeBasedTrkg__TBCrosses_y = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","y");
         tree->Branch("TimeBasedTrkg__TBCrosses_y",&vec_TimeBasedTrkg__TBCrosses_y);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","z")==true){
         TimeBasedTrkg__TBCrosses_z = reader.getBranch<float>     ("TimeBasedTrkg::TBCrosses","z");
         tree->Branch("TimeBasedTrkg__TBCrosses_z",&vec_TimeBasedTrkg__TBCrosses_z);
      }
   }
   hipo::node<float>     *TimeBasedTrkg__TBHits_B;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_B;
   hipo::node<int8_t>    *TimeBasedTrkg__TBHits_LR;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBHits_LR;
   hipo::node<float>     *TimeBasedTrkg__TBHits_T0;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_T0;
   hipo::node<int32_t>   *TimeBasedTrkg__TBHits_TDC;
   std::vector<Int_t>   vec_TimeBasedTrkg__TBHits_TDC;
   hipo::node<float>     *TimeBasedTrkg__TBHits_TFlight;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_TFlight;
   hipo::node<float>     *TimeBasedTrkg__TBHits_TProp;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_TProp;
   hipo::node<float>     *TimeBasedTrkg__TBHits_TStart;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_TStart;
   hipo::node<float>     *TimeBasedTrkg__TBHits_X;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_X;
   hipo::node<float>     *TimeBasedTrkg__TBHits_Z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_Z;
   hipo::node<float>     *TimeBasedTrkg__TBHits_beta;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_beta;
   hipo::node<int16_t>   *TimeBasedTrkg__TBHits_clusterID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBHits_clusterID;
   hipo::node<float>     *TimeBasedTrkg__TBHits_doca;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_doca;
   hipo::node<float>     *TimeBasedTrkg__TBHits_docaError;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_docaError;
   hipo::node<float>     *TimeBasedTrkg__TBHits_fitResidual;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_fitResidual;
   hipo::node<int16_t>   *TimeBasedTrkg__TBHits_id;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBHits_id;
   hipo::node<int8_t>    *TimeBasedTrkg__TBHits_layer;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBHits_layer;
   hipo::node<int8_t>    *TimeBasedTrkg__TBHits_sector;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBHits_sector;
   hipo::node<int16_t>   *TimeBasedTrkg__TBHits_status;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBHits_status;
   hipo::node<int8_t>    *TimeBasedTrkg__TBHits_superlayer;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBHits_superlayer;
   hipo::node<float>     *TimeBasedTrkg__TBHits_tBeta;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_tBeta;
   hipo::node<float>     *TimeBasedTrkg__TBHits_time;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_time;
   hipo::node<float>     *TimeBasedTrkg__TBHits_timeResidual;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_timeResidual;
   hipo::node<float>     *TimeBasedTrkg__TBHits_trkDoca;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBHits_trkDoca;
   hipo::node<int8_t>    *TimeBasedTrkg__TBHits_trkID;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBHits_trkID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBHits_wire;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBHits_wire;
   if(dictionary->hasSchema("TimeBasedTrkg::TBHits")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","B")==true){
         TimeBasedTrkg__TBHits_B = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","B");
         tree->Branch("TimeBasedTrkg__TBHits_B",&vec_TimeBasedTrkg__TBHits_B);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","LR")==true){
         TimeBasedTrkg__TBHits_LR = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBHits","LR");
         tree->Branch("TimeBasedTrkg__TBHits_LR",&vec_TimeBasedTrkg__TBHits_LR);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","T0")==true){
         TimeBasedTrkg__TBHits_T0 = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","T0");
         tree->Branch("TimeBasedTrkg__TBHits_T0",&vec_TimeBasedTrkg__TBHits_T0);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","TDC")==true){
         TimeBasedTrkg__TBHits_TDC = reader.getBranch<int32_t>   ("TimeBasedTrkg::TBHits","TDC");
         tree->Branch("TimeBasedTrkg__TBHits_TDC",&vec_TimeBasedTrkg__TBHits_TDC);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","TFlight")==true){
         TimeBasedTrkg__TBHits_TFlight = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","TFlight");
         tree->Branch("TimeBasedTrkg__TBHits_TFlight",&vec_TimeBasedTrkg__TBHits_TFlight);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","TProp")==true){
         TimeBasedTrkg__TBHits_TProp = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","TProp");
         tree->Branch("TimeBasedTrkg__TBHits_TProp",&vec_TimeBasedTrkg__TBHits_TProp);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","TStart")==true){
         TimeBasedTrkg__TBHits_TStart = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","TStart");
         tree->Branch("TimeBasedTrkg__TBHits_TStart",&vec_TimeBasedTrkg__TBHits_TStart);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","X")==true){
         TimeBasedTrkg__TBHits_X = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","X");
         tree->Branch("TimeBasedTrkg__TBHits_X",&vec_TimeBasedTrkg__TBHits_X);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","Z")==true){
         TimeBasedTrkg__TBHits_Z = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","Z");
         tree->Branch("TimeBasedTrkg__TBHits_Z",&vec_TimeBasedTrkg__TBHits_Z);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","beta")==true){
         TimeBasedTrkg__TBHits_beta = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","beta");
         tree->Branch("TimeBasedTrkg__TBHits_beta",&vec_TimeBasedTrkg__TBHits_beta);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","clusterID")==true){
         TimeBasedTrkg__TBHits_clusterID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBHits","clusterID");
         tree->Branch("TimeBasedTrkg__TBHits_clusterID",&vec_TimeBasedTrkg__TBHits_clusterID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","doca")==true){
         TimeBasedTrkg__TBHits_doca = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","doca");
         tree->Branch("TimeBasedTrkg__TBHits_doca",&vec_TimeBasedTrkg__TBHits_doca);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","docaError")==true){
         TimeBasedTrkg__TBHits_docaError = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","docaError");
         tree->Branch("TimeBasedTrkg__TBHits_docaError",&vec_TimeBasedTrkg__TBHits_docaError);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","fitResidual")==true){
         TimeBasedTrkg__TBHits_fitResidual = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","fitResidual");
         tree->Branch("TimeBasedTrkg__TBHits_fitResidual",&vec_TimeBasedTrkg__TBHits_fitResidual);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","id")==true){
         TimeBasedTrkg__TBHits_id = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBHits","id");
         tree->Branch("TimeBasedTrkg__TBHits_id",&vec_TimeBasedTrkg__TBHits_id);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","layer")==true){
         TimeBasedTrkg__TBHits_layer = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBHits","layer");
         tree->Branch("TimeBasedTrkg__TBHits_layer",&vec_TimeBasedTrkg__TBHits_layer);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","sector")==true){
         TimeBasedTrkg__TBHits_sector = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBHits","sector");
         tree->Branch("TimeBasedTrkg__TBHits_sector",&vec_TimeBasedTrkg__TBHits_sector);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","status")==true){
         TimeBasedTrkg__TBHits_status = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBHits","status");
         tree->Branch("TimeBasedTrkg__TBHits_status",&vec_TimeBasedTrkg__TBHits_status);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","superlayer")==true){
         TimeBasedTrkg__TBHits_superlayer = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBHits","superlayer");
         tree->Branch("TimeBasedTrkg__TBHits_superlayer",&vec_TimeBasedTrkg__TBHits_superlayer);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","tBeta")==true){
         TimeBasedTrkg__TBHits_tBeta = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","tBeta");
         tree->Branch("TimeBasedTrkg__TBHits_tBeta",&vec_TimeBasedTrkg__TBHits_tBeta);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","time")==true){
         TimeBasedTrkg__TBHits_time = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","time");
         tree->Branch("TimeBasedTrkg__TBHits_time",&vec_TimeBasedTrkg__TBHits_time);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","timeResidual")==true){
         TimeBasedTrkg__TBHits_timeResidual = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","timeResidual");
         tree->Branch("TimeBasedTrkg__TBHits_timeResidual",&vec_TimeBasedTrkg__TBHits_timeResidual);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","trkDoca")==true){
         TimeBasedTrkg__TBHits_trkDoca = reader.getBranch<float>     ("TimeBasedTrkg::TBHits","trkDoca");
         tree->Branch("TimeBasedTrkg__TBHits_trkDoca",&vec_TimeBasedTrkg__TBHits_trkDoca);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","trkID")==true){
         TimeBasedTrkg__TBHits_trkID = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBHits","trkID");
         tree->Branch("TimeBasedTrkg__TBHits_trkID",&vec_TimeBasedTrkg__TBHits_trkID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","wire")==true){
         TimeBasedTrkg__TBHits_wire = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBHits","wire");
         tree->Branch("TimeBasedTrkg__TBHits_wire",&vec_TimeBasedTrkg__TBHits_wire);
      }
   }
   hipo::node<int8_t>    *TimeBasedTrkg__TBSegmentTrajectory_layer;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBSegmentTrajectory_layer;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegmentTrajectory_matchedHitID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegmentTrajectory_matchedHitID;
   hipo::node<int8_t>    *TimeBasedTrkg__TBSegmentTrajectory_sector;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBSegmentTrajectory_sector;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegmentTrajectory_segmentID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegmentTrajectory_segmentID;
   hipo::node<int8_t>    *TimeBasedTrkg__TBSegmentTrajectory_superlayer;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBSegmentTrajectory_superlayer;
   hipo::node<float>     *TimeBasedTrkg__TBSegmentTrajectory_trkDoca;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegmentTrajectory_trkDoca;
   if(dictionary->hasSchema("TimeBasedTrkg::TBSegmentTrajectory")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","layer")==true){
         TimeBasedTrkg__TBSegmentTrajectory_layer = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBSegmentTrajectory","layer");
         tree->Branch("TimeBasedTrkg__TBSegmentTrajectory_layer",&vec_TimeBasedTrkg__TBSegmentTrajectory_layer);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","matchedHitID")==true){
         TimeBasedTrkg__TBSegmentTrajectory_matchedHitID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegmentTrajectory","matchedHitID");
         tree->Branch("TimeBasedTrkg__TBSegmentTrajectory_matchedHitID",&vec_TimeBasedTrkg__TBSegmentTrajectory_matchedHitID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","sector")==true){
         TimeBasedTrkg__TBSegmentTrajectory_sector = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBSegmentTrajectory","sector");
         tree->Branch("TimeBasedTrkg__TBSegmentTrajectory_sector",&vec_TimeBasedTrkg__TBSegmentTrajectory_sector);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","segmentID")==true){
         TimeBasedTrkg__TBSegmentTrajectory_segmentID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegmentTrajectory","segmentID");
         tree->Branch("TimeBasedTrkg__TBSegmentTrajectory_segmentID",&vec_TimeBasedTrkg__TBSegmentTrajectory_segmentID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","superlayer")==true){
         TimeBasedTrkg__TBSegmentTrajectory_superlayer = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBSegmentTrajectory","superlayer");
         tree->Branch("TimeBasedTrkg__TBSegmentTrajectory_superlayer",&vec_TimeBasedTrkg__TBSegmentTrajectory_superlayer);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","trkDoca")==true){
         TimeBasedTrkg__TBSegmentTrajectory_trkDoca = reader.getBranch<float>     ("TimeBasedTrkg::TBSegmentTrajectory","trkDoca");
         tree->Branch("TimeBasedTrkg__TBSegmentTrajectory_trkDoca",&vec_TimeBasedTrkg__TBSegmentTrajectory_trkDoca);
      }
   }
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Cluster_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Cluster_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit10_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit10_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit11_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit11_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit12_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit12_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit1_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit1_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit2_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit2_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit3_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit3_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit4_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit4_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit5_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit5_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit6_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit6_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit7_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit7_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit8_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit8_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_Hit9_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_Hit9_ID;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_SegEndPoint1X;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_SegEndPoint1X;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_SegEndPoint1Z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_SegEndPoint1Z;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_SegEndPoint2X;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_SegEndPoint2X;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_SegEndPoint2Z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_SegEndPoint2Z;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_avgWire;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_avgWire;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_fitChisqProb;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_fitChisqProb;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_fitInterc;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_fitInterc;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_fitIntercErr;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_fitIntercErr;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_fitSlope;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_fitSlope;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_fitSlopeErr;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_fitSlopeErr;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_id;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_id;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_resiSum;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_resiSum;
   hipo::node<int8_t>    *TimeBasedTrkg__TBSegments_sector;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBSegments_sector;
   hipo::node<int8_t>    *TimeBasedTrkg__TBSegments_size;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBSegments_size;
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegments_status;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBSegments_status;
   hipo::node<int8_t>    *TimeBasedTrkg__TBSegments_superlayer;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBSegments_superlayer;
   hipo::node<float>     *TimeBasedTrkg__TBSegments_timeSum;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBSegments_timeSum;
   if(dictionary->hasSchema("TimeBasedTrkg::TBSegments")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Cluster_ID")==true){
         TimeBasedTrkg__TBSegments_Cluster_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Cluster_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Cluster_ID",&vec_TimeBasedTrkg__TBSegments_Cluster_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit10_ID")==true){
         TimeBasedTrkg__TBSegments_Hit10_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit10_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit10_ID",&vec_TimeBasedTrkg__TBSegments_Hit10_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit11_ID")==true){
         TimeBasedTrkg__TBSegments_Hit11_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit11_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit11_ID",&vec_TimeBasedTrkg__TBSegments_Hit11_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit12_ID")==true){
         TimeBasedTrkg__TBSegments_Hit12_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit12_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit12_ID",&vec_TimeBasedTrkg__TBSegments_Hit12_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit1_ID")==true){
         TimeBasedTrkg__TBSegments_Hit1_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit1_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit1_ID",&vec_TimeBasedTrkg__TBSegments_Hit1_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit2_ID")==true){
         TimeBasedTrkg__TBSegments_Hit2_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit2_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit2_ID",&vec_TimeBasedTrkg__TBSegments_Hit2_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit3_ID")==true){
         TimeBasedTrkg__TBSegments_Hit3_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit3_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit3_ID",&vec_TimeBasedTrkg__TBSegments_Hit3_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit4_ID")==true){
         TimeBasedTrkg__TBSegments_Hit4_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit4_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit4_ID",&vec_TimeBasedTrkg__TBSegments_Hit4_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit5_ID")==true){
         TimeBasedTrkg__TBSegments_Hit5_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit5_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit5_ID",&vec_TimeBasedTrkg__TBSegments_Hit5_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit6_ID")==true){
         TimeBasedTrkg__TBSegments_Hit6_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit6_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit6_ID",&vec_TimeBasedTrkg__TBSegments_Hit6_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit7_ID")==true){
         TimeBasedTrkg__TBSegments_Hit7_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit7_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit7_ID",&vec_TimeBasedTrkg__TBSegments_Hit7_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit8_ID")==true){
         TimeBasedTrkg__TBSegments_Hit8_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit8_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit8_ID",&vec_TimeBasedTrkg__TBSegments_Hit8_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit9_ID")==true){
         TimeBasedTrkg__TBSegments_Hit9_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit9_ID");
         tree->Branch("TimeBasedTrkg__TBSegments_Hit9_ID",&vec_TimeBasedTrkg__TBSegments_Hit9_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","SegEndPoint1X")==true){
         TimeBasedTrkg__TBSegments_SegEndPoint1X = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","SegEndPoint1X");
         tree->Branch("TimeBasedTrkg__TBSegments_SegEndPoint1X",&vec_TimeBasedTrkg__TBSegments_SegEndPoint1X);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","SegEndPoint1Z")==true){
         TimeBasedTrkg__TBSegments_SegEndPoint1Z = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","SegEndPoint1Z");
         tree->Branch("TimeBasedTrkg__TBSegments_SegEndPoint1Z",&vec_TimeBasedTrkg__TBSegments_SegEndPoint1Z);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","SegEndPoint2X")==true){
         TimeBasedTrkg__TBSegments_SegEndPoint2X = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","SegEndPoint2X");
         tree->Branch("TimeBasedTrkg__TBSegments_SegEndPoint2X",&vec_TimeBasedTrkg__TBSegments_SegEndPoint2X);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","SegEndPoint2Z")==true){
         TimeBasedTrkg__TBSegments_SegEndPoint2Z = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","SegEndPoint2Z");
         tree->Branch("TimeBasedTrkg__TBSegments_SegEndPoint2Z",&vec_TimeBasedTrkg__TBSegments_SegEndPoint2Z);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","avgWire")==true){
         TimeBasedTrkg__TBSegments_avgWire = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","avgWire");
         tree->Branch("TimeBasedTrkg__TBSegments_avgWire",&vec_TimeBasedTrkg__TBSegments_avgWire);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitChisqProb")==true){
         TimeBasedTrkg__TBSegments_fitChisqProb = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","fitChisqProb");
         tree->Branch("TimeBasedTrkg__TBSegments_fitChisqProb",&vec_TimeBasedTrkg__TBSegments_fitChisqProb);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitInterc")==true){
         TimeBasedTrkg__TBSegments_fitInterc = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","fitInterc");
         tree->Branch("TimeBasedTrkg__TBSegments_fitInterc",&vec_TimeBasedTrkg__TBSegments_fitInterc);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitIntercErr")==true){
         TimeBasedTrkg__TBSegments_fitIntercErr = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","fitIntercErr");
         tree->Branch("TimeBasedTrkg__TBSegments_fitIntercErr",&vec_TimeBasedTrkg__TBSegments_fitIntercErr);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitSlope")==true){
         TimeBasedTrkg__TBSegments_fitSlope = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","fitSlope");
         tree->Branch("TimeBasedTrkg__TBSegments_fitSlope",&vec_TimeBasedTrkg__TBSegments_fitSlope);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitSlopeErr")==true){
         TimeBasedTrkg__TBSegments_fitSlopeErr = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","fitSlopeErr");
         tree->Branch("TimeBasedTrkg__TBSegments_fitSlopeErr",&vec_TimeBasedTrkg__TBSegments_fitSlopeErr);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","id")==true){
         TimeBasedTrkg__TBSegments_id = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","id");
         tree->Branch("TimeBasedTrkg__TBSegments_id",&vec_TimeBasedTrkg__TBSegments_id);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","resiSum")==true){
         TimeBasedTrkg__TBSegments_resiSum = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","resiSum");
         tree->Branch("TimeBasedTrkg__TBSegments_resiSum",&vec_TimeBasedTrkg__TBSegments_resiSum);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","sector")==true){
         TimeBasedTrkg__TBSegments_sector = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBSegments","sector");
         tree->Branch("TimeBasedTrkg__TBSegments_sector",&vec_TimeBasedTrkg__TBSegments_sector);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","size")==true){
         TimeBasedTrkg__TBSegments_size = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBSegments","size");
         tree->Branch("TimeBasedTrkg__TBSegments_size",&vec_TimeBasedTrkg__TBSegments_size);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","status")==true){
         TimeBasedTrkg__TBSegments_status = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","status");
         tree->Branch("TimeBasedTrkg__TBSegments_status",&vec_TimeBasedTrkg__TBSegments_status);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","superlayer")==true){
         TimeBasedTrkg__TBSegments_superlayer = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBSegments","superlayer");
         tree->Branch("TimeBasedTrkg__TBSegments_superlayer",&vec_TimeBasedTrkg__TBSegments_superlayer);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","timeSum")==true){
         TimeBasedTrkg__TBSegments_timeSum = reader.getBranch<float>     ("TimeBasedTrkg::TBSegments","timeSum");
         tree->Branch("TimeBasedTrkg__TBSegments_timeSum",&vec_TimeBasedTrkg__TBSegments_timeSum);
      }
   }
   hipo::node<int16_t>   *TimeBasedTrkg__TBTracks_Cross1_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBTracks_Cross1_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBTracks_Cross2_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBTracks_Cross2_ID;
   hipo::node<int16_t>   *TimeBasedTrkg__TBTracks_Cross3_ID;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBTracks_Cross3_ID;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_Vtx0_x;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_Vtx0_x;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_Vtx0_y;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_Vtx0_y;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_Vtx0_z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_Vtx0_z;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c1_ux;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c1_ux;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c1_uy;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c1_uy;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c1_uz;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c1_uz;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c1_x;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c1_x;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c1_y;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c1_y;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c1_z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c1_z;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c3_ux;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c3_ux;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c3_uy;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c3_uy;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c3_uz;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c3_uz;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c3_x;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c3_x;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c3_y;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c3_y;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_c3_z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_c3_z;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_chi2;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_chi2;
   hipo::node<int16_t>   *TimeBasedTrkg__TBTracks_id;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBTracks_id;
   hipo::node<int16_t>   *TimeBasedTrkg__TBTracks_ndf;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBTracks_ndf;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_p0_x;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_p0_x;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_p0_y;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_p0_y;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_p0_z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_p0_z;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_pathlength;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_pathlength;
   hipo::node<int8_t>    *TimeBasedTrkg__TBTracks_q;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBTracks_q;
   hipo::node<int8_t>    *TimeBasedTrkg__TBTracks_sector;
   std::vector<Char_t>   vec_TimeBasedTrkg__TBTracks_sector;
   hipo::node<int16_t>   *TimeBasedTrkg__TBTracks_status;
   std::vector<Short_t>   vec_TimeBasedTrkg__TBTracks_status;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_t1_px;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_t1_px;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_t1_py;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_t1_py;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_t1_pz;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_t1_pz;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_t1_x;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_t1_x;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_t1_y;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_t1_y;
   hipo::node<float>     *TimeBasedTrkg__TBTracks_t1_z;
   std::vector<Float_t>   vec_TimeBasedTrkg__TBTracks_t1_z;
   if(dictionary->hasSchema("TimeBasedTrkg::TBTracks")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Cross1_ID")==true){
         TimeBasedTrkg__TBTracks_Cross1_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","Cross1_ID");
         tree->Branch("TimeBasedTrkg__TBTracks_Cross1_ID",&vec_TimeBasedTrkg__TBTracks_Cross1_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Cross2_ID")==true){
         TimeBasedTrkg__TBTracks_Cross2_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","Cross2_ID");
         tree->Branch("TimeBasedTrkg__TBTracks_Cross2_ID",&vec_TimeBasedTrkg__TBTracks_Cross2_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Cross3_ID")==true){
         TimeBasedTrkg__TBTracks_Cross3_ID = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","Cross3_ID");
         tree->Branch("TimeBasedTrkg__TBTracks_Cross3_ID",&vec_TimeBasedTrkg__TBTracks_Cross3_ID);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Vtx0_x")==true){
         TimeBasedTrkg__TBTracks_Vtx0_x = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","Vtx0_x");
         tree->Branch("TimeBasedTrkg__TBTracks_Vtx0_x",&vec_TimeBasedTrkg__TBTracks_Vtx0_x);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Vtx0_y")==true){
         TimeBasedTrkg__TBTracks_Vtx0_y = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","Vtx0_y");
         tree->Branch("TimeBasedTrkg__TBTracks_Vtx0_y",&vec_TimeBasedTrkg__TBTracks_Vtx0_y);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Vtx0_z")==true){
         TimeBasedTrkg__TBTracks_Vtx0_z = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","Vtx0_z");
         tree->Branch("TimeBasedTrkg__TBTracks_Vtx0_z",&vec_TimeBasedTrkg__TBTracks_Vtx0_z);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_ux")==true){
         TimeBasedTrkg__TBTracks_c1_ux = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_ux");
         tree->Branch("TimeBasedTrkg__TBTracks_c1_ux",&vec_TimeBasedTrkg__TBTracks_c1_ux);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_uy")==true){
         TimeBasedTrkg__TBTracks_c1_uy = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_uy");
         tree->Branch("TimeBasedTrkg__TBTracks_c1_uy",&vec_TimeBasedTrkg__TBTracks_c1_uy);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_uz")==true){
         TimeBasedTrkg__TBTracks_c1_uz = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_uz");
         tree->Branch("TimeBasedTrkg__TBTracks_c1_uz",&vec_TimeBasedTrkg__TBTracks_c1_uz);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_x")==true){
         TimeBasedTrkg__TBTracks_c1_x = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_x");
         tree->Branch("TimeBasedTrkg__TBTracks_c1_x",&vec_TimeBasedTrkg__TBTracks_c1_x);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_y")==true){
         TimeBasedTrkg__TBTracks_c1_y = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_y");
         tree->Branch("TimeBasedTrkg__TBTracks_c1_y",&vec_TimeBasedTrkg__TBTracks_c1_y);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_z")==true){
         TimeBasedTrkg__TBTracks_c1_z = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_z");
         tree->Branch("TimeBasedTrkg__TBTracks_c1_z",&vec_TimeBasedTrkg__TBTracks_c1_z);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_ux")==true){
         TimeBasedTrkg__TBTracks_c3_ux = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_ux");
         tree->Branch("TimeBasedTrkg__TBTracks_c3_ux",&vec_TimeBasedTrkg__TBTracks_c3_ux);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_uy")==true){
         TimeBasedTrkg__TBTracks_c3_uy = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_uy");
         tree->Branch("TimeBasedTrkg__TBTracks_c3_uy",&vec_TimeBasedTrkg__TBTracks_c3_uy);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_uz")==true){
         TimeBasedTrkg__TBTracks_c3_uz = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_uz");
         tree->Branch("TimeBasedTrkg__TBTracks_c3_uz",&vec_TimeBasedTrkg__TBTracks_c3_uz);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_x")==true){
         TimeBasedTrkg__TBTracks_c3_x = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_x");
         tree->Branch("TimeBasedTrkg__TBTracks_c3_x",&vec_TimeBasedTrkg__TBTracks_c3_x);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_y")==true){
         TimeBasedTrkg__TBTracks_c3_y = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_y");
         tree->Branch("TimeBasedTrkg__TBTracks_c3_y",&vec_TimeBasedTrkg__TBTracks_c3_y);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_z")==true){
         TimeBasedTrkg__TBTracks_c3_z = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_z");
         tree->Branch("TimeBasedTrkg__TBTracks_c3_z",&vec_TimeBasedTrkg__TBTracks_c3_z);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","chi2")==true){
         TimeBasedTrkg__TBTracks_chi2 = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","chi2");
         tree->Branch("TimeBasedTrkg__TBTracks_chi2",&vec_TimeBasedTrkg__TBTracks_chi2);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","id")==true){
         TimeBasedTrkg__TBTracks_id = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","id");
         tree->Branch("TimeBasedTrkg__TBTracks_id",&vec_TimeBasedTrkg__TBTracks_id);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","ndf")==true){
         TimeBasedTrkg__TBTracks_ndf = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","ndf");
         tree->Branch("TimeBasedTrkg__TBTracks_ndf",&vec_TimeBasedTrkg__TBTracks_ndf);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","p0_x")==true){
         TimeBasedTrkg__TBTracks_p0_x = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","p0_x");
         tree->Branch("TimeBasedTrkg__TBTracks_p0_x",&vec_TimeBasedTrkg__TBTracks_p0_x);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","p0_y")==true){
         TimeBasedTrkg__TBTracks_p0_y = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","p0_y");
         tree->Branch("TimeBasedTrkg__TBTracks_p0_y",&vec_TimeBasedTrkg__TBTracks_p0_y);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","p0_z")==true){
         TimeBasedTrkg__TBTracks_p0_z = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","p0_z");
         tree->Branch("TimeBasedTrkg__TBTracks_p0_z",&vec_TimeBasedTrkg__TBTracks_p0_z);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","pathlength")==true){
         TimeBasedTrkg__TBTracks_pathlength = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","pathlength");
         tree->Branch("TimeBasedTrkg__TBTracks_pathlength",&vec_TimeBasedTrkg__TBTracks_pathlength);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","q")==true){
         TimeBasedTrkg__TBTracks_q = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBTracks","q");
         tree->Branch("TimeBasedTrkg__TBTracks_q",&vec_TimeBasedTrkg__TBTracks_q);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","sector")==true){
         TimeBasedTrkg__TBTracks_sector = reader.getBranch<int8_t>    ("TimeBasedTrkg::TBTracks","sector");
         tree->Branch("TimeBasedTrkg__TBTracks_sector",&vec_TimeBasedTrkg__TBTracks_sector);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","status")==true){
         TimeBasedTrkg__TBTracks_status = reader.getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","status");
         tree->Branch("TimeBasedTrkg__TBTracks_status",&vec_TimeBasedTrkg__TBTracks_status);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_px")==true){
         TimeBasedTrkg__TBTracks_t1_px = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_px");
         tree->Branch("TimeBasedTrkg__TBTracks_t1_px",&vec_TimeBasedTrkg__TBTracks_t1_px);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_py")==true){
         TimeBasedTrkg__TBTracks_t1_py = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_py");
         tree->Branch("TimeBasedTrkg__TBTracks_t1_py",&vec_TimeBasedTrkg__TBTracks_t1_py);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_pz")==true){
         TimeBasedTrkg__TBTracks_t1_pz = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_pz");
         tree->Branch("TimeBasedTrkg__TBTracks_t1_pz",&vec_TimeBasedTrkg__TBTracks_t1_pz);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_x")==true){
         TimeBasedTrkg__TBTracks_t1_x = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_x");
         tree->Branch("TimeBasedTrkg__TBTracks_t1_x",&vec_TimeBasedTrkg__TBTracks_t1_x);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_y")==true){
         TimeBasedTrkg__TBTracks_t1_y = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_y");
         tree->Branch("TimeBasedTrkg__TBTracks_t1_y",&vec_TimeBasedTrkg__TBTracks_t1_y);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_z")==true){
         TimeBasedTrkg__TBTracks_t1_z = reader.getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_z");
         tree->Branch("TimeBasedTrkg__TBTracks_t1_z",&vec_TimeBasedTrkg__TBTracks_t1_z);
      }
   }
   hipo::node<float>     *TimeBasedTrkg__Trajectory_B;
   std::vector<Float_t>   vec_TimeBasedTrkg__Trajectory_B;
   hipo::node<float>     *TimeBasedTrkg__Trajectory_L;
   std::vector<Float_t>   vec_TimeBasedTrkg__Trajectory_L;
   hipo::node<int16_t>   *TimeBasedTrkg__Trajectory_did;
   std::vector<Short_t>   vec_TimeBasedTrkg__Trajectory_did;
   hipo::node<int16_t>   *TimeBasedTrkg__Trajectory_tid;
   std::vector<Short_t>   vec_TimeBasedTrkg__Trajectory_tid;
   hipo::node<float>     *TimeBasedTrkg__Trajectory_tx;
   std::vector<Float_t>   vec_TimeBasedTrkg__Trajectory_tx;
   hipo::node<float>     *TimeBasedTrkg__Trajectory_ty;
   std::vector<Float_t>   vec_TimeBasedTrkg__Trajectory_ty;
   hipo::node<float>     *TimeBasedTrkg__Trajectory_tz;
   std::vector<Float_t>   vec_TimeBasedTrkg__Trajectory_tz;
   hipo::node<float>     *TimeBasedTrkg__Trajectory_x;
   std::vector<Float_t>   vec_TimeBasedTrkg__Trajectory_x;
   hipo::node<float>     *TimeBasedTrkg__Trajectory_y;
   std::vector<Float_t>   vec_TimeBasedTrkg__Trajectory_y;
   hipo::node<float>     *TimeBasedTrkg__Trajectory_z;
   std::vector<Float_t>   vec_TimeBasedTrkg__Trajectory_z;
   if(dictionary->hasSchema("TimeBasedTrkg::Trajectory")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","B")==true){
         TimeBasedTrkg__Trajectory_B = reader.getBranch<float>     ("TimeBasedTrkg::Trajectory","B");
         tree->Branch("TimeBasedTrkg__Trajectory_B",&vec_TimeBasedTrkg__Trajectory_B);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","L")==true){
         TimeBasedTrkg__Trajectory_L = reader.getBranch<float>     ("TimeBasedTrkg::Trajectory","L");
         tree->Branch("TimeBasedTrkg__Trajectory_L",&vec_TimeBasedTrkg__Trajectory_L);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","did")==true){
         TimeBasedTrkg__Trajectory_did = reader.getBranch<int16_t>   ("TimeBasedTrkg::Trajectory","did");
         tree->Branch("TimeBasedTrkg__Trajectory_did",&vec_TimeBasedTrkg__Trajectory_did);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","tid")==true){
         TimeBasedTrkg__Trajectory_tid = reader.getBranch<int16_t>   ("TimeBasedTrkg::Trajectory","tid");
         tree->Branch("TimeBasedTrkg__Trajectory_tid",&vec_TimeBasedTrkg__Trajectory_tid);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","tx")==true){
         TimeBasedTrkg__Trajectory_tx = reader.getBranch<float>     ("TimeBasedTrkg::Trajectory","tx");
         tree->Branch("TimeBasedTrkg__Trajectory_tx",&vec_TimeBasedTrkg__Trajectory_tx);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","ty")==true){
         TimeBasedTrkg__Trajectory_ty = reader.getBranch<float>     ("TimeBasedTrkg::Trajectory","ty");
         tree->Branch("TimeBasedTrkg__Trajectory_ty",&vec_TimeBasedTrkg__Trajectory_ty);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","tz")==true){
         TimeBasedTrkg__Trajectory_tz = reader.getBranch<float>     ("TimeBasedTrkg::Trajectory","tz");
         tree->Branch("TimeBasedTrkg__Trajectory_tz",&vec_TimeBasedTrkg__Trajectory_tz);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","x")==true){
         TimeBasedTrkg__Trajectory_x = reader.getBranch<float>     ("TimeBasedTrkg::Trajectory","x");
         tree->Branch("TimeBasedTrkg__Trajectory_x",&vec_TimeBasedTrkg__Trajectory_x);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","y")==true){
         TimeBasedTrkg__Trajectory_y = reader.getBranch<float>     ("TimeBasedTrkg::Trajectory","y");
         tree->Branch("TimeBasedTrkg__Trajectory_y",&vec_TimeBasedTrkg__Trajectory_y);
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","z")==true){
         TimeBasedTrkg__Trajectory_z = reader.getBranch<float>     ("TimeBasedTrkg::Trajectory","z");
         tree->Branch("TimeBasedTrkg__Trajectory_z",&vec_TimeBasedTrkg__Trajectory_z);
      }
   }
   //----------------------------------------------------
   //--  Main LOOP running through events and printing
   //--  values of the first decalred branch
   //----------------------------------------------------
   int entry = 0;
   while(reader.next()==true){
      entry++;
   if(dictionary->hasSchema("BMT::adc")==true){
      if(dictionary->hasEntry("BMT::adc","ADC")==true){
         int nsize = BMT__adc_ADC->getLength();
         vec_BMT__adc_ADC.clear();
         vec_BMT__adc_ADC.resize(nsize);
         memcpy(&vec_BMT__adc_ADC[0],BMT__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("BMT::adc","component")==true){
         int nsize = BMT__adc_component->getLength();
         vec_BMT__adc_component.clear();
         vec_BMT__adc_component.resize(nsize);
         memcpy(&vec_BMT__adc_component[0],BMT__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMT::adc","integral")==true){
         int nsize = BMT__adc_integral->getLength();
         vec_BMT__adc_integral.clear();
         vec_BMT__adc_integral.resize(nsize);
         memcpy(&vec_BMT__adc_integral[0],BMT__adc_integral->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("BMT::adc","layer")==true){
         int nsize = BMT__adc_layer->getLength();
         vec_BMT__adc_layer.clear();
         vec_BMT__adc_layer.resize(nsize);
         memcpy(&vec_BMT__adc_layer[0],BMT__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMT::adc","order")==true){
         int nsize = BMT__adc_order->getLength();
         vec_BMT__adc_order.clear();
         vec_BMT__adc_order.resize(nsize);
         memcpy(&vec_BMT__adc_order[0],BMT__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMT::adc","ped")==true){
         int nsize = BMT__adc_ped->getLength();
         vec_BMT__adc_ped.clear();
         vec_BMT__adc_ped.resize(nsize);
         memcpy(&vec_BMT__adc_ped[0],BMT__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMT::adc","sector")==true){
         int nsize = BMT__adc_sector->getLength();
         vec_BMT__adc_sector.clear();
         vec_BMT__adc_sector.resize(nsize);
         memcpy(&vec_BMT__adc_sector[0],BMT__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMT::adc","time")==true){
         int nsize = BMT__adc_time->getLength();
         vec_BMT__adc_time.clear();
         vec_BMT__adc_time.resize(nsize);
         memcpy(&vec_BMT__adc_time[0],BMT__adc_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMT::adc","timestamp")==true){
         int nsize = BMT__adc_timestamp->getLength();
         vec_BMT__adc_timestamp.clear();
         vec_BMT__adc_timestamp.resize(nsize);
         memcpy(&vec_BMT__adc_timestamp[0],BMT__adc_timestamp->getAddress(),nsize*sizeof(int64_t));
      }
   }
   if(dictionary->hasSchema("BMTRec::Clusters")==true){
      if(dictionary->hasEntry("BMTRec::Clusters","ETot")==true){
         int nsize = BMTRec__Clusters_ETot->getLength();
         vec_BMTRec__Clusters_ETot.clear();
         vec_BMTRec__Clusters_ETot.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_ETot[0],BMTRec__Clusters_ETot->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit1_ID")==true){
         int nsize = BMTRec__Clusters_Hit1_ID->getLength();
         vec_BMTRec__Clusters_Hit1_ID.clear();
         vec_BMTRec__Clusters_Hit1_ID.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_Hit1_ID[0],BMTRec__Clusters_Hit1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit2_ID")==true){
         int nsize = BMTRec__Clusters_Hit2_ID->getLength();
         vec_BMTRec__Clusters_Hit2_ID.clear();
         vec_BMTRec__Clusters_Hit2_ID.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_Hit2_ID[0],BMTRec__Clusters_Hit2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit3_ID")==true){
         int nsize = BMTRec__Clusters_Hit3_ID->getLength();
         vec_BMTRec__Clusters_Hit3_ID.clear();
         vec_BMTRec__Clusters_Hit3_ID.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_Hit3_ID[0],BMTRec__Clusters_Hit3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit4_ID")==true){
         int nsize = BMTRec__Clusters_Hit4_ID->getLength();
         vec_BMTRec__Clusters_Hit4_ID.clear();
         vec_BMTRec__Clusters_Hit4_ID.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_Hit4_ID[0],BMTRec__Clusters_Hit4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","Hit5_ID")==true){
         int nsize = BMTRec__Clusters_Hit5_ID->getLength();
         vec_BMTRec__Clusters_Hit5_ID.clear();
         vec_BMTRec__Clusters_Hit5_ID.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_Hit5_ID[0],BMTRec__Clusters_Hit5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","ID")==true){
         int nsize = BMTRec__Clusters_ID->getLength();
         vec_BMTRec__Clusters_ID.clear();
         vec_BMTRec__Clusters_ID.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_ID[0],BMTRec__Clusters_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","centroid")==true){
         int nsize = BMTRec__Clusters_centroid->getLength();
         vec_BMTRec__Clusters_centroid.clear();
         vec_BMTRec__Clusters_centroid.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_centroid[0],BMTRec__Clusters_centroid->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","centroidResidual")==true){
         int nsize = BMTRec__Clusters_centroidResidual->getLength();
         vec_BMTRec__Clusters_centroidResidual.clear();
         vec_BMTRec__Clusters_centroidResidual.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_centroidResidual[0],BMTRec__Clusters_centroidResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","layer")==true){
         int nsize = BMTRec__Clusters_layer->getLength();
         vec_BMTRec__Clusters_layer.clear();
         vec_BMTRec__Clusters_layer.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_layer[0],BMTRec__Clusters_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","sector")==true){
         int nsize = BMTRec__Clusters_sector->getLength();
         vec_BMTRec__Clusters_sector.clear();
         vec_BMTRec__Clusters_sector.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_sector[0],BMTRec__Clusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","seedE")==true){
         int nsize = BMTRec__Clusters_seedE->getLength();
         vec_BMTRec__Clusters_seedE.clear();
         vec_BMTRec__Clusters_seedE.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_seedE[0],BMTRec__Clusters_seedE->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","seedResidual")==true){
         int nsize = BMTRec__Clusters_seedResidual->getLength();
         vec_BMTRec__Clusters_seedResidual.clear();
         vec_BMTRec__Clusters_seedResidual.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_seedResidual[0],BMTRec__Clusters_seedResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","seedStrip")==true){
         int nsize = BMTRec__Clusters_seedStrip->getLength();
         vec_BMTRec__Clusters_seedStrip.clear();
         vec_BMTRec__Clusters_seedStrip.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_seedStrip[0],BMTRec__Clusters_seedStrip->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","size")==true){
         int nsize = BMTRec__Clusters_size->getLength();
         vec_BMTRec__Clusters_size.clear();
         vec_BMTRec__Clusters_size.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_size[0],BMTRec__Clusters_size->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Clusters","trkID")==true){
         int nsize = BMTRec__Clusters_trkID->getLength();
         vec_BMTRec__Clusters_trkID.clear();
         vec_BMTRec__Clusters_trkID.resize(nsize);
         memcpy(&vec_BMTRec__Clusters_trkID[0],BMTRec__Clusters_trkID->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("BMTRec::Crosses")==true){
      if(dictionary->hasEntry("BMTRec::Crosses","Cluster1_ID")==true){
         int nsize = BMTRec__Crosses_Cluster1_ID->getLength();
         vec_BMTRec__Crosses_Cluster1_ID.clear();
         vec_BMTRec__Crosses_Cluster1_ID.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_Cluster1_ID[0],BMTRec__Crosses_Cluster1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","Cluster2_ID")==true){
         int nsize = BMTRec__Crosses_Cluster2_ID->getLength();
         vec_BMTRec__Crosses_Cluster2_ID.clear();
         vec_BMTRec__Crosses_Cluster2_ID.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_Cluster2_ID[0],BMTRec__Crosses_Cluster2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","ID")==true){
         int nsize = BMTRec__Crosses_ID->getLength();
         vec_BMTRec__Crosses_ID.clear();
         vec_BMTRec__Crosses_ID.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_ID[0],BMTRec__Crosses_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","err_x")==true){
         int nsize = BMTRec__Crosses_err_x->getLength();
         vec_BMTRec__Crosses_err_x.clear();
         vec_BMTRec__Crosses_err_x.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_err_x[0],BMTRec__Crosses_err_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","err_y")==true){
         int nsize = BMTRec__Crosses_err_y->getLength();
         vec_BMTRec__Crosses_err_y.clear();
         vec_BMTRec__Crosses_err_y.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_err_y[0],BMTRec__Crosses_err_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","err_z")==true){
         int nsize = BMTRec__Crosses_err_z->getLength();
         vec_BMTRec__Crosses_err_z.clear();
         vec_BMTRec__Crosses_err_z.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_err_z[0],BMTRec__Crosses_err_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","region")==true){
         int nsize = BMTRec__Crosses_region->getLength();
         vec_BMTRec__Crosses_region.clear();
         vec_BMTRec__Crosses_region.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_region[0],BMTRec__Crosses_region->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","sector")==true){
         int nsize = BMTRec__Crosses_sector->getLength();
         vec_BMTRec__Crosses_sector.clear();
         vec_BMTRec__Crosses_sector.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_sector[0],BMTRec__Crosses_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","trkID")==true){
         int nsize = BMTRec__Crosses_trkID->getLength();
         vec_BMTRec__Crosses_trkID.clear();
         vec_BMTRec__Crosses_trkID.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_trkID[0],BMTRec__Crosses_trkID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","ux")==true){
         int nsize = BMTRec__Crosses_ux->getLength();
         vec_BMTRec__Crosses_ux.clear();
         vec_BMTRec__Crosses_ux.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_ux[0],BMTRec__Crosses_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","uy")==true){
         int nsize = BMTRec__Crosses_uy->getLength();
         vec_BMTRec__Crosses_uy.clear();
         vec_BMTRec__Crosses_uy.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_uy[0],BMTRec__Crosses_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","uz")==true){
         int nsize = BMTRec__Crosses_uz->getLength();
         vec_BMTRec__Crosses_uz.clear();
         vec_BMTRec__Crosses_uz.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_uz[0],BMTRec__Crosses_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","x")==true){
         int nsize = BMTRec__Crosses_x->getLength();
         vec_BMTRec__Crosses_x.clear();
         vec_BMTRec__Crosses_x.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_x[0],BMTRec__Crosses_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","y")==true){
         int nsize = BMTRec__Crosses_y->getLength();
         vec_BMTRec__Crosses_y.clear();
         vec_BMTRec__Crosses_y.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_y[0],BMTRec__Crosses_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Crosses","z")==true){
         int nsize = BMTRec__Crosses_z->getLength();
         vec_BMTRec__Crosses_z.clear();
         vec_BMTRec__Crosses_z.resize(nsize);
         memcpy(&vec_BMTRec__Crosses_z[0],BMTRec__Crosses_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("BMTRec::Hits")==true){
      if(dictionary->hasEntry("BMTRec::Hits","ID")==true){
         int nsize = BMTRec__Hits_ID->getLength();
         vec_BMTRec__Hits_ID.clear();
         vec_BMTRec__Hits_ID.resize(nsize);
         memcpy(&vec_BMTRec__Hits_ID[0],BMTRec__Hits_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Hits","clusterID")==true){
         int nsize = BMTRec__Hits_clusterID->getLength();
         vec_BMTRec__Hits_clusterID.clear();
         vec_BMTRec__Hits_clusterID.resize(nsize);
         memcpy(&vec_BMTRec__Hits_clusterID[0],BMTRec__Hits_clusterID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Hits","fitResidual")==true){
         int nsize = BMTRec__Hits_fitResidual->getLength();
         vec_BMTRec__Hits_fitResidual.clear();
         vec_BMTRec__Hits_fitResidual.resize(nsize);
         memcpy(&vec_BMTRec__Hits_fitResidual[0],BMTRec__Hits_fitResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::Hits","layer")==true){
         int nsize = BMTRec__Hits_layer->getLength();
         vec_BMTRec__Hits_layer.clear();
         vec_BMTRec__Hits_layer.resize(nsize);
         memcpy(&vec_BMTRec__Hits_layer[0],BMTRec__Hits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMTRec::Hits","sector")==true){
         int nsize = BMTRec__Hits_sector->getLength();
         vec_BMTRec__Hits_sector.clear();
         vec_BMTRec__Hits_sector.resize(nsize);
         memcpy(&vec_BMTRec__Hits_sector[0],BMTRec__Hits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMTRec::Hits","strip")==true){
         int nsize = BMTRec__Hits_strip->getLength();
         vec_BMTRec__Hits_strip.clear();
         vec_BMTRec__Hits_strip.resize(nsize);
         memcpy(&vec_BMTRec__Hits_strip[0],BMTRec__Hits_strip->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("BMTRec::Hits","trkID")==true){
         int nsize = BMTRec__Hits_trkID->getLength();
         vec_BMTRec__Hits_trkID.clear();
         vec_BMTRec__Hits_trkID.resize(nsize);
         memcpy(&vec_BMTRec__Hits_trkID[0],BMTRec__Hits_trkID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BMTRec::Hits","trkingStat")==true){
         int nsize = BMTRec__Hits_trkingStat->getLength();
         vec_BMTRec__Hits_trkingStat.clear();
         vec_BMTRec__Hits_trkingStat.resize(nsize);
         memcpy(&vec_BMTRec__Hits_trkingStat[0],BMTRec__Hits_trkingStat->getAddress(),nsize*sizeof(int32_t));
      }
   }
   if(dictionary->hasSchema("BMTRec::LayerEffs")==true){
      if(dictionary->hasEntry("BMTRec::LayerEffs","layer")==true){
         int nsize = BMTRec__LayerEffs_layer->getLength();
         vec_BMTRec__LayerEffs_layer.clear();
         vec_BMTRec__LayerEffs_layer.resize(nsize);
         memcpy(&vec_BMTRec__LayerEffs_layer[0],BMTRec__LayerEffs_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMTRec::LayerEffs","residual")==true){
         int nsize = BMTRec__LayerEffs_residual->getLength();
         vec_BMTRec__LayerEffs_residual.clear();
         vec_BMTRec__LayerEffs_residual.resize(nsize);
         memcpy(&vec_BMTRec__LayerEffs_residual[0],BMTRec__LayerEffs_residual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BMTRec::LayerEffs","sector")==true){
         int nsize = BMTRec__LayerEffs_sector->getLength();
         vec_BMTRec__LayerEffs_sector.clear();
         vec_BMTRec__LayerEffs_sector.resize(nsize);
         memcpy(&vec_BMTRec__LayerEffs_sector[0],BMTRec__LayerEffs_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BMTRec::LayerEffs","status")==true){
         int nsize = BMTRec__LayerEffs_status->getLength();
         vec_BMTRec__LayerEffs_status.clear();
         vec_BMTRec__LayerEffs_status.resize(nsize);
         memcpy(&vec_BMTRec__LayerEffs_status[0],BMTRec__LayerEffs_status->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("BST::adc")==true){
      if(dictionary->hasEntry("BST::adc","ADC")==true){
         int nsize = BST__adc_ADC->getLength();
         vec_BST__adc_ADC.clear();
         vec_BST__adc_ADC.resize(nsize);
         memcpy(&vec_BST__adc_ADC[0],BST__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("BST::adc","component")==true){
         int nsize = BST__adc_component->getLength();
         vec_BST__adc_component.clear();
         vec_BST__adc_component.resize(nsize);
         memcpy(&vec_BST__adc_component[0],BST__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BST::adc","layer")==true){
         int nsize = BST__adc_layer->getLength();
         vec_BST__adc_layer.clear();
         vec_BST__adc_layer.resize(nsize);
         memcpy(&vec_BST__adc_layer[0],BST__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BST::adc","order")==true){
         int nsize = BST__adc_order->getLength();
         vec_BST__adc_order.clear();
         vec_BST__adc_order.resize(nsize);
         memcpy(&vec_BST__adc_order[0],BST__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BST::adc","ped")==true){
         int nsize = BST__adc_ped->getLength();
         vec_BST__adc_ped.clear();
         vec_BST__adc_ped.resize(nsize);
         memcpy(&vec_BST__adc_ped[0],BST__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BST::adc","sector")==true){
         int nsize = BST__adc_sector->getLength();
         vec_BST__adc_sector.clear();
         vec_BST__adc_sector.resize(nsize);
         memcpy(&vec_BST__adc_sector[0],BST__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BST::adc","time")==true){
         int nsize = BST__adc_time->getLength();
         vec_BST__adc_time.clear();
         vec_BST__adc_time.resize(nsize);
         memcpy(&vec_BST__adc_time[0],BST__adc_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BST::adc","timestamp")==true){
         int nsize = BST__adc_timestamp->getLength();
         vec_BST__adc_timestamp.clear();
         vec_BST__adc_timestamp.resize(nsize);
         memcpy(&vec_BST__adc_timestamp[0],BST__adc_timestamp->getAddress(),nsize*sizeof(int64_t));
      }
   }
   if(dictionary->hasSchema("BSTRec::Clusters")==true){
      if(dictionary->hasEntry("BSTRec::Clusters","ETot")==true){
         int nsize = BSTRec__Clusters_ETot->getLength();
         vec_BSTRec__Clusters_ETot.clear();
         vec_BSTRec__Clusters_ETot.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_ETot[0],BSTRec__Clusters_ETot->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit1_ID")==true){
         int nsize = BSTRec__Clusters_Hit1_ID->getLength();
         vec_BSTRec__Clusters_Hit1_ID.clear();
         vec_BSTRec__Clusters_Hit1_ID.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_Hit1_ID[0],BSTRec__Clusters_Hit1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit2_ID")==true){
         int nsize = BSTRec__Clusters_Hit2_ID->getLength();
         vec_BSTRec__Clusters_Hit2_ID.clear();
         vec_BSTRec__Clusters_Hit2_ID.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_Hit2_ID[0],BSTRec__Clusters_Hit2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit3_ID")==true){
         int nsize = BSTRec__Clusters_Hit3_ID->getLength();
         vec_BSTRec__Clusters_Hit3_ID.clear();
         vec_BSTRec__Clusters_Hit3_ID.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_Hit3_ID[0],BSTRec__Clusters_Hit3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit4_ID")==true){
         int nsize = BSTRec__Clusters_Hit4_ID->getLength();
         vec_BSTRec__Clusters_Hit4_ID.clear();
         vec_BSTRec__Clusters_Hit4_ID.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_Hit4_ID[0],BSTRec__Clusters_Hit4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","Hit5_ID")==true){
         int nsize = BSTRec__Clusters_Hit5_ID->getLength();
         vec_BSTRec__Clusters_Hit5_ID.clear();
         vec_BSTRec__Clusters_Hit5_ID.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_Hit5_ID[0],BSTRec__Clusters_Hit5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","ID")==true){
         int nsize = BSTRec__Clusters_ID->getLength();
         vec_BSTRec__Clusters_ID.clear();
         vec_BSTRec__Clusters_ID.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_ID[0],BSTRec__Clusters_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","centroid")==true){
         int nsize = BSTRec__Clusters_centroid->getLength();
         vec_BSTRec__Clusters_centroid.clear();
         vec_BSTRec__Clusters_centroid.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_centroid[0],BSTRec__Clusters_centroid->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","centroidResidual")==true){
         int nsize = BSTRec__Clusters_centroidResidual->getLength();
         vec_BSTRec__Clusters_centroidResidual.clear();
         vec_BSTRec__Clusters_centroidResidual.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_centroidResidual[0],BSTRec__Clusters_centroidResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","layer")==true){
         int nsize = BSTRec__Clusters_layer->getLength();
         vec_BSTRec__Clusters_layer.clear();
         vec_BSTRec__Clusters_layer.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_layer[0],BSTRec__Clusters_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","sector")==true){
         int nsize = BSTRec__Clusters_sector->getLength();
         vec_BSTRec__Clusters_sector.clear();
         vec_BSTRec__Clusters_sector.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_sector[0],BSTRec__Clusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","seedE")==true){
         int nsize = BSTRec__Clusters_seedE->getLength();
         vec_BSTRec__Clusters_seedE.clear();
         vec_BSTRec__Clusters_seedE.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_seedE[0],BSTRec__Clusters_seedE->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","seedResidual")==true){
         int nsize = BSTRec__Clusters_seedResidual->getLength();
         vec_BSTRec__Clusters_seedResidual.clear();
         vec_BSTRec__Clusters_seedResidual.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_seedResidual[0],BSTRec__Clusters_seedResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","seedStrip")==true){
         int nsize = BSTRec__Clusters_seedStrip->getLength();
         vec_BSTRec__Clusters_seedStrip.clear();
         vec_BSTRec__Clusters_seedStrip.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_seedStrip[0],BSTRec__Clusters_seedStrip->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","size")==true){
         int nsize = BSTRec__Clusters_size->getLength();
         vec_BSTRec__Clusters_size.clear();
         vec_BSTRec__Clusters_size.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_size[0],BSTRec__Clusters_size->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Clusters","trkID")==true){
         int nsize = BSTRec__Clusters_trkID->getLength();
         vec_BSTRec__Clusters_trkID.clear();
         vec_BSTRec__Clusters_trkID.resize(nsize);
         memcpy(&vec_BSTRec__Clusters_trkID[0],BSTRec__Clusters_trkID->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("BSTRec::Crosses")==true){
      if(dictionary->hasEntry("BSTRec::Crosses","Cluster1_ID")==true){
         int nsize = BSTRec__Crosses_Cluster1_ID->getLength();
         vec_BSTRec__Crosses_Cluster1_ID.clear();
         vec_BSTRec__Crosses_Cluster1_ID.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_Cluster1_ID[0],BSTRec__Crosses_Cluster1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","Cluster2_ID")==true){
         int nsize = BSTRec__Crosses_Cluster2_ID->getLength();
         vec_BSTRec__Crosses_Cluster2_ID.clear();
         vec_BSTRec__Crosses_Cluster2_ID.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_Cluster2_ID[0],BSTRec__Crosses_Cluster2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","ID")==true){
         int nsize = BSTRec__Crosses_ID->getLength();
         vec_BSTRec__Crosses_ID.clear();
         vec_BSTRec__Crosses_ID.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_ID[0],BSTRec__Crosses_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","err_x")==true){
         int nsize = BSTRec__Crosses_err_x->getLength();
         vec_BSTRec__Crosses_err_x.clear();
         vec_BSTRec__Crosses_err_x.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_err_x[0],BSTRec__Crosses_err_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","err_y")==true){
         int nsize = BSTRec__Crosses_err_y->getLength();
         vec_BSTRec__Crosses_err_y.clear();
         vec_BSTRec__Crosses_err_y.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_err_y[0],BSTRec__Crosses_err_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","err_z")==true){
         int nsize = BSTRec__Crosses_err_z->getLength();
         vec_BSTRec__Crosses_err_z.clear();
         vec_BSTRec__Crosses_err_z.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_err_z[0],BSTRec__Crosses_err_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","region")==true){
         int nsize = BSTRec__Crosses_region->getLength();
         vec_BSTRec__Crosses_region.clear();
         vec_BSTRec__Crosses_region.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_region[0],BSTRec__Crosses_region->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","sector")==true){
         int nsize = BSTRec__Crosses_sector->getLength();
         vec_BSTRec__Crosses_sector.clear();
         vec_BSTRec__Crosses_sector.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_sector[0],BSTRec__Crosses_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","trkID")==true){
         int nsize = BSTRec__Crosses_trkID->getLength();
         vec_BSTRec__Crosses_trkID.clear();
         vec_BSTRec__Crosses_trkID.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_trkID[0],BSTRec__Crosses_trkID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","ux")==true){
         int nsize = BSTRec__Crosses_ux->getLength();
         vec_BSTRec__Crosses_ux.clear();
         vec_BSTRec__Crosses_ux.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_ux[0],BSTRec__Crosses_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","uy")==true){
         int nsize = BSTRec__Crosses_uy->getLength();
         vec_BSTRec__Crosses_uy.clear();
         vec_BSTRec__Crosses_uy.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_uy[0],BSTRec__Crosses_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","uz")==true){
         int nsize = BSTRec__Crosses_uz->getLength();
         vec_BSTRec__Crosses_uz.clear();
         vec_BSTRec__Crosses_uz.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_uz[0],BSTRec__Crosses_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","x")==true){
         int nsize = BSTRec__Crosses_x->getLength();
         vec_BSTRec__Crosses_x.clear();
         vec_BSTRec__Crosses_x.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_x[0],BSTRec__Crosses_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","y")==true){
         int nsize = BSTRec__Crosses_y->getLength();
         vec_BSTRec__Crosses_y.clear();
         vec_BSTRec__Crosses_y.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_y[0],BSTRec__Crosses_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Crosses","z")==true){
         int nsize = BSTRec__Crosses_z->getLength();
         vec_BSTRec__Crosses_z.clear();
         vec_BSTRec__Crosses_z.resize(nsize);
         memcpy(&vec_BSTRec__Crosses_z[0],BSTRec__Crosses_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("BSTRec::Hits")==true){
      if(dictionary->hasEntry("BSTRec::Hits","ID")==true){
         int nsize = BSTRec__Hits_ID->getLength();
         vec_BSTRec__Hits_ID.clear();
         vec_BSTRec__Hits_ID.resize(nsize);
         memcpy(&vec_BSTRec__Hits_ID[0],BSTRec__Hits_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Hits","clusterID")==true){
         int nsize = BSTRec__Hits_clusterID->getLength();
         vec_BSTRec__Hits_clusterID.clear();
         vec_BSTRec__Hits_clusterID.resize(nsize);
         memcpy(&vec_BSTRec__Hits_clusterID[0],BSTRec__Hits_clusterID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Hits","fitResidual")==true){
         int nsize = BSTRec__Hits_fitResidual->getLength();
         vec_BSTRec__Hits_fitResidual.clear();
         vec_BSTRec__Hits_fitResidual.resize(nsize);
         memcpy(&vec_BSTRec__Hits_fitResidual[0],BSTRec__Hits_fitResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::Hits","layer")==true){
         int nsize = BSTRec__Hits_layer->getLength();
         vec_BSTRec__Hits_layer.clear();
         vec_BSTRec__Hits_layer.resize(nsize);
         memcpy(&vec_BSTRec__Hits_layer[0],BSTRec__Hits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BSTRec::Hits","sector")==true){
         int nsize = BSTRec__Hits_sector->getLength();
         vec_BSTRec__Hits_sector.clear();
         vec_BSTRec__Hits_sector.resize(nsize);
         memcpy(&vec_BSTRec__Hits_sector[0],BSTRec__Hits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BSTRec::Hits","strip")==true){
         int nsize = BSTRec__Hits_strip->getLength();
         vec_BSTRec__Hits_strip.clear();
         vec_BSTRec__Hits_strip.resize(nsize);
         memcpy(&vec_BSTRec__Hits_strip[0],BSTRec__Hits_strip->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("BSTRec::Hits","trkID")==true){
         int nsize = BSTRec__Hits_trkID->getLength();
         vec_BSTRec__Hits_trkID.clear();
         vec_BSTRec__Hits_trkID.resize(nsize);
         memcpy(&vec_BSTRec__Hits_trkID[0],BSTRec__Hits_trkID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("BSTRec::Hits","trkingStat")==true){
         int nsize = BSTRec__Hits_trkingStat->getLength();
         vec_BSTRec__Hits_trkingStat.clear();
         vec_BSTRec__Hits_trkingStat.resize(nsize);
         memcpy(&vec_BSTRec__Hits_trkingStat[0],BSTRec__Hits_trkingStat->getAddress(),nsize*sizeof(int32_t));
      }
   }
   if(dictionary->hasSchema("BSTRec::LayerEffs")==true){
      if(dictionary->hasEntry("BSTRec::LayerEffs","layer")==true){
         int nsize = BSTRec__LayerEffs_layer->getLength();
         vec_BSTRec__LayerEffs_layer.clear();
         vec_BSTRec__LayerEffs_layer.resize(nsize);
         memcpy(&vec_BSTRec__LayerEffs_layer[0],BSTRec__LayerEffs_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BSTRec::LayerEffs","residual")==true){
         int nsize = BSTRec__LayerEffs_residual->getLength();
         vec_BSTRec__LayerEffs_residual.clear();
         vec_BSTRec__LayerEffs_residual.resize(nsize);
         memcpy(&vec_BSTRec__LayerEffs_residual[0],BSTRec__LayerEffs_residual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("BSTRec::LayerEffs","sector")==true){
         int nsize = BSTRec__LayerEffs_sector->getLength();
         vec_BSTRec__LayerEffs_sector.clear();
         vec_BSTRec__LayerEffs_sector.resize(nsize);
         memcpy(&vec_BSTRec__LayerEffs_sector[0],BSTRec__LayerEffs_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("BSTRec::LayerEffs","status")==true){
         int nsize = BSTRec__LayerEffs_status->getLength();
         vec_BSTRec__LayerEffs_status.clear();
         vec_BSTRec__LayerEffs_status.resize(nsize);
         memcpy(&vec_BSTRec__LayerEffs_status[0],BSTRec__LayerEffs_status->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("CND::adc")==true){
      if(dictionary->hasEntry("CND::adc","ADC")==true){
         int nsize = CND__adc_ADC->getLength();
         vec_CND__adc_ADC.clear();
         vec_CND__adc_ADC.resize(nsize);
         memcpy(&vec_CND__adc_ADC[0],CND__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("CND::adc","component")==true){
         int nsize = CND__adc_component->getLength();
         vec_CND__adc_component.clear();
         vec_CND__adc_component.resize(nsize);
         memcpy(&vec_CND__adc_component[0],CND__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::adc","layer")==true){
         int nsize = CND__adc_layer->getLength();
         vec_CND__adc_layer.clear();
         vec_CND__adc_layer.resize(nsize);
         memcpy(&vec_CND__adc_layer[0],CND__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::adc","order")==true){
         int nsize = CND__adc_order->getLength();
         vec_CND__adc_order.clear();
         vec_CND__adc_order.resize(nsize);
         memcpy(&vec_CND__adc_order[0],CND__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::adc","ped")==true){
         int nsize = CND__adc_ped->getLength();
         vec_CND__adc_ped.clear();
         vec_CND__adc_ped.resize(nsize);
         memcpy(&vec_CND__adc_ped[0],CND__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::adc","sector")==true){
         int nsize = CND__adc_sector->getLength();
         vec_CND__adc_sector.clear();
         vec_CND__adc_sector.resize(nsize);
         memcpy(&vec_CND__adc_sector[0],CND__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::adc","time")==true){
         int nsize = CND__adc_time->getLength();
         vec_CND__adc_time.clear();
         vec_CND__adc_time.resize(nsize);
         memcpy(&vec_CND__adc_time[0],CND__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("CND::clusters")==true){
      if(dictionary->hasEntry("CND::clusters","component")==true){
         int nsize = CND__clusters_component->getLength();
         vec_CND__clusters_component.clear();
         vec_CND__clusters_component.resize(nsize);
         memcpy(&vec_CND__clusters_component[0],CND__clusters_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::clusters","energy")==true){
         int nsize = CND__clusters_energy->getLength();
         vec_CND__clusters_energy.clear();
         vec_CND__clusters_energy.resize(nsize);
         memcpy(&vec_CND__clusters_energy[0],CND__clusters_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::clusters","id")==true){
         int nsize = CND__clusters_id->getLength();
         vec_CND__clusters_id.clear();
         vec_CND__clusters_id.resize(nsize);
         memcpy(&vec_CND__clusters_id[0],CND__clusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::clusters","layer")==true){
         int nsize = CND__clusters_layer->getLength();
         vec_CND__clusters_layer.clear();
         vec_CND__clusters_layer.resize(nsize);
         memcpy(&vec_CND__clusters_layer[0],CND__clusters_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::clusters","nhits")==true){
         int nsize = CND__clusters_nhits->getLength();
         vec_CND__clusters_nhits.clear();
         vec_CND__clusters_nhits.resize(nsize);
         memcpy(&vec_CND__clusters_nhits[0],CND__clusters_nhits->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::clusters","sector")==true){
         int nsize = CND__clusters_sector->getLength();
         vec_CND__clusters_sector.clear();
         vec_CND__clusters_sector.resize(nsize);
         memcpy(&vec_CND__clusters_sector[0],CND__clusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::clusters","status")==true){
         int nsize = CND__clusters_status->getLength();
         vec_CND__clusters_status.clear();
         vec_CND__clusters_status.resize(nsize);
         memcpy(&vec_CND__clusters_status[0],CND__clusters_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::clusters","time")==true){
         int nsize = CND__clusters_time->getLength();
         vec_CND__clusters_time.clear();
         vec_CND__clusters_time.resize(nsize);
         memcpy(&vec_CND__clusters_time[0],CND__clusters_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::clusters","x")==true){
         int nsize = CND__clusters_x->getLength();
         vec_CND__clusters_x.clear();
         vec_CND__clusters_x.resize(nsize);
         memcpy(&vec_CND__clusters_x[0],CND__clusters_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::clusters","y")==true){
         int nsize = CND__clusters_y->getLength();
         vec_CND__clusters_y.clear();
         vec_CND__clusters_y.resize(nsize);
         memcpy(&vec_CND__clusters_y[0],CND__clusters_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::clusters","z")==true){
         int nsize = CND__clusters_z->getLength();
         vec_CND__clusters_z.clear();
         vec_CND__clusters_z.resize(nsize);
         memcpy(&vec_CND__clusters_z[0],CND__clusters_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("CND::hits")==true){
      if(dictionary->hasEntry("CND::hits","component")==true){
         int nsize = CND__hits_component->getLength();
         vec_CND__hits_component.clear();
         vec_CND__hits_component.resize(nsize);
         memcpy(&vec_CND__hits_component[0],CND__hits_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::hits","energy")==true){
         int nsize = CND__hits_energy->getLength();
         vec_CND__hits_energy.clear();
         vec_CND__hits_energy.resize(nsize);
         memcpy(&vec_CND__hits_energy[0],CND__hits_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","energy_unc")==true){
         int nsize = CND__hits_energy_unc->getLength();
         vec_CND__hits_energy_unc.clear();
         vec_CND__hits_energy_unc.resize(nsize);
         memcpy(&vec_CND__hits_energy_unc[0],CND__hits_energy_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","id")==true){
         int nsize = CND__hits_id->getLength();
         vec_CND__hits_id.clear();
         vec_CND__hits_id.resize(nsize);
         memcpy(&vec_CND__hits_id[0],CND__hits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::hits","indexLadc")==true){
         int nsize = CND__hits_indexLadc->getLength();
         vec_CND__hits_indexLadc.clear();
         vec_CND__hits_indexLadc.resize(nsize);
         memcpy(&vec_CND__hits_indexLadc[0],CND__hits_indexLadc->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::hits","indexLtdc")==true){
         int nsize = CND__hits_indexLtdc->getLength();
         vec_CND__hits_indexLtdc.clear();
         vec_CND__hits_indexLtdc.resize(nsize);
         memcpy(&vec_CND__hits_indexLtdc[0],CND__hits_indexLtdc->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::hits","indexRadc")==true){
         int nsize = CND__hits_indexRadc->getLength();
         vec_CND__hits_indexRadc.clear();
         vec_CND__hits_indexRadc.resize(nsize);
         memcpy(&vec_CND__hits_indexRadc[0],CND__hits_indexRadc->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::hits","indexRtdc")==true){
         int nsize = CND__hits_indexRtdc->getLength();
         vec_CND__hits_indexRtdc.clear();
         vec_CND__hits_indexRtdc.resize(nsize);
         memcpy(&vec_CND__hits_indexRtdc[0],CND__hits_indexRtdc->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::hits","layer")==true){
         int nsize = CND__hits_layer->getLength();
         vec_CND__hits_layer.clear();
         vec_CND__hits_layer.resize(nsize);
         memcpy(&vec_CND__hits_layer[0],CND__hits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::hits","pathlength")==true){
         int nsize = CND__hits_pathlength->getLength();
         vec_CND__hits_pathlength.clear();
         vec_CND__hits_pathlength.resize(nsize);
         memcpy(&vec_CND__hits_pathlength[0],CND__hits_pathlength->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","sector")==true){
         int nsize = CND__hits_sector->getLength();
         vec_CND__hits_sector.clear();
         vec_CND__hits_sector.resize(nsize);
         memcpy(&vec_CND__hits_sector[0],CND__hits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::hits","status")==true){
         int nsize = CND__hits_status->getLength();
         vec_CND__hits_status.clear();
         vec_CND__hits_status.resize(nsize);
         memcpy(&vec_CND__hits_status[0],CND__hits_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::hits","time")==true){
         int nsize = CND__hits_time->getLength();
         vec_CND__hits_time.clear();
         vec_CND__hits_time.resize(nsize);
         memcpy(&vec_CND__hits_time[0],CND__hits_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","time_unc")==true){
         int nsize = CND__hits_time_unc->getLength();
         vec_CND__hits_time_unc.clear();
         vec_CND__hits_time_unc.resize(nsize);
         memcpy(&vec_CND__hits_time_unc[0],CND__hits_time_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","tlength")==true){
         int nsize = CND__hits_tlength->getLength();
         vec_CND__hits_tlength.clear();
         vec_CND__hits_tlength.resize(nsize);
         memcpy(&vec_CND__hits_tlength[0],CND__hits_tlength->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","trkID")==true){
         int nsize = CND__hits_trkID->getLength();
         vec_CND__hits_trkID.clear();
         vec_CND__hits_trkID.resize(nsize);
         memcpy(&vec_CND__hits_trkID[0],CND__hits_trkID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::hits","tx")==true){
         int nsize = CND__hits_tx->getLength();
         vec_CND__hits_tx.clear();
         vec_CND__hits_tx.resize(nsize);
         memcpy(&vec_CND__hits_tx[0],CND__hits_tx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","ty")==true){
         int nsize = CND__hits_ty->getLength();
         vec_CND__hits_ty.clear();
         vec_CND__hits_ty.resize(nsize);
         memcpy(&vec_CND__hits_ty[0],CND__hits_ty->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","tz")==true){
         int nsize = CND__hits_tz->getLength();
         vec_CND__hits_tz.clear();
         vec_CND__hits_tz.resize(nsize);
         memcpy(&vec_CND__hits_tz[0],CND__hits_tz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","x")==true){
         int nsize = CND__hits_x->getLength();
         vec_CND__hits_x.clear();
         vec_CND__hits_x.resize(nsize);
         memcpy(&vec_CND__hits_x[0],CND__hits_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","x_unc")==true){
         int nsize = CND__hits_x_unc->getLength();
         vec_CND__hits_x_unc.clear();
         vec_CND__hits_x_unc.resize(nsize);
         memcpy(&vec_CND__hits_x_unc[0],CND__hits_x_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","y")==true){
         int nsize = CND__hits_y->getLength();
         vec_CND__hits_y.clear();
         vec_CND__hits_y.resize(nsize);
         memcpy(&vec_CND__hits_y[0],CND__hits_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","y_unc")==true){
         int nsize = CND__hits_y_unc->getLength();
         vec_CND__hits_y_unc.clear();
         vec_CND__hits_y_unc.resize(nsize);
         memcpy(&vec_CND__hits_y_unc[0],CND__hits_y_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","z")==true){
         int nsize = CND__hits_z->getLength();
         vec_CND__hits_z.clear();
         vec_CND__hits_z.resize(nsize);
         memcpy(&vec_CND__hits_z[0],CND__hits_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CND::hits","z_unc")==true){
         int nsize = CND__hits_z_unc->getLength();
         vec_CND__hits_z_unc.clear();
         vec_CND__hits_z_unc.resize(nsize);
         memcpy(&vec_CND__hits_z_unc[0],CND__hits_z_unc->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("CND::tdc")==true){
      if(dictionary->hasEntry("CND::tdc","TDC")==true){
         int nsize = CND__tdc_TDC->getLength();
         vec_CND__tdc_TDC.clear();
         vec_CND__tdc_TDC.resize(nsize);
         memcpy(&vec_CND__tdc_TDC[0],CND__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("CND::tdc","component")==true){
         int nsize = CND__tdc_component->getLength();
         vec_CND__tdc_component.clear();
         vec_CND__tdc_component.resize(nsize);
         memcpy(&vec_CND__tdc_component[0],CND__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CND::tdc","layer")==true){
         int nsize = CND__tdc_layer->getLength();
         vec_CND__tdc_layer.clear();
         vec_CND__tdc_layer.resize(nsize);
         memcpy(&vec_CND__tdc_layer[0],CND__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::tdc","order")==true){
         int nsize = CND__tdc_order->getLength();
         vec_CND__tdc_order.clear();
         vec_CND__tdc_order.resize(nsize);
         memcpy(&vec_CND__tdc_order[0],CND__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CND::tdc","sector")==true){
         int nsize = CND__tdc_sector->getLength();
         vec_CND__tdc_sector.clear();
         vec_CND__tdc_sector.resize(nsize);
         memcpy(&vec_CND__tdc_sector[0],CND__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("CTOF::adc")==true){
      if(dictionary->hasEntry("CTOF::adc","ADC")==true){
         int nsize = CTOF__adc_ADC->getLength();
         vec_CTOF__adc_ADC.clear();
         vec_CTOF__adc_ADC.resize(nsize);
         memcpy(&vec_CTOF__adc_ADC[0],CTOF__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("CTOF::adc","component")==true){
         int nsize = CTOF__adc_component->getLength();
         vec_CTOF__adc_component.clear();
         vec_CTOF__adc_component.resize(nsize);
         memcpy(&vec_CTOF__adc_component[0],CTOF__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::adc","layer")==true){
         int nsize = CTOF__adc_layer->getLength();
         vec_CTOF__adc_layer.clear();
         vec_CTOF__adc_layer.resize(nsize);
         memcpy(&vec_CTOF__adc_layer[0],CTOF__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CTOF::adc","order")==true){
         int nsize = CTOF__adc_order->getLength();
         vec_CTOF__adc_order.clear();
         vec_CTOF__adc_order.resize(nsize);
         memcpy(&vec_CTOF__adc_order[0],CTOF__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CTOF::adc","ped")==true){
         int nsize = CTOF__adc_ped->getLength();
         vec_CTOF__adc_ped.clear();
         vec_CTOF__adc_ped.resize(nsize);
         memcpy(&vec_CTOF__adc_ped[0],CTOF__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::adc","sector")==true){
         int nsize = CTOF__adc_sector->getLength();
         vec_CTOF__adc_sector.clear();
         vec_CTOF__adc_sector.resize(nsize);
         memcpy(&vec_CTOF__adc_sector[0],CTOF__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CTOF::adc","time")==true){
         int nsize = CTOF__adc_time->getLength();
         vec_CTOF__adc_time.clear();
         vec_CTOF__adc_time.resize(nsize);
         memcpy(&vec_CTOF__adc_time[0],CTOF__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("CTOF::hits")==true){
      if(dictionary->hasEntry("CTOF::hits","adc_idx1")==true){
         int nsize = CTOF__hits_adc_idx1->getLength();
         vec_CTOF__hits_adc_idx1.clear();
         vec_CTOF__hits_adc_idx1.resize(nsize);
         memcpy(&vec_CTOF__hits_adc_idx1[0],CTOF__hits_adc_idx1->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::hits","adc_idx2")==true){
         int nsize = CTOF__hits_adc_idx2->getLength();
         vec_CTOF__hits_adc_idx2.clear();
         vec_CTOF__hits_adc_idx2.resize(nsize);
         memcpy(&vec_CTOF__hits_adc_idx2[0],CTOF__hits_adc_idx2->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::hits","component")==true){
         int nsize = CTOF__hits_component->getLength();
         vec_CTOF__hits_component.clear();
         vec_CTOF__hits_component.resize(nsize);
         memcpy(&vec_CTOF__hits_component[0],CTOF__hits_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::hits","energy")==true){
         int nsize = CTOF__hits_energy->getLength();
         vec_CTOF__hits_energy.clear();
         vec_CTOF__hits_energy.resize(nsize);
         memcpy(&vec_CTOF__hits_energy[0],CTOF__hits_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","energy_unc")==true){
         int nsize = CTOF__hits_energy_unc->getLength();
         vec_CTOF__hits_energy_unc.clear();
         vec_CTOF__hits_energy_unc.resize(nsize);
         memcpy(&vec_CTOF__hits_energy_unc[0],CTOF__hits_energy_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","id")==true){
         int nsize = CTOF__hits_id->getLength();
         vec_CTOF__hits_id.clear();
         vec_CTOF__hits_id.resize(nsize);
         memcpy(&vec_CTOF__hits_id[0],CTOF__hits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::hits","layer")==true){
         int nsize = CTOF__hits_layer->getLength();
         vec_CTOF__hits_layer.clear();
         vec_CTOF__hits_layer.resize(nsize);
         memcpy(&vec_CTOF__hits_layer[0],CTOF__hits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CTOF::hits","pathLength")==true){
         int nsize = CTOF__hits_pathLength->getLength();
         vec_CTOF__hits_pathLength.clear();
         vec_CTOF__hits_pathLength.resize(nsize);
         memcpy(&vec_CTOF__hits_pathLength[0],CTOF__hits_pathLength->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","pathLengthThruBar")==true){
         int nsize = CTOF__hits_pathLengthThruBar->getLength();
         vec_CTOF__hits_pathLengthThruBar.clear();
         vec_CTOF__hits_pathLengthThruBar.resize(nsize);
         memcpy(&vec_CTOF__hits_pathLengthThruBar[0],CTOF__hits_pathLengthThruBar->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","sector")==true){
         int nsize = CTOF__hits_sector->getLength();
         vec_CTOF__hits_sector.clear();
         vec_CTOF__hits_sector.resize(nsize);
         memcpy(&vec_CTOF__hits_sector[0],CTOF__hits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CTOF::hits","status")==true){
         int nsize = CTOF__hits_status->getLength();
         vec_CTOF__hits_status.clear();
         vec_CTOF__hits_status.resize(nsize);
         memcpy(&vec_CTOF__hits_status[0],CTOF__hits_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::hits","tdc_idx1")==true){
         int nsize = CTOF__hits_tdc_idx1->getLength();
         vec_CTOF__hits_tdc_idx1.clear();
         vec_CTOF__hits_tdc_idx1.resize(nsize);
         memcpy(&vec_CTOF__hits_tdc_idx1[0],CTOF__hits_tdc_idx1->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::hits","tdc_idx2")==true){
         int nsize = CTOF__hits_tdc_idx2->getLength();
         vec_CTOF__hits_tdc_idx2.clear();
         vec_CTOF__hits_tdc_idx2.resize(nsize);
         memcpy(&vec_CTOF__hits_tdc_idx2[0],CTOF__hits_tdc_idx2->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::hits","time")==true){
         int nsize = CTOF__hits_time->getLength();
         vec_CTOF__hits_time.clear();
         vec_CTOF__hits_time.resize(nsize);
         memcpy(&vec_CTOF__hits_time[0],CTOF__hits_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","time_unc")==true){
         int nsize = CTOF__hits_time_unc->getLength();
         vec_CTOF__hits_time_unc.clear();
         vec_CTOF__hits_time_unc.resize(nsize);
         memcpy(&vec_CTOF__hits_time_unc[0],CTOF__hits_time_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","trkID")==true){
         int nsize = CTOF__hits_trkID->getLength();
         vec_CTOF__hits_trkID.clear();
         vec_CTOF__hits_trkID.resize(nsize);
         memcpy(&vec_CTOF__hits_trkID[0],CTOF__hits_trkID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::hits","tx")==true){
         int nsize = CTOF__hits_tx->getLength();
         vec_CTOF__hits_tx.clear();
         vec_CTOF__hits_tx.resize(nsize);
         memcpy(&vec_CTOF__hits_tx[0],CTOF__hits_tx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","ty")==true){
         int nsize = CTOF__hits_ty->getLength();
         vec_CTOF__hits_ty.clear();
         vec_CTOF__hits_ty.resize(nsize);
         memcpy(&vec_CTOF__hits_ty[0],CTOF__hits_ty->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","tz")==true){
         int nsize = CTOF__hits_tz->getLength();
         vec_CTOF__hits_tz.clear();
         vec_CTOF__hits_tz.resize(nsize);
         memcpy(&vec_CTOF__hits_tz[0],CTOF__hits_tz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","x")==true){
         int nsize = CTOF__hits_x->getLength();
         vec_CTOF__hits_x.clear();
         vec_CTOF__hits_x.resize(nsize);
         memcpy(&vec_CTOF__hits_x[0],CTOF__hits_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","x_unc")==true){
         int nsize = CTOF__hits_x_unc->getLength();
         vec_CTOF__hits_x_unc.clear();
         vec_CTOF__hits_x_unc.resize(nsize);
         memcpy(&vec_CTOF__hits_x_unc[0],CTOF__hits_x_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","y")==true){
         int nsize = CTOF__hits_y->getLength();
         vec_CTOF__hits_y.clear();
         vec_CTOF__hits_y.resize(nsize);
         memcpy(&vec_CTOF__hits_y[0],CTOF__hits_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","y_unc")==true){
         int nsize = CTOF__hits_y_unc->getLength();
         vec_CTOF__hits_y_unc.clear();
         vec_CTOF__hits_y_unc.resize(nsize);
         memcpy(&vec_CTOF__hits_y_unc[0],CTOF__hits_y_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","z")==true){
         int nsize = CTOF__hits_z->getLength();
         vec_CTOF__hits_z.clear();
         vec_CTOF__hits_z.resize(nsize);
         memcpy(&vec_CTOF__hits_z[0],CTOF__hits_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::hits","z_unc")==true){
         int nsize = CTOF__hits_z_unc->getLength();
         vec_CTOF__hits_z_unc.clear();
         vec_CTOF__hits_z_unc.resize(nsize);
         memcpy(&vec_CTOF__hits_z_unc[0],CTOF__hits_z_unc->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("CTOF::rawhits")==true){
      if(dictionary->hasEntry("CTOF::rawhits","component")==true){
         int nsize = CTOF__rawhits_component->getLength();
         vec_CTOF__rawhits_component.clear();
         vec_CTOF__rawhits_component.resize(nsize);
         memcpy(&vec_CTOF__rawhits_component[0],CTOF__rawhits_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::rawhits","energy_down")==true){
         int nsize = CTOF__rawhits_energy_down->getLength();
         vec_CTOF__rawhits_energy_down.clear();
         vec_CTOF__rawhits_energy_down.resize(nsize);
         memcpy(&vec_CTOF__rawhits_energy_down[0],CTOF__rawhits_energy_down->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::rawhits","energy_down_unc")==true){
         int nsize = CTOF__rawhits_energy_down_unc->getLength();
         vec_CTOF__rawhits_energy_down_unc.clear();
         vec_CTOF__rawhits_energy_down_unc.resize(nsize);
         memcpy(&vec_CTOF__rawhits_energy_down_unc[0],CTOF__rawhits_energy_down_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::rawhits","energy_up")==true){
         int nsize = CTOF__rawhits_energy_up->getLength();
         vec_CTOF__rawhits_energy_up.clear();
         vec_CTOF__rawhits_energy_up.resize(nsize);
         memcpy(&vec_CTOF__rawhits_energy_up[0],CTOF__rawhits_energy_up->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::rawhits","energy_up_unc")==true){
         int nsize = CTOF__rawhits_energy_up_unc->getLength();
         vec_CTOF__rawhits_energy_up_unc.clear();
         vec_CTOF__rawhits_energy_up_unc.resize(nsize);
         memcpy(&vec_CTOF__rawhits_energy_up_unc[0],CTOF__rawhits_energy_up_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::rawhits","id")==true){
         int nsize = CTOF__rawhits_id->getLength();
         vec_CTOF__rawhits_id.clear();
         vec_CTOF__rawhits_id.resize(nsize);
         memcpy(&vec_CTOF__rawhits_id[0],CTOF__rawhits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::rawhits","status")==true){
         int nsize = CTOF__rawhits_status->getLength();
         vec_CTOF__rawhits_status.clear();
         vec_CTOF__rawhits_status.resize(nsize);
         memcpy(&vec_CTOF__rawhits_status[0],CTOF__rawhits_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::rawhits","time_down")==true){
         int nsize = CTOF__rawhits_time_down->getLength();
         vec_CTOF__rawhits_time_down.clear();
         vec_CTOF__rawhits_time_down.resize(nsize);
         memcpy(&vec_CTOF__rawhits_time_down[0],CTOF__rawhits_time_down->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::rawhits","time_down_unc")==true){
         int nsize = CTOF__rawhits_time_down_unc->getLength();
         vec_CTOF__rawhits_time_down_unc.clear();
         vec_CTOF__rawhits_time_down_unc.resize(nsize);
         memcpy(&vec_CTOF__rawhits_time_down_unc[0],CTOF__rawhits_time_down_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::rawhits","time_up")==true){
         int nsize = CTOF__rawhits_time_up->getLength();
         vec_CTOF__rawhits_time_up.clear();
         vec_CTOF__rawhits_time_up.resize(nsize);
         memcpy(&vec_CTOF__rawhits_time_up[0],CTOF__rawhits_time_up->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CTOF::rawhits","time_up_unc")==true){
         int nsize = CTOF__rawhits_time_up_unc->getLength();
         vec_CTOF__rawhits_time_up_unc.clear();
         vec_CTOF__rawhits_time_up_unc.resize(nsize);
         memcpy(&vec_CTOF__rawhits_time_up_unc[0],CTOF__rawhits_time_up_unc->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("CTOF::tdc")==true){
      if(dictionary->hasEntry("CTOF::tdc","TDC")==true){
         int nsize = CTOF__tdc_TDC->getLength();
         vec_CTOF__tdc_TDC.clear();
         vec_CTOF__tdc_TDC.resize(nsize);
         memcpy(&vec_CTOF__tdc_TDC[0],CTOF__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("CTOF::tdc","component")==true){
         int nsize = CTOF__tdc_component->getLength();
         vec_CTOF__tdc_component.clear();
         vec_CTOF__tdc_component.resize(nsize);
         memcpy(&vec_CTOF__tdc_component[0],CTOF__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CTOF::tdc","layer")==true){
         int nsize = CTOF__tdc_layer->getLength();
         vec_CTOF__tdc_layer.clear();
         vec_CTOF__tdc_layer.resize(nsize);
         memcpy(&vec_CTOF__tdc_layer[0],CTOF__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CTOF::tdc","order")==true){
         int nsize = CTOF__tdc_order->getLength();
         vec_CTOF__tdc_order.clear();
         vec_CTOF__tdc_order.resize(nsize);
         memcpy(&vec_CTOF__tdc_order[0],CTOF__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CTOF::tdc","sector")==true){
         int nsize = CTOF__tdc_sector->getLength();
         vec_CTOF__tdc_sector.clear();
         vec_CTOF__tdc_sector.resize(nsize);
         memcpy(&vec_CTOF__tdc_sector[0],CTOF__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("CVTRec::Cosmics")==true){
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross10_ID")==true){
         int nsize = CVTRec__Cosmics_Cross10_ID->getLength();
         vec_CVTRec__Cosmics_Cross10_ID.clear();
         vec_CVTRec__Cosmics_Cross10_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross10_ID[0],CVTRec__Cosmics_Cross10_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross11_ID")==true){
         int nsize = CVTRec__Cosmics_Cross11_ID->getLength();
         vec_CVTRec__Cosmics_Cross11_ID.clear();
         vec_CVTRec__Cosmics_Cross11_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross11_ID[0],CVTRec__Cosmics_Cross11_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross12_ID")==true){
         int nsize = CVTRec__Cosmics_Cross12_ID->getLength();
         vec_CVTRec__Cosmics_Cross12_ID.clear();
         vec_CVTRec__Cosmics_Cross12_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross12_ID[0],CVTRec__Cosmics_Cross12_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross13_ID")==true){
         int nsize = CVTRec__Cosmics_Cross13_ID->getLength();
         vec_CVTRec__Cosmics_Cross13_ID.clear();
         vec_CVTRec__Cosmics_Cross13_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross13_ID[0],CVTRec__Cosmics_Cross13_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross14_ID")==true){
         int nsize = CVTRec__Cosmics_Cross14_ID->getLength();
         vec_CVTRec__Cosmics_Cross14_ID.clear();
         vec_CVTRec__Cosmics_Cross14_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross14_ID[0],CVTRec__Cosmics_Cross14_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross15_ID")==true){
         int nsize = CVTRec__Cosmics_Cross15_ID->getLength();
         vec_CVTRec__Cosmics_Cross15_ID.clear();
         vec_CVTRec__Cosmics_Cross15_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross15_ID[0],CVTRec__Cosmics_Cross15_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross16_ID")==true){
         int nsize = CVTRec__Cosmics_Cross16_ID->getLength();
         vec_CVTRec__Cosmics_Cross16_ID.clear();
         vec_CVTRec__Cosmics_Cross16_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross16_ID[0],CVTRec__Cosmics_Cross16_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross17_ID")==true){
         int nsize = CVTRec__Cosmics_Cross17_ID->getLength();
         vec_CVTRec__Cosmics_Cross17_ID.clear();
         vec_CVTRec__Cosmics_Cross17_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross17_ID[0],CVTRec__Cosmics_Cross17_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross18_ID")==true){
         int nsize = CVTRec__Cosmics_Cross18_ID->getLength();
         vec_CVTRec__Cosmics_Cross18_ID.clear();
         vec_CVTRec__Cosmics_Cross18_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross18_ID[0],CVTRec__Cosmics_Cross18_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross1_ID")==true){
         int nsize = CVTRec__Cosmics_Cross1_ID->getLength();
         vec_CVTRec__Cosmics_Cross1_ID.clear();
         vec_CVTRec__Cosmics_Cross1_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross1_ID[0],CVTRec__Cosmics_Cross1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross2_ID")==true){
         int nsize = CVTRec__Cosmics_Cross2_ID->getLength();
         vec_CVTRec__Cosmics_Cross2_ID.clear();
         vec_CVTRec__Cosmics_Cross2_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross2_ID[0],CVTRec__Cosmics_Cross2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross3_ID")==true){
         int nsize = CVTRec__Cosmics_Cross3_ID->getLength();
         vec_CVTRec__Cosmics_Cross3_ID.clear();
         vec_CVTRec__Cosmics_Cross3_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross3_ID[0],CVTRec__Cosmics_Cross3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross4_ID")==true){
         int nsize = CVTRec__Cosmics_Cross4_ID->getLength();
         vec_CVTRec__Cosmics_Cross4_ID.clear();
         vec_CVTRec__Cosmics_Cross4_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross4_ID[0],CVTRec__Cosmics_Cross4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross5_ID")==true){
         int nsize = CVTRec__Cosmics_Cross5_ID->getLength();
         vec_CVTRec__Cosmics_Cross5_ID.clear();
         vec_CVTRec__Cosmics_Cross5_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross5_ID[0],CVTRec__Cosmics_Cross5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross6_ID")==true){
         int nsize = CVTRec__Cosmics_Cross6_ID->getLength();
         vec_CVTRec__Cosmics_Cross6_ID.clear();
         vec_CVTRec__Cosmics_Cross6_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross6_ID[0],CVTRec__Cosmics_Cross6_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross7_ID")==true){
         int nsize = CVTRec__Cosmics_Cross7_ID->getLength();
         vec_CVTRec__Cosmics_Cross7_ID.clear();
         vec_CVTRec__Cosmics_Cross7_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross7_ID[0],CVTRec__Cosmics_Cross7_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross8_ID")==true){
         int nsize = CVTRec__Cosmics_Cross8_ID->getLength();
         vec_CVTRec__Cosmics_Cross8_ID.clear();
         vec_CVTRec__Cosmics_Cross8_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross8_ID[0],CVTRec__Cosmics_Cross8_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","Cross9_ID")==true){
         int nsize = CVTRec__Cosmics_Cross9_ID->getLength();
         vec_CVTRec__Cosmics_Cross9_ID.clear();
         vec_CVTRec__Cosmics_Cross9_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_Cross9_ID[0],CVTRec__Cosmics_Cross9_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","ID")==true){
         int nsize = CVTRec__Cosmics_ID->getLength();
         vec_CVTRec__Cosmics_ID.clear();
         vec_CVTRec__Cosmics_ID.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_ID[0],CVTRec__Cosmics_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","chi2")==true){
         int nsize = CVTRec__Cosmics_chi2->getLength();
         vec_CVTRec__Cosmics_chi2.clear();
         vec_CVTRec__Cosmics_chi2.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_chi2[0],CVTRec__Cosmics_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","ndf")==true){
         int nsize = CVTRec__Cosmics_ndf->getLength();
         vec_CVTRec__Cosmics_ndf.clear();
         vec_CVTRec__Cosmics_ndf.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_ndf[0],CVTRec__Cosmics_ndf->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","phi")==true){
         int nsize = CVTRec__Cosmics_phi->getLength();
         vec_CVTRec__Cosmics_phi.clear();
         vec_CVTRec__Cosmics_phi.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_phi[0],CVTRec__Cosmics_phi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","theta")==true){
         int nsize = CVTRec__Cosmics_theta->getLength();
         vec_CVTRec__Cosmics_theta.clear();
         vec_CVTRec__Cosmics_theta.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_theta[0],CVTRec__Cosmics_theta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","trkline_yx_interc")==true){
         int nsize = CVTRec__Cosmics_trkline_yx_interc->getLength();
         vec_CVTRec__Cosmics_trkline_yx_interc.clear();
         vec_CVTRec__Cosmics_trkline_yx_interc.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_trkline_yx_interc[0],CVTRec__Cosmics_trkline_yx_interc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","trkline_yx_slope")==true){
         int nsize = CVTRec__Cosmics_trkline_yx_slope->getLength();
         vec_CVTRec__Cosmics_trkline_yx_slope.clear();
         vec_CVTRec__Cosmics_trkline_yx_slope.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_trkline_yx_slope[0],CVTRec__Cosmics_trkline_yx_slope->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","trkline_yz_interc")==true){
         int nsize = CVTRec__Cosmics_trkline_yz_interc->getLength();
         vec_CVTRec__Cosmics_trkline_yz_interc.clear();
         vec_CVTRec__Cosmics_trkline_yz_interc.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_trkline_yz_interc[0],CVTRec__Cosmics_trkline_yz_interc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Cosmics","trkline_yz_slope")==true){
         int nsize = CVTRec__Cosmics_trkline_yz_slope->getLength();
         vec_CVTRec__Cosmics_trkline_yz_slope.clear();
         vec_CVTRec__Cosmics_trkline_yz_slope.resize(nsize);
         memcpy(&vec_CVTRec__Cosmics_trkline_yz_slope[0],CVTRec__Cosmics_trkline_yz_slope->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("CVTRec::Tracks")==true){
      if(dictionary->hasEntry("CVTRec::Tracks","Cross1_ID")==true){
         int nsize = CVTRec__Tracks_Cross1_ID->getLength();
         vec_CVTRec__Tracks_Cross1_ID.clear();
         vec_CVTRec__Tracks_Cross1_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross1_ID[0],CVTRec__Tracks_Cross1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross2_ID")==true){
         int nsize = CVTRec__Tracks_Cross2_ID->getLength();
         vec_CVTRec__Tracks_Cross2_ID.clear();
         vec_CVTRec__Tracks_Cross2_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross2_ID[0],CVTRec__Tracks_Cross2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross3_ID")==true){
         int nsize = CVTRec__Tracks_Cross3_ID->getLength();
         vec_CVTRec__Tracks_Cross3_ID.clear();
         vec_CVTRec__Tracks_Cross3_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross3_ID[0],CVTRec__Tracks_Cross3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross4_ID")==true){
         int nsize = CVTRec__Tracks_Cross4_ID->getLength();
         vec_CVTRec__Tracks_Cross4_ID.clear();
         vec_CVTRec__Tracks_Cross4_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross4_ID[0],CVTRec__Tracks_Cross4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross5_ID")==true){
         int nsize = CVTRec__Tracks_Cross5_ID->getLength();
         vec_CVTRec__Tracks_Cross5_ID.clear();
         vec_CVTRec__Tracks_Cross5_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross5_ID[0],CVTRec__Tracks_Cross5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross6_ID")==true){
         int nsize = CVTRec__Tracks_Cross6_ID->getLength();
         vec_CVTRec__Tracks_Cross6_ID.clear();
         vec_CVTRec__Tracks_Cross6_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross6_ID[0],CVTRec__Tracks_Cross6_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross7_ID")==true){
         int nsize = CVTRec__Tracks_Cross7_ID->getLength();
         vec_CVTRec__Tracks_Cross7_ID.clear();
         vec_CVTRec__Tracks_Cross7_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross7_ID[0],CVTRec__Tracks_Cross7_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross8_ID")==true){
         int nsize = CVTRec__Tracks_Cross8_ID->getLength();
         vec_CVTRec__Tracks_Cross8_ID.clear();
         vec_CVTRec__Tracks_Cross8_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross8_ID[0],CVTRec__Tracks_Cross8_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","Cross9_ID")==true){
         int nsize = CVTRec__Tracks_Cross9_ID->getLength();
         vec_CVTRec__Tracks_Cross9_ID.clear();
         vec_CVTRec__Tracks_Cross9_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_Cross9_ID[0],CVTRec__Tracks_Cross9_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","ID")==true){
         int nsize = CVTRec__Tracks_ID->getLength();
         vec_CVTRec__Tracks_ID.clear();
         vec_CVTRec__Tracks_ID.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_ID[0],CVTRec__Tracks_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_ux")==true){
         int nsize = CVTRec__Tracks_c_ux->getLength();
         vec_CVTRec__Tracks_c_ux.clear();
         vec_CVTRec__Tracks_c_ux.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_c_ux[0],CVTRec__Tracks_c_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_uy")==true){
         int nsize = CVTRec__Tracks_c_uy->getLength();
         vec_CVTRec__Tracks_c_uy.clear();
         vec_CVTRec__Tracks_c_uy.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_c_uy[0],CVTRec__Tracks_c_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_uz")==true){
         int nsize = CVTRec__Tracks_c_uz->getLength();
         vec_CVTRec__Tracks_c_uz.clear();
         vec_CVTRec__Tracks_c_uz.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_c_uz[0],CVTRec__Tracks_c_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_x")==true){
         int nsize = CVTRec__Tracks_c_x->getLength();
         vec_CVTRec__Tracks_c_x.clear();
         vec_CVTRec__Tracks_c_x.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_c_x[0],CVTRec__Tracks_c_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_y")==true){
         int nsize = CVTRec__Tracks_c_y->getLength();
         vec_CVTRec__Tracks_c_y.clear();
         vec_CVTRec__Tracks_c_y.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_c_y[0],CVTRec__Tracks_c_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","c_z")==true){
         int nsize = CVTRec__Tracks_c_z->getLength();
         vec_CVTRec__Tracks_c_z.clear();
         vec_CVTRec__Tracks_c_z.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_c_z[0],CVTRec__Tracks_c_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","chi2")==true){
         int nsize = CVTRec__Tracks_chi2->getLength();
         vec_CVTRec__Tracks_chi2.clear();
         vec_CVTRec__Tracks_chi2.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_chi2[0],CVTRec__Tracks_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","circlefit_chi2_per_ndf")==true){
         int nsize = CVTRec__Tracks_circlefit_chi2_per_ndf->getLength();
         vec_CVTRec__Tracks_circlefit_chi2_per_ndf.clear();
         vec_CVTRec__Tracks_circlefit_chi2_per_ndf.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_circlefit_chi2_per_ndf[0],CVTRec__Tracks_circlefit_chi2_per_ndf->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_d02")==true){
         int nsize = CVTRec__Tracks_cov_d02->getLength();
         vec_CVTRec__Tracks_cov_d02.clear();
         vec_CVTRec__Tracks_cov_d02.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_cov_d02[0],CVTRec__Tracks_cov_d02->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_d0phi0")==true){
         int nsize = CVTRec__Tracks_cov_d0phi0->getLength();
         vec_CVTRec__Tracks_cov_d0phi0.clear();
         vec_CVTRec__Tracks_cov_d0phi0.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_cov_d0phi0[0],CVTRec__Tracks_cov_d0phi0->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_d0rho")==true){
         int nsize = CVTRec__Tracks_cov_d0rho->getLength();
         vec_CVTRec__Tracks_cov_d0rho.clear();
         vec_CVTRec__Tracks_cov_d0rho.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_cov_d0rho[0],CVTRec__Tracks_cov_d0rho->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_phi02")==true){
         int nsize = CVTRec__Tracks_cov_phi02->getLength();
         vec_CVTRec__Tracks_cov_phi02.clear();
         vec_CVTRec__Tracks_cov_phi02.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_cov_phi02[0],CVTRec__Tracks_cov_phi02->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_phi0rho")==true){
         int nsize = CVTRec__Tracks_cov_phi0rho->getLength();
         vec_CVTRec__Tracks_cov_phi0rho.clear();
         vec_CVTRec__Tracks_cov_phi0rho.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_cov_phi0rho[0],CVTRec__Tracks_cov_phi0rho->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_rho2")==true){
         int nsize = CVTRec__Tracks_cov_rho2->getLength();
         vec_CVTRec__Tracks_cov_rho2.clear();
         vec_CVTRec__Tracks_cov_rho2.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_cov_rho2[0],CVTRec__Tracks_cov_rho2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_tandip2")==true){
         int nsize = CVTRec__Tracks_cov_tandip2->getLength();
         vec_CVTRec__Tracks_cov_tandip2.clear();
         vec_CVTRec__Tracks_cov_tandip2.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_cov_tandip2[0],CVTRec__Tracks_cov_tandip2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","cov_z02")==true){
         int nsize = CVTRec__Tracks_cov_z02->getLength();
         vec_CVTRec__Tracks_cov_z02.clear();
         vec_CVTRec__Tracks_cov_z02.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_cov_z02[0],CVTRec__Tracks_cov_z02->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","d0")==true){
         int nsize = CVTRec__Tracks_d0->getLength();
         vec_CVTRec__Tracks_d0.clear();
         vec_CVTRec__Tracks_d0.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_d0[0],CVTRec__Tracks_d0->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","fittingMethod")==true){
         int nsize = CVTRec__Tracks_fittingMethod->getLength();
         vec_CVTRec__Tracks_fittingMethod.clear();
         vec_CVTRec__Tracks_fittingMethod.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_fittingMethod[0],CVTRec__Tracks_fittingMethod->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","linefit_chi2_per_ndf")==true){
         int nsize = CVTRec__Tracks_linefit_chi2_per_ndf->getLength();
         vec_CVTRec__Tracks_linefit_chi2_per_ndf.clear();
         vec_CVTRec__Tracks_linefit_chi2_per_ndf.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_linefit_chi2_per_ndf[0],CVTRec__Tracks_linefit_chi2_per_ndf->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","ndf")==true){
         int nsize = CVTRec__Tracks_ndf->getLength();
         vec_CVTRec__Tracks_ndf.clear();
         vec_CVTRec__Tracks_ndf.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_ndf[0],CVTRec__Tracks_ndf->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","p")==true){
         int nsize = CVTRec__Tracks_p->getLength();
         vec_CVTRec__Tracks_p.clear();
         vec_CVTRec__Tracks_p.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_p[0],CVTRec__Tracks_p->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","pathlength")==true){
         int nsize = CVTRec__Tracks_pathlength->getLength();
         vec_CVTRec__Tracks_pathlength.clear();
         vec_CVTRec__Tracks_pathlength.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_pathlength[0],CVTRec__Tracks_pathlength->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","phi0")==true){
         int nsize = CVTRec__Tracks_phi0->getLength();
         vec_CVTRec__Tracks_phi0.clear();
         vec_CVTRec__Tracks_phi0.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_phi0[0],CVTRec__Tracks_phi0->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","pt")==true){
         int nsize = CVTRec__Tracks_pt->getLength();
         vec_CVTRec__Tracks_pt.clear();
         vec_CVTRec__Tracks_pt.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_pt[0],CVTRec__Tracks_pt->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","q")==true){
         int nsize = CVTRec__Tracks_q->getLength();
         vec_CVTRec__Tracks_q.clear();
         vec_CVTRec__Tracks_q.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_q[0],CVTRec__Tracks_q->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","tandip")==true){
         int nsize = CVTRec__Tracks_tandip->getLength();
         vec_CVTRec__Tracks_tandip.clear();
         vec_CVTRec__Tracks_tandip.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_tandip[0],CVTRec__Tracks_tandip->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Tracks","z0")==true){
         int nsize = CVTRec__Tracks_z0->getLength();
         vec_CVTRec__Tracks_z0.clear();
         vec_CVTRec__Tracks_z0.resize(nsize);
         memcpy(&vec_CVTRec__Tracks_z0[0],CVTRec__Tracks_z0->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("CVTRec::Trajectory")==true){
      if(dictionary->hasEntry("CVTRec::Trajectory","CalcCentroidStrip")==true){
         int nsize = CVTRec__Trajectory_CalcCentroidStrip->getLength();
         vec_CVTRec__Trajectory_CalcCentroidStrip.clear();
         vec_CVTRec__Trajectory_CalcCentroidStrip.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_CalcCentroidStrip[0],CVTRec__Trajectory_CalcCentroidStrip->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","ID")==true){
         int nsize = CVTRec__Trajectory_ID->getLength();
         vec_CVTRec__Trajectory_ID.clear();
         vec_CVTRec__Trajectory_ID.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_ID[0],CVTRec__Trajectory_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","LayerTrackIntersPlane")==true){
         int nsize = CVTRec__Trajectory_LayerTrackIntersPlane->getLength();
         vec_CVTRec__Trajectory_LayerTrackIntersPlane.clear();
         vec_CVTRec__Trajectory_LayerTrackIntersPlane.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_LayerTrackIntersPlane[0],CVTRec__Trajectory_LayerTrackIntersPlane->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","PhiTrackIntersPlane")==true){
         int nsize = CVTRec__Trajectory_PhiTrackIntersPlane->getLength();
         vec_CVTRec__Trajectory_PhiTrackIntersPlane.clear();
         vec_CVTRec__Trajectory_PhiTrackIntersPlane.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_PhiTrackIntersPlane[0],CVTRec__Trajectory_PhiTrackIntersPlane->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","SectorTrackIntersPlane")==true){
         int nsize = CVTRec__Trajectory_SectorTrackIntersPlane->getLength();
         vec_CVTRec__Trajectory_SectorTrackIntersPlane.clear();
         vec_CVTRec__Trajectory_SectorTrackIntersPlane.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_SectorTrackIntersPlane[0],CVTRec__Trajectory_SectorTrackIntersPlane->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","ThetaTrackIntersPlane")==true){
         int nsize = CVTRec__Trajectory_ThetaTrackIntersPlane->getLength();
         vec_CVTRec__Trajectory_ThetaTrackIntersPlane.clear();
         vec_CVTRec__Trajectory_ThetaTrackIntersPlane.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_ThetaTrackIntersPlane[0],CVTRec__Trajectory_ThetaTrackIntersPlane->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","XtrackIntersPlane")==true){
         int nsize = CVTRec__Trajectory_XtrackIntersPlane->getLength();
         vec_CVTRec__Trajectory_XtrackIntersPlane.clear();
         vec_CVTRec__Trajectory_XtrackIntersPlane.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_XtrackIntersPlane[0],CVTRec__Trajectory_XtrackIntersPlane->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","YtrackIntersPlane")==true){
         int nsize = CVTRec__Trajectory_YtrackIntersPlane->getLength();
         vec_CVTRec__Trajectory_YtrackIntersPlane.clear();
         vec_CVTRec__Trajectory_YtrackIntersPlane.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_YtrackIntersPlane[0],CVTRec__Trajectory_YtrackIntersPlane->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","ZtrackIntersPlane")==true){
         int nsize = CVTRec__Trajectory_ZtrackIntersPlane->getLength();
         vec_CVTRec__Trajectory_ZtrackIntersPlane.clear();
         vec_CVTRec__Trajectory_ZtrackIntersPlane.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_ZtrackIntersPlane[0],CVTRec__Trajectory_ZtrackIntersPlane->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("CVTRec::Trajectory","trkToMPlnAngl")==true){
         int nsize = CVTRec__Trajectory_trkToMPlnAngl->getLength();
         vec_CVTRec__Trajectory_trkToMPlnAngl.clear();
         vec_CVTRec__Trajectory_trkToMPlnAngl.resize(nsize);
         memcpy(&vec_CVTRec__Trajectory_trkToMPlnAngl[0],CVTRec__Trajectory_trkToMPlnAngl->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("DC::doca")==true){
      if(dictionary->hasEntry("DC::doca","LR")==true){
         int nsize = DC__doca_LR->getLength();
         vec_DC__doca_LR.clear();
         vec_DC__doca_LR.resize(nsize);
         memcpy(&vec_DC__doca_LR[0],DC__doca_LR->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("DC::doca","doca")==true){
         int nsize = DC__doca_doca->getLength();
         vec_DC__doca_doca.clear();
         vec_DC__doca_doca.resize(nsize);
         memcpy(&vec_DC__doca_doca[0],DC__doca_doca->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DC::doca","sdoca")==true){
         int nsize = DC__doca_sdoca->getLength();
         vec_DC__doca_sdoca.clear();
         vec_DC__doca_sdoca.resize(nsize);
         memcpy(&vec_DC__doca_sdoca[0],DC__doca_sdoca->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DC::doca","stime")==true){
         int nsize = DC__doca_stime->getLength();
         vec_DC__doca_stime.clear();
         vec_DC__doca_stime.resize(nsize);
         memcpy(&vec_DC__doca_stime[0],DC__doca_stime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DC::doca","time")==true){
         int nsize = DC__doca_time->getLength();
         vec_DC__doca_time.clear();
         vec_DC__doca_time.resize(nsize);
         memcpy(&vec_DC__doca_time[0],DC__doca_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("DC::tdc")==true){
      if(dictionary->hasEntry("DC::tdc","TDC")==true){
         int nsize = DC__tdc_TDC->getLength();
         vec_DC__tdc_TDC.clear();
         vec_DC__tdc_TDC.resize(nsize);
         memcpy(&vec_DC__tdc_TDC[0],DC__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("DC::tdc","component")==true){
         int nsize = DC__tdc_component->getLength();
         vec_DC__tdc_component.clear();
         vec_DC__tdc_component.resize(nsize);
         memcpy(&vec_DC__tdc_component[0],DC__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("DC::tdc","layer")==true){
         int nsize = DC__tdc_layer->getLength();
         vec_DC__tdc_layer.clear();
         vec_DC__tdc_layer.resize(nsize);
         memcpy(&vec_DC__tdc_layer[0],DC__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("DC::tdc","order")==true){
         int nsize = DC__tdc_order->getLength();
         vec_DC__tdc_order.clear();
         vec_DC__tdc_order.resize(nsize);
         memcpy(&vec_DC__tdc_order[0],DC__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("DC::tdc","sector")==true){
         int nsize = DC__tdc_sector->getLength();
         vec_DC__tdc_sector.clear();
         vec_DC__tdc_sector.resize(nsize);
         memcpy(&vec_DC__tdc_sector[0],DC__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("DETECTOR::Hits")==true){
      if(dictionary->hasEntry("DETECTOR::Hits","component")==true){
         int nsize = DETECTOR__Hits_component->getLength();
         vec_DETECTOR__Hits_component.clear();
         vec_DETECTOR__Hits_component.resize(nsize);
         memcpy(&vec_DETECTOR__Hits_component[0],DETECTOR__Hits_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("DETECTOR::Hits","detector")==true){
         int nsize = DETECTOR__Hits_detector->getLength();
         vec_DETECTOR__Hits_detector.clear();
         vec_DETECTOR__Hits_detector.resize(nsize);
         memcpy(&vec_DETECTOR__Hits_detector[0],DETECTOR__Hits_detector->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("DETECTOR::Hits","energy")==true){
         int nsize = DETECTOR__Hits_energy->getLength();
         vec_DETECTOR__Hits_energy.clear();
         vec_DETECTOR__Hits_energy.resize(nsize);
         memcpy(&vec_DETECTOR__Hits_energy[0],DETECTOR__Hits_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::Hits","layer")==true){
         int nsize = DETECTOR__Hits_layer->getLength();
         vec_DETECTOR__Hits_layer.clear();
         vec_DETECTOR__Hits_layer.resize(nsize);
         memcpy(&vec_DETECTOR__Hits_layer[0],DETECTOR__Hits_layer->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("DETECTOR::Hits","path")==true){
         int nsize = DETECTOR__Hits_path->getLength();
         vec_DETECTOR__Hits_path.clear();
         vec_DETECTOR__Hits_path.resize(nsize);
         memcpy(&vec_DETECTOR__Hits_path[0],DETECTOR__Hits_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::Hits","sector")==true){
         int nsize = DETECTOR__Hits_sector->getLength();
         vec_DETECTOR__Hits_sector.clear();
         vec_DETECTOR__Hits_sector.resize(nsize);
         memcpy(&vec_DETECTOR__Hits_sector[0],DETECTOR__Hits_sector->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("DETECTOR::Hits","time")==true){
         int nsize = DETECTOR__Hits_time->getLength();
         vec_DETECTOR__Hits_time.clear();
         vec_DETECTOR__Hits_time.resize(nsize);
         memcpy(&vec_DETECTOR__Hits_time[0],DETECTOR__Hits_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("DETECTOR::ccpb")==true){
      if(dictionary->hasEntry("DETECTOR::ccpb","nphe")==true){
         int nsize = DETECTOR__ccpb_nphe->getLength();
         vec_DETECTOR__ccpb_nphe.clear();
         vec_DETECTOR__ccpb_nphe.resize(nsize);
         memcpy(&vec_DETECTOR__ccpb_nphe[0],DETECTOR__ccpb_nphe->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ccpb","path")==true){
         int nsize = DETECTOR__ccpb_path->getLength();
         vec_DETECTOR__ccpb_path.clear();
         vec_DETECTOR__ccpb_path.resize(nsize);
         memcpy(&vec_DETECTOR__ccpb_path[0],DETECTOR__ccpb_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ccpb","sector")==true){
         int nsize = DETECTOR__ccpb_sector->getLength();
         vec_DETECTOR__ccpb_sector.clear();
         vec_DETECTOR__ccpb_sector.resize(nsize);
         memcpy(&vec_DETECTOR__ccpb_sector[0],DETECTOR__ccpb_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("DETECTOR::ccpb","time")==true){
         int nsize = DETECTOR__ccpb_time->getLength();
         vec_DETECTOR__ccpb_time.clear();
         vec_DETECTOR__ccpb_time.resize(nsize);
         memcpy(&vec_DETECTOR__ccpb_time[0],DETECTOR__ccpb_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("DETECTOR::ecpb")==true){
      if(dictionary->hasEntry("DETECTOR::ecpb","ein")==true){
         int nsize = DETECTOR__ecpb_ein->getLength();
         vec_DETECTOR__ecpb_ein.clear();
         vec_DETECTOR__ecpb_ein.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_ein[0],DETECTOR__ecpb_ein->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","eout")==true){
         int nsize = DETECTOR__ecpb_eout->getLength();
         vec_DETECTOR__ecpb_eout.clear();
         vec_DETECTOR__ecpb_eout.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_eout[0],DETECTOR__ecpb_eout->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","etot")==true){
         int nsize = DETECTOR__ecpb_etot->getLength();
         vec_DETECTOR__ecpb_etot.clear();
         vec_DETECTOR__ecpb_etot.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_etot[0],DETECTOR__ecpb_etot->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","path")==true){
         int nsize = DETECTOR__ecpb_path->getLength();
         vec_DETECTOR__ecpb_path.clear();
         vec_DETECTOR__ecpb_path.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_path[0],DETECTOR__ecpb_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","sector")==true){
         int nsize = DETECTOR__ecpb_sector->getLength();
         vec_DETECTOR__ecpb_sector.clear();
         vec_DETECTOR__ecpb_sector.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_sector[0],DETECTOR__ecpb_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","time")==true){
         int nsize = DETECTOR__ecpb_time->getLength();
         vec_DETECTOR__ecpb_time.clear();
         vec_DETECTOR__ecpb_time.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_time[0],DETECTOR__ecpb_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","x")==true){
         int nsize = DETECTOR__ecpb_x->getLength();
         vec_DETECTOR__ecpb_x.clear();
         vec_DETECTOR__ecpb_x.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_x[0],DETECTOR__ecpb_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","y")==true){
         int nsize = DETECTOR__ecpb_y->getLength();
         vec_DETECTOR__ecpb_y.clear();
         vec_DETECTOR__ecpb_y.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_y[0],DETECTOR__ecpb_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::ecpb","z")==true){
         int nsize = DETECTOR__ecpb_z->getLength();
         vec_DETECTOR__ecpb_z.clear();
         vec_DETECTOR__ecpb_z.resize(nsize);
         memcpy(&vec_DETECTOR__ecpb_z[0],DETECTOR__ecpb_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("DETECTOR::icpb")==true){
      if(dictionary->hasEntry("DETECTOR::icpb","ecc")==true){
         int nsize = DETECTOR__icpb_ecc->getLength();
         vec_DETECTOR__icpb_ecc.clear();
         vec_DETECTOR__icpb_ecc.resize(nsize);
         memcpy(&vec_DETECTOR__icpb_ecc[0],DETECTOR__icpb_ecc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::icpb","etc")==true){
         int nsize = DETECTOR__icpb_etc->getLength();
         vec_DETECTOR__icpb_etc.clear();
         vec_DETECTOR__icpb_etc.resize(nsize);
         memcpy(&vec_DETECTOR__icpb_etc[0],DETECTOR__icpb_etc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::icpb","tc")==true){
         int nsize = DETECTOR__icpb_tc->getLength();
         vec_DETECTOR__icpb_tc.clear();
         vec_DETECTOR__icpb_tc.resize(nsize);
         memcpy(&vec_DETECTOR__icpb_tc[0],DETECTOR__icpb_tc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::icpb","xc")==true){
         int nsize = DETECTOR__icpb_xc->getLength();
         vec_DETECTOR__icpb_xc.clear();
         vec_DETECTOR__icpb_xc.resize(nsize);
         memcpy(&vec_DETECTOR__icpb_xc[0],DETECTOR__icpb_xc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::icpb","yc")==true){
         int nsize = DETECTOR__icpb_yc->getLength();
         vec_DETECTOR__icpb_yc.clear();
         vec_DETECTOR__icpb_yc.resize(nsize);
         memcpy(&vec_DETECTOR__icpb_yc[0],DETECTOR__icpb_yc->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("DETECTOR::lcpb")==true){
      if(dictionary->hasEntry("DETECTOR::lcpb","ein")==true){
         int nsize = DETECTOR__lcpb_ein->getLength();
         vec_DETECTOR__lcpb_ein.clear();
         vec_DETECTOR__lcpb_ein.resize(nsize);
         memcpy(&vec_DETECTOR__lcpb_ein[0],DETECTOR__lcpb_ein->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","etot")==true){
         int nsize = DETECTOR__lcpb_etot->getLength();
         vec_DETECTOR__lcpb_etot.clear();
         vec_DETECTOR__lcpb_etot.resize(nsize);
         memcpy(&vec_DETECTOR__lcpb_etot[0],DETECTOR__lcpb_etot->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","path")==true){
         int nsize = DETECTOR__lcpb_path->getLength();
         vec_DETECTOR__lcpb_path.clear();
         vec_DETECTOR__lcpb_path.resize(nsize);
         memcpy(&vec_DETECTOR__lcpb_path[0],DETECTOR__lcpb_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","sector")==true){
         int nsize = DETECTOR__lcpb_sector->getLength();
         vec_DETECTOR__lcpb_sector.clear();
         vec_DETECTOR__lcpb_sector.resize(nsize);
         memcpy(&vec_DETECTOR__lcpb_sector[0],DETECTOR__lcpb_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","time")==true){
         int nsize = DETECTOR__lcpb_time->getLength();
         vec_DETECTOR__lcpb_time.clear();
         vec_DETECTOR__lcpb_time.resize(nsize);
         memcpy(&vec_DETECTOR__lcpb_time[0],DETECTOR__lcpb_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","x")==true){
         int nsize = DETECTOR__lcpb_x->getLength();
         vec_DETECTOR__lcpb_x.clear();
         vec_DETECTOR__lcpb_x.resize(nsize);
         memcpy(&vec_DETECTOR__lcpb_x[0],DETECTOR__lcpb_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","y")==true){
         int nsize = DETECTOR__lcpb_y->getLength();
         vec_DETECTOR__lcpb_y.clear();
         vec_DETECTOR__lcpb_y.resize(nsize);
         memcpy(&vec_DETECTOR__lcpb_y[0],DETECTOR__lcpb_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::lcpb","z")==true){
         int nsize = DETECTOR__lcpb_z->getLength();
         vec_DETECTOR__lcpb_z.clear();
         vec_DETECTOR__lcpb_z.resize(nsize);
         memcpy(&vec_DETECTOR__lcpb_z[0],DETECTOR__lcpb_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("DETECTOR::scpb")==true){
      if(dictionary->hasEntry("DETECTOR::scpb","edep")==true){
         int nsize = DETECTOR__scpb_edep->getLength();
         vec_DETECTOR__scpb_edep.clear();
         vec_DETECTOR__scpb_edep.resize(nsize);
         memcpy(&vec_DETECTOR__scpb_edep[0],DETECTOR__scpb_edep->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::scpb","paddle")==true){
         int nsize = DETECTOR__scpb_paddle->getLength();
         vec_DETECTOR__scpb_paddle.clear();
         vec_DETECTOR__scpb_paddle.resize(nsize);
         memcpy(&vec_DETECTOR__scpb_paddle[0],DETECTOR__scpb_paddle->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("DETECTOR::scpb","path")==true){
         int nsize = DETECTOR__scpb_path->getLength();
         vec_DETECTOR__scpb_path.clear();
         vec_DETECTOR__scpb_path.resize(nsize);
         memcpy(&vec_DETECTOR__scpb_path[0],DETECTOR__scpb_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("DETECTOR::scpb","sector")==true){
         int nsize = DETECTOR__scpb_sector->getLength();
         vec_DETECTOR__scpb_sector.clear();
         vec_DETECTOR__scpb_sector.resize(nsize);
         memcpy(&vec_DETECTOR__scpb_sector[0],DETECTOR__scpb_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("DETECTOR::scpb","time")==true){
         int nsize = DETECTOR__scpb_time->getLength();
         vec_DETECTOR__scpb_time.clear();
         vec_DETECTOR__scpb_time.resize(nsize);
         memcpy(&vec_DETECTOR__scpb_time[0],DETECTOR__scpb_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("ECAL::adc")==true){
      if(dictionary->hasEntry("ECAL::adc","ADC")==true){
         int nsize = ECAL__adc_ADC->getLength();
         vec_ECAL__adc_ADC.clear();
         vec_ECAL__adc_ADC.resize(nsize);
         memcpy(&vec_ECAL__adc_ADC[0],ECAL__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("ECAL::adc","component")==true){
         int nsize = ECAL__adc_component->getLength();
         vec_ECAL__adc_component.clear();
         vec_ECAL__adc_component.resize(nsize);
         memcpy(&vec_ECAL__adc_component[0],ECAL__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::adc","layer")==true){
         int nsize = ECAL__adc_layer->getLength();
         vec_ECAL__adc_layer.clear();
         vec_ECAL__adc_layer.resize(nsize);
         memcpy(&vec_ECAL__adc_layer[0],ECAL__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::adc","order")==true){
         int nsize = ECAL__adc_order->getLength();
         vec_ECAL__adc_order.clear();
         vec_ECAL__adc_order.resize(nsize);
         memcpy(&vec_ECAL__adc_order[0],ECAL__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::adc","ped")==true){
         int nsize = ECAL__adc_ped->getLength();
         vec_ECAL__adc_ped.clear();
         vec_ECAL__adc_ped.resize(nsize);
         memcpy(&vec_ECAL__adc_ped[0],ECAL__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::adc","sector")==true){
         int nsize = ECAL__adc_sector->getLength();
         vec_ECAL__adc_sector.clear();
         vec_ECAL__adc_sector.resize(nsize);
         memcpy(&vec_ECAL__adc_sector[0],ECAL__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::adc","time")==true){
         int nsize = ECAL__adc_time->getLength();
         vec_ECAL__adc_time.clear();
         vec_ECAL__adc_time.resize(nsize);
         memcpy(&vec_ECAL__adc_time[0],ECAL__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("ECAL::calib")==true){
      if(dictionary->hasEntry("ECAL::calib","energy")==true){
         int nsize = ECAL__calib_energy->getLength();
         vec_ECAL__calib_energy.clear();
         vec_ECAL__calib_energy.resize(nsize);
         memcpy(&vec_ECAL__calib_energy[0],ECAL__calib_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::calib","layer")==true){
         int nsize = ECAL__calib_layer->getLength();
         vec_ECAL__calib_layer.clear();
         vec_ECAL__calib_layer.resize(nsize);
         memcpy(&vec_ECAL__calib_layer[0],ECAL__calib_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::calib","rawEU")==true){
         int nsize = ECAL__calib_rawEU->getLength();
         vec_ECAL__calib_rawEU.clear();
         vec_ECAL__calib_rawEU.resize(nsize);
         memcpy(&vec_ECAL__calib_rawEU[0],ECAL__calib_rawEU->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::calib","rawEV")==true){
         int nsize = ECAL__calib_rawEV->getLength();
         vec_ECAL__calib_rawEV.clear();
         vec_ECAL__calib_rawEV.resize(nsize);
         memcpy(&vec_ECAL__calib_rawEV[0],ECAL__calib_rawEV->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::calib","rawEW")==true){
         int nsize = ECAL__calib_rawEW->getLength();
         vec_ECAL__calib_rawEW.clear();
         vec_ECAL__calib_rawEW.resize(nsize);
         memcpy(&vec_ECAL__calib_rawEW[0],ECAL__calib_rawEW->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::calib","recEU")==true){
         int nsize = ECAL__calib_recEU->getLength();
         vec_ECAL__calib_recEU.clear();
         vec_ECAL__calib_recEU.resize(nsize);
         memcpy(&vec_ECAL__calib_recEU[0],ECAL__calib_recEU->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::calib","recEV")==true){
         int nsize = ECAL__calib_recEV->getLength();
         vec_ECAL__calib_recEV.clear();
         vec_ECAL__calib_recEV.resize(nsize);
         memcpy(&vec_ECAL__calib_recEV[0],ECAL__calib_recEV->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::calib","recEW")==true){
         int nsize = ECAL__calib_recEW->getLength();
         vec_ECAL__calib_recEW.clear();
         vec_ECAL__calib_recEW.resize(nsize);
         memcpy(&vec_ECAL__calib_recEW[0],ECAL__calib_recEW->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::calib","sector")==true){
         int nsize = ECAL__calib_sector->getLength();
         vec_ECAL__calib_sector.clear();
         vec_ECAL__calib_sector.resize(nsize);
         memcpy(&vec_ECAL__calib_sector[0],ECAL__calib_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("ECAL::clusters")==true){
      if(dictionary->hasEntry("ECAL::clusters","coordU")==true){
         int nsize = ECAL__clusters_coordU->getLength();
         vec_ECAL__clusters_coordU.clear();
         vec_ECAL__clusters_coordU.resize(nsize);
         memcpy(&vec_ECAL__clusters_coordU[0],ECAL__clusters_coordU->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","coordV")==true){
         int nsize = ECAL__clusters_coordV->getLength();
         vec_ECAL__clusters_coordV.clear();
         vec_ECAL__clusters_coordV.resize(nsize);
         memcpy(&vec_ECAL__clusters_coordV[0],ECAL__clusters_coordV->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","coordW")==true){
         int nsize = ECAL__clusters_coordW->getLength();
         vec_ECAL__clusters_coordW.clear();
         vec_ECAL__clusters_coordW.resize(nsize);
         memcpy(&vec_ECAL__clusters_coordW[0],ECAL__clusters_coordW->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","energy")==true){
         int nsize = ECAL__clusters_energy->getLength();
         vec_ECAL__clusters_energy.clear();
         vec_ECAL__clusters_energy.resize(nsize);
         memcpy(&vec_ECAL__clusters_energy[0],ECAL__clusters_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::clusters","id")==true){
         int nsize = ECAL__clusters_id->getLength();
         vec_ECAL__clusters_id.clear();
         vec_ECAL__clusters_id.resize(nsize);
         memcpy(&vec_ECAL__clusters_id[0],ECAL__clusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","idU")==true){
         int nsize = ECAL__clusters_idU->getLength();
         vec_ECAL__clusters_idU.clear();
         vec_ECAL__clusters_idU.resize(nsize);
         memcpy(&vec_ECAL__clusters_idU[0],ECAL__clusters_idU->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","idV")==true){
         int nsize = ECAL__clusters_idV->getLength();
         vec_ECAL__clusters_idV.clear();
         vec_ECAL__clusters_idV.resize(nsize);
         memcpy(&vec_ECAL__clusters_idV[0],ECAL__clusters_idV->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","idW")==true){
         int nsize = ECAL__clusters_idW->getLength();
         vec_ECAL__clusters_idW.clear();
         vec_ECAL__clusters_idW.resize(nsize);
         memcpy(&vec_ECAL__clusters_idW[0],ECAL__clusters_idW->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","layer")==true){
         int nsize = ECAL__clusters_layer->getLength();
         vec_ECAL__clusters_layer.clear();
         vec_ECAL__clusters_layer.resize(nsize);
         memcpy(&vec_ECAL__clusters_layer[0],ECAL__clusters_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","sector")==true){
         int nsize = ECAL__clusters_sector->getLength();
         vec_ECAL__clusters_sector.clear();
         vec_ECAL__clusters_sector.resize(nsize);
         memcpy(&vec_ECAL__clusters_sector[0],ECAL__clusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","status")==true){
         int nsize = ECAL__clusters_status->getLength();
         vec_ECAL__clusters_status.clear();
         vec_ECAL__clusters_status.resize(nsize);
         memcpy(&vec_ECAL__clusters_status[0],ECAL__clusters_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::clusters","time")==true){
         int nsize = ECAL__clusters_time->getLength();
         vec_ECAL__clusters_time.clear();
         vec_ECAL__clusters_time.resize(nsize);
         memcpy(&vec_ECAL__clusters_time[0],ECAL__clusters_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::clusters","widthU")==true){
         int nsize = ECAL__clusters_widthU->getLength();
         vec_ECAL__clusters_widthU.clear();
         vec_ECAL__clusters_widthU.resize(nsize);
         memcpy(&vec_ECAL__clusters_widthU[0],ECAL__clusters_widthU->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::clusters","widthV")==true){
         int nsize = ECAL__clusters_widthV->getLength();
         vec_ECAL__clusters_widthV.clear();
         vec_ECAL__clusters_widthV.resize(nsize);
         memcpy(&vec_ECAL__clusters_widthV[0],ECAL__clusters_widthV->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::clusters","widthW")==true){
         int nsize = ECAL__clusters_widthW->getLength();
         vec_ECAL__clusters_widthW.clear();
         vec_ECAL__clusters_widthW.resize(nsize);
         memcpy(&vec_ECAL__clusters_widthW[0],ECAL__clusters_widthW->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::clusters","x")==true){
         int nsize = ECAL__clusters_x->getLength();
         vec_ECAL__clusters_x.clear();
         vec_ECAL__clusters_x.resize(nsize);
         memcpy(&vec_ECAL__clusters_x[0],ECAL__clusters_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::clusters","y")==true){
         int nsize = ECAL__clusters_y->getLength();
         vec_ECAL__clusters_y.clear();
         vec_ECAL__clusters_y.resize(nsize);
         memcpy(&vec_ECAL__clusters_y[0],ECAL__clusters_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::clusters","z")==true){
         int nsize = ECAL__clusters_z->getLength();
         vec_ECAL__clusters_z.clear();
         vec_ECAL__clusters_z.resize(nsize);
         memcpy(&vec_ECAL__clusters_z[0],ECAL__clusters_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("ECAL::hits")==true){
      if(dictionary->hasEntry("ECAL::hits","energy")==true){
         int nsize = ECAL__hits_energy->getLength();
         vec_ECAL__hits_energy.clear();
         vec_ECAL__hits_energy.resize(nsize);
         memcpy(&vec_ECAL__hits_energy[0],ECAL__hits_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::hits","id")==true){
         int nsize = ECAL__hits_id->getLength();
         vec_ECAL__hits_id.clear();
         vec_ECAL__hits_id.resize(nsize);
         memcpy(&vec_ECAL__hits_id[0],ECAL__hits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::hits","layer")==true){
         int nsize = ECAL__hits_layer->getLength();
         vec_ECAL__hits_layer.clear();
         vec_ECAL__hits_layer.resize(nsize);
         memcpy(&vec_ECAL__hits_layer[0],ECAL__hits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::hits","peakid")==true){
         int nsize = ECAL__hits_peakid->getLength();
         vec_ECAL__hits_peakid.clear();
         vec_ECAL__hits_peakid.resize(nsize);
         memcpy(&vec_ECAL__hits_peakid[0],ECAL__hits_peakid->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::hits","sector")==true){
         int nsize = ECAL__hits_sector->getLength();
         vec_ECAL__hits_sector.clear();
         vec_ECAL__hits_sector.resize(nsize);
         memcpy(&vec_ECAL__hits_sector[0],ECAL__hits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::hits","status")==true){
         int nsize = ECAL__hits_status->getLength();
         vec_ECAL__hits_status.clear();
         vec_ECAL__hits_status.resize(nsize);
         memcpy(&vec_ECAL__hits_status[0],ECAL__hits_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::hits","strip")==true){
         int nsize = ECAL__hits_strip->getLength();
         vec_ECAL__hits_strip.clear();
         vec_ECAL__hits_strip.resize(nsize);
         memcpy(&vec_ECAL__hits_strip[0],ECAL__hits_strip->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::hits","time")==true){
         int nsize = ECAL__hits_time->getLength();
         vec_ECAL__hits_time.clear();
         vec_ECAL__hits_time.resize(nsize);
         memcpy(&vec_ECAL__hits_time[0],ECAL__hits_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("ECAL::moments")==true){
      if(dictionary->hasEntry("ECAL::moments","distU")==true){
         int nsize = ECAL__moments_distU->getLength();
         vec_ECAL__moments_distU.clear();
         vec_ECAL__moments_distU.resize(nsize);
         memcpy(&vec_ECAL__moments_distU[0],ECAL__moments_distU->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","distV")==true){
         int nsize = ECAL__moments_distV->getLength();
         vec_ECAL__moments_distV.clear();
         vec_ECAL__moments_distV.resize(nsize);
         memcpy(&vec_ECAL__moments_distV[0],ECAL__moments_distV->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","distW")==true){
         int nsize = ECAL__moments_distW->getLength();
         vec_ECAL__moments_distW.clear();
         vec_ECAL__moments_distW.resize(nsize);
         memcpy(&vec_ECAL__moments_distW[0],ECAL__moments_distW->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m1u")==true){
         int nsize = ECAL__moments_m1u->getLength();
         vec_ECAL__moments_m1u.clear();
         vec_ECAL__moments_m1u.resize(nsize);
         memcpy(&vec_ECAL__moments_m1u[0],ECAL__moments_m1u->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m1v")==true){
         int nsize = ECAL__moments_m1v->getLength();
         vec_ECAL__moments_m1v.clear();
         vec_ECAL__moments_m1v.resize(nsize);
         memcpy(&vec_ECAL__moments_m1v[0],ECAL__moments_m1v->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m1w")==true){
         int nsize = ECAL__moments_m1w->getLength();
         vec_ECAL__moments_m1w.clear();
         vec_ECAL__moments_m1w.resize(nsize);
         memcpy(&vec_ECAL__moments_m1w[0],ECAL__moments_m1w->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m2u")==true){
         int nsize = ECAL__moments_m2u->getLength();
         vec_ECAL__moments_m2u.clear();
         vec_ECAL__moments_m2u.resize(nsize);
         memcpy(&vec_ECAL__moments_m2u[0],ECAL__moments_m2u->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m2v")==true){
         int nsize = ECAL__moments_m2v->getLength();
         vec_ECAL__moments_m2v.clear();
         vec_ECAL__moments_m2v.resize(nsize);
         memcpy(&vec_ECAL__moments_m2v[0],ECAL__moments_m2v->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m2w")==true){
         int nsize = ECAL__moments_m2w->getLength();
         vec_ECAL__moments_m2w.clear();
         vec_ECAL__moments_m2w.resize(nsize);
         memcpy(&vec_ECAL__moments_m2w[0],ECAL__moments_m2w->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m3u")==true){
         int nsize = ECAL__moments_m3u->getLength();
         vec_ECAL__moments_m3u.clear();
         vec_ECAL__moments_m3u.resize(nsize);
         memcpy(&vec_ECAL__moments_m3u[0],ECAL__moments_m3u->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m3v")==true){
         int nsize = ECAL__moments_m3v->getLength();
         vec_ECAL__moments_m3v.clear();
         vec_ECAL__moments_m3v.resize(nsize);
         memcpy(&vec_ECAL__moments_m3v[0],ECAL__moments_m3v->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::moments","m3w")==true){
         int nsize = ECAL__moments_m3w->getLength();
         vec_ECAL__moments_m3w.clear();
         vec_ECAL__moments_m3w.resize(nsize);
         memcpy(&vec_ECAL__moments_m3w[0],ECAL__moments_m3w->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("ECAL::peaks")==true){
      if(dictionary->hasEntry("ECAL::peaks","energy")==true){
         int nsize = ECAL__peaks_energy->getLength();
         vec_ECAL__peaks_energy.clear();
         vec_ECAL__peaks_energy.resize(nsize);
         memcpy(&vec_ECAL__peaks_energy[0],ECAL__peaks_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::peaks","id")==true){
         int nsize = ECAL__peaks_id->getLength();
         vec_ECAL__peaks_id.clear();
         vec_ECAL__peaks_id.resize(nsize);
         memcpy(&vec_ECAL__peaks_id[0],ECAL__peaks_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::peaks","layer")==true){
         int nsize = ECAL__peaks_layer->getLength();
         vec_ECAL__peaks_layer.clear();
         vec_ECAL__peaks_layer.resize(nsize);
         memcpy(&vec_ECAL__peaks_layer[0],ECAL__peaks_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::peaks","sector")==true){
         int nsize = ECAL__peaks_sector->getLength();
         vec_ECAL__peaks_sector.clear();
         vec_ECAL__peaks_sector.resize(nsize);
         memcpy(&vec_ECAL__peaks_sector[0],ECAL__peaks_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::peaks","status")==true){
         int nsize = ECAL__peaks_status->getLength();
         vec_ECAL__peaks_status.clear();
         vec_ECAL__peaks_status.resize(nsize);
         memcpy(&vec_ECAL__peaks_status[0],ECAL__peaks_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::peaks","time")==true){
         int nsize = ECAL__peaks_time->getLength();
         vec_ECAL__peaks_time.clear();
         vec_ECAL__peaks_time.resize(nsize);
         memcpy(&vec_ECAL__peaks_time[0],ECAL__peaks_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::peaks","width")==true){
         int nsize = ECAL__peaks_width->getLength();
         vec_ECAL__peaks_width.clear();
         vec_ECAL__peaks_width.resize(nsize);
         memcpy(&vec_ECAL__peaks_width[0],ECAL__peaks_width->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::peaks","xe")==true){
         int nsize = ECAL__peaks_xe->getLength();
         vec_ECAL__peaks_xe.clear();
         vec_ECAL__peaks_xe.resize(nsize);
         memcpy(&vec_ECAL__peaks_xe[0],ECAL__peaks_xe->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::peaks","xo")==true){
         int nsize = ECAL__peaks_xo->getLength();
         vec_ECAL__peaks_xo.clear();
         vec_ECAL__peaks_xo.resize(nsize);
         memcpy(&vec_ECAL__peaks_xo[0],ECAL__peaks_xo->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::peaks","ye")==true){
         int nsize = ECAL__peaks_ye->getLength();
         vec_ECAL__peaks_ye.clear();
         vec_ECAL__peaks_ye.resize(nsize);
         memcpy(&vec_ECAL__peaks_ye[0],ECAL__peaks_ye->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::peaks","yo")==true){
         int nsize = ECAL__peaks_yo->getLength();
         vec_ECAL__peaks_yo.clear();
         vec_ECAL__peaks_yo.resize(nsize);
         memcpy(&vec_ECAL__peaks_yo[0],ECAL__peaks_yo->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::peaks","ze")==true){
         int nsize = ECAL__peaks_ze->getLength();
         vec_ECAL__peaks_ze.clear();
         vec_ECAL__peaks_ze.resize(nsize);
         memcpy(&vec_ECAL__peaks_ze[0],ECAL__peaks_ze->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("ECAL::peaks","zo")==true){
         int nsize = ECAL__peaks_zo->getLength();
         vec_ECAL__peaks_zo.clear();
         vec_ECAL__peaks_zo.resize(nsize);
         memcpy(&vec_ECAL__peaks_zo[0],ECAL__peaks_zo->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("ECAL::tdc")==true){
      if(dictionary->hasEntry("ECAL::tdc","TDC")==true){
         int nsize = ECAL__tdc_TDC->getLength();
         vec_ECAL__tdc_TDC.clear();
         vec_ECAL__tdc_TDC.resize(nsize);
         memcpy(&vec_ECAL__tdc_TDC[0],ECAL__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("ECAL::tdc","component")==true){
         int nsize = ECAL__tdc_component->getLength();
         vec_ECAL__tdc_component.clear();
         vec_ECAL__tdc_component.resize(nsize);
         memcpy(&vec_ECAL__tdc_component[0],ECAL__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("ECAL::tdc","layer")==true){
         int nsize = ECAL__tdc_layer->getLength();
         vec_ECAL__tdc_layer.clear();
         vec_ECAL__tdc_layer.resize(nsize);
         memcpy(&vec_ECAL__tdc_layer[0],ECAL__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::tdc","order")==true){
         int nsize = ECAL__tdc_order->getLength();
         vec_ECAL__tdc_order.clear();
         vec_ECAL__tdc_order.resize(nsize);
         memcpy(&vec_ECAL__tdc_order[0],ECAL__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("ECAL::tdc","sector")==true){
         int nsize = ECAL__tdc_sector->getLength();
         vec_ECAL__tdc_sector.clear();
         vec_ECAL__tdc_sector.resize(nsize);
         memcpy(&vec_ECAL__tdc_sector[0],ECAL__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("EVENT::detector")==true){
      if(dictionary->hasEntry("EVENT::detector","ccnphe")==true){
         int nsize = EVENT__detector_ccnphe->getLength();
         vec_EVENT__detector_ccnphe.clear();
         vec_EVENT__detector_ccnphe.resize(nsize);
         memcpy(&vec_EVENT__detector_ccnphe[0],EVENT__detector_ccnphe->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","ecin")==true){
         int nsize = EVENT__detector_ecin->getLength();
         vec_EVENT__detector_ecin.clear();
         vec_EVENT__detector_ecin.resize(nsize);
         memcpy(&vec_EVENT__detector_ecin[0],EVENT__detector_ecin->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","ecout")==true){
         int nsize = EVENT__detector_ecout->getLength();
         vec_EVENT__detector_ecout.clear();
         vec_EVENT__detector_ecout.resize(nsize);
         memcpy(&vec_EVENT__detector_ecout[0],EVENT__detector_ecout->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","ecpath")==true){
         int nsize = EVENT__detector_ecpath->getLength();
         vec_EVENT__detector_ecpath.clear();
         vec_EVENT__detector_ecpath.resize(nsize);
         memcpy(&vec_EVENT__detector_ecpath[0],EVENT__detector_ecpath->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","ecsector")==true){
         int nsize = EVENT__detector_ecsector->getLength();
         vec_EVENT__detector_ecsector.clear();
         vec_EVENT__detector_ecsector.resize(nsize);
         memcpy(&vec_EVENT__detector_ecsector[0],EVENT__detector_ecsector->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("EVENT::detector","ectime")==true){
         int nsize = EVENT__detector_ectime->getLength();
         vec_EVENT__detector_ectime.clear();
         vec_EVENT__detector_ectime.resize(nsize);
         memcpy(&vec_EVENT__detector_ectime[0],EVENT__detector_ectime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","ectot")==true){
         int nsize = EVENT__detector_ectot->getLength();
         vec_EVENT__detector_ectot.clear();
         vec_EVENT__detector_ectot.resize(nsize);
         memcpy(&vec_EVENT__detector_ectot[0],EVENT__detector_ectot->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","ecu")==true){
         int nsize = EVENT__detector_ecu->getLength();
         vec_EVENT__detector_ecu.clear();
         vec_EVENT__detector_ecu.resize(nsize);
         memcpy(&vec_EVENT__detector_ecu[0],EVENT__detector_ecu->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","ecv")==true){
         int nsize = EVENT__detector_ecv->getLength();
         vec_EVENT__detector_ecv.clear();
         vec_EVENT__detector_ecv.resize(nsize);
         memcpy(&vec_EVENT__detector_ecv[0],EVENT__detector_ecv->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","ecw")==true){
         int nsize = EVENT__detector_ecw->getLength();
         vec_EVENT__detector_ecw.clear();
         vec_EVENT__detector_ecw.resize(nsize);
         memcpy(&vec_EVENT__detector_ecw[0],EVENT__detector_ecw->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","scpaddle")==true){
         int nsize = EVENT__detector_scpaddle->getLength();
         vec_EVENT__detector_scpaddle.clear();
         vec_EVENT__detector_scpaddle.resize(nsize);
         memcpy(&vec_EVENT__detector_scpaddle[0],EVENT__detector_scpaddle->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("EVENT::detector","scpath")==true){
         int nsize = EVENT__detector_scpath->getLength();
         vec_EVENT__detector_scpath.clear();
         vec_EVENT__detector_scpath.resize(nsize);
         memcpy(&vec_EVENT__detector_scpath[0],EVENT__detector_scpath->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::detector","scsector")==true){
         int nsize = EVENT__detector_scsector->getLength();
         vec_EVENT__detector_scsector.clear();
         vec_EVENT__detector_scsector.resize(nsize);
         memcpy(&vec_EVENT__detector_scsector[0],EVENT__detector_scsector->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("EVENT::detector","sctime")==true){
         int nsize = EVENT__detector_sctime->getLength();
         vec_EVENT__detector_sctime.clear();
         vec_EVENT__detector_sctime.resize(nsize);
         memcpy(&vec_EVENT__detector_sctime[0],EVENT__detector_sctime->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("EVENT::particle")==true){
      if(dictionary->hasEntry("EVENT::particle","ccstat")==true){
         int nsize = EVENT__particle_ccstat->getLength();
         vec_EVENT__particle_ccstat.clear();
         vec_EVENT__particle_ccstat.resize(nsize);
         memcpy(&vec_EVENT__particle_ccstat[0],EVENT__particle_ccstat->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("EVENT::particle","charge")==true){
         int nsize = EVENT__particle_charge->getLength();
         vec_EVENT__particle_charge.clear();
         vec_EVENT__particle_charge.resize(nsize);
         memcpy(&vec_EVENT__particle_charge[0],EVENT__particle_charge->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("EVENT::particle","dcstat")==true){
         int nsize = EVENT__particle_dcstat->getLength();
         vec_EVENT__particle_dcstat.clear();
         vec_EVENT__particle_dcstat.resize(nsize);
         memcpy(&vec_EVENT__particle_dcstat[0],EVENT__particle_dcstat->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("EVENT::particle","ecstat")==true){
         int nsize = EVENT__particle_ecstat->getLength();
         vec_EVENT__particle_ecstat.clear();
         vec_EVENT__particle_ecstat.resize(nsize);
         memcpy(&vec_EVENT__particle_ecstat[0],EVENT__particle_ecstat->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("EVENT::particle","lcstat")==true){
         int nsize = EVENT__particle_lcstat->getLength();
         vec_EVENT__particle_lcstat.clear();
         vec_EVENT__particle_lcstat.resize(nsize);
         memcpy(&vec_EVENT__particle_lcstat[0],EVENT__particle_lcstat->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("EVENT::particle","mass")==true){
         int nsize = EVENT__particle_mass->getLength();
         vec_EVENT__particle_mass.clear();
         vec_EVENT__particle_mass.resize(nsize);
         memcpy(&vec_EVENT__particle_mass[0],EVENT__particle_mass->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::particle","pid")==true){
         int nsize = EVENT__particle_pid->getLength();
         vec_EVENT__particle_pid.clear();
         vec_EVENT__particle_pid.resize(nsize);
         memcpy(&vec_EVENT__particle_pid[0],EVENT__particle_pid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("EVENT::particle","px")==true){
         int nsize = EVENT__particle_px->getLength();
         vec_EVENT__particle_px.clear();
         vec_EVENT__particle_px.resize(nsize);
         memcpy(&vec_EVENT__particle_px[0],EVENT__particle_px->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::particle","py")==true){
         int nsize = EVENT__particle_py->getLength();
         vec_EVENT__particle_py.clear();
         vec_EVENT__particle_py.resize(nsize);
         memcpy(&vec_EVENT__particle_py[0],EVENT__particle_py->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::particle","pz")==true){
         int nsize = EVENT__particle_pz->getLength();
         vec_EVENT__particle_pz.clear();
         vec_EVENT__particle_pz.resize(nsize);
         memcpy(&vec_EVENT__particle_pz[0],EVENT__particle_pz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::particle","scstat")==true){
         int nsize = EVENT__particle_scstat->getLength();
         vec_EVENT__particle_scstat.clear();
         vec_EVENT__particle_scstat.resize(nsize);
         memcpy(&vec_EVENT__particle_scstat[0],EVENT__particle_scstat->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("EVENT::particle","status")==true){
         int nsize = EVENT__particle_status->getLength();
         vec_EVENT__particle_status.clear();
         vec_EVENT__particle_status.resize(nsize);
         memcpy(&vec_EVENT__particle_status[0],EVENT__particle_status->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("EVENT::particle","vx")==true){
         int nsize = EVENT__particle_vx->getLength();
         vec_EVENT__particle_vx.clear();
         vec_EVENT__particle_vx.resize(nsize);
         memcpy(&vec_EVENT__particle_vx[0],EVENT__particle_vx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::particle","vy")==true){
         int nsize = EVENT__particle_vy->getLength();
         vec_EVENT__particle_vy.clear();
         vec_EVENT__particle_vy.resize(nsize);
         memcpy(&vec_EVENT__particle_vy[0],EVENT__particle_vy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("EVENT::particle","vz")==true){
         int nsize = EVENT__particle_vz->getLength();
         vec_EVENT__particle_vz.clear();
         vec_EVENT__particle_vz.resize(nsize);
         memcpy(&vec_EVENT__particle_vz[0],EVENT__particle_vz->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FMT::adc")==true){
      if(dictionary->hasEntry("FMT::adc","ADC")==true){
         int nsize = FMT__adc_ADC->getLength();
         vec_FMT__adc_ADC.clear();
         vec_FMT__adc_ADC.resize(nsize);
         memcpy(&vec_FMT__adc_ADC[0],FMT__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FMT::adc","component")==true){
         int nsize = FMT__adc_component->getLength();
         vec_FMT__adc_component.clear();
         vec_FMT__adc_component.resize(nsize);
         memcpy(&vec_FMT__adc_component[0],FMT__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMT::adc","integral")==true){
         int nsize = FMT__adc_integral->getLength();
         vec_FMT__adc_integral.clear();
         vec_FMT__adc_integral.resize(nsize);
         memcpy(&vec_FMT__adc_integral[0],FMT__adc_integral->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FMT::adc","layer")==true){
         int nsize = FMT__adc_layer->getLength();
         vec_FMT__adc_layer.clear();
         vec_FMT__adc_layer.resize(nsize);
         memcpy(&vec_FMT__adc_layer[0],FMT__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMT::adc","order")==true){
         int nsize = FMT__adc_order->getLength();
         vec_FMT__adc_order.clear();
         vec_FMT__adc_order.resize(nsize);
         memcpy(&vec_FMT__adc_order[0],FMT__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMT::adc","ped")==true){
         int nsize = FMT__adc_ped->getLength();
         vec_FMT__adc_ped.clear();
         vec_FMT__adc_ped.resize(nsize);
         memcpy(&vec_FMT__adc_ped[0],FMT__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMT::adc","sector")==true){
         int nsize = FMT__adc_sector->getLength();
         vec_FMT__adc_sector.clear();
         vec_FMT__adc_sector.resize(nsize);
         memcpy(&vec_FMT__adc_sector[0],FMT__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMT::adc","time")==true){
         int nsize = FMT__adc_time->getLength();
         vec_FMT__adc_time.clear();
         vec_FMT__adc_time.resize(nsize);
         memcpy(&vec_FMT__adc_time[0],FMT__adc_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMT::adc","timestamp")==true){
         int nsize = FMT__adc_timestamp->getLength();
         vec_FMT__adc_timestamp.clear();
         vec_FMT__adc_timestamp.resize(nsize);
         memcpy(&vec_FMT__adc_timestamp[0],FMT__adc_timestamp->getAddress(),nsize*sizeof(int64_t));
      }
   }
   if(dictionary->hasSchema("FMTRec::Clusters")==true){
      if(dictionary->hasEntry("FMTRec::Clusters","ETot")==true){
         int nsize = FMTRec__Clusters_ETot->getLength();
         vec_FMTRec__Clusters_ETot.clear();
         vec_FMTRec__Clusters_ETot.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_ETot[0],FMTRec__Clusters_ETot->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit1_ID")==true){
         int nsize = FMTRec__Clusters_Hit1_ID->getLength();
         vec_FMTRec__Clusters_Hit1_ID.clear();
         vec_FMTRec__Clusters_Hit1_ID.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_Hit1_ID[0],FMTRec__Clusters_Hit1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit2_ID")==true){
         int nsize = FMTRec__Clusters_Hit2_ID->getLength();
         vec_FMTRec__Clusters_Hit2_ID.clear();
         vec_FMTRec__Clusters_Hit2_ID.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_Hit2_ID[0],FMTRec__Clusters_Hit2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit3_ID")==true){
         int nsize = FMTRec__Clusters_Hit3_ID->getLength();
         vec_FMTRec__Clusters_Hit3_ID.clear();
         vec_FMTRec__Clusters_Hit3_ID.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_Hit3_ID[0],FMTRec__Clusters_Hit3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit4_ID")==true){
         int nsize = FMTRec__Clusters_Hit4_ID->getLength();
         vec_FMTRec__Clusters_Hit4_ID.clear();
         vec_FMTRec__Clusters_Hit4_ID.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_Hit4_ID[0],FMTRec__Clusters_Hit4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","Hit5_ID")==true){
         int nsize = FMTRec__Clusters_Hit5_ID->getLength();
         vec_FMTRec__Clusters_Hit5_ID.clear();
         vec_FMTRec__Clusters_Hit5_ID.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_Hit5_ID[0],FMTRec__Clusters_Hit5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","ID")==true){
         int nsize = FMTRec__Clusters_ID->getLength();
         vec_FMTRec__Clusters_ID.clear();
         vec_FMTRec__Clusters_ID.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_ID[0],FMTRec__Clusters_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","centroid")==true){
         int nsize = FMTRec__Clusters_centroid->getLength();
         vec_FMTRec__Clusters_centroid.clear();
         vec_FMTRec__Clusters_centroid.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_centroid[0],FMTRec__Clusters_centroid->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","centroidResidual")==true){
         int nsize = FMTRec__Clusters_centroidResidual->getLength();
         vec_FMTRec__Clusters_centroidResidual.clear();
         vec_FMTRec__Clusters_centroidResidual.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_centroidResidual[0],FMTRec__Clusters_centroidResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","layer")==true){
         int nsize = FMTRec__Clusters_layer->getLength();
         vec_FMTRec__Clusters_layer.clear();
         vec_FMTRec__Clusters_layer.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_layer[0],FMTRec__Clusters_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","sector")==true){
         int nsize = FMTRec__Clusters_sector->getLength();
         vec_FMTRec__Clusters_sector.clear();
         vec_FMTRec__Clusters_sector.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_sector[0],FMTRec__Clusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","seedE")==true){
         int nsize = FMTRec__Clusters_seedE->getLength();
         vec_FMTRec__Clusters_seedE.clear();
         vec_FMTRec__Clusters_seedE.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_seedE[0],FMTRec__Clusters_seedE->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","seedResidual")==true){
         int nsize = FMTRec__Clusters_seedResidual->getLength();
         vec_FMTRec__Clusters_seedResidual.clear();
         vec_FMTRec__Clusters_seedResidual.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_seedResidual[0],FMTRec__Clusters_seedResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","seedStrip")==true){
         int nsize = FMTRec__Clusters_seedStrip->getLength();
         vec_FMTRec__Clusters_seedStrip.clear();
         vec_FMTRec__Clusters_seedStrip.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_seedStrip[0],FMTRec__Clusters_seedStrip->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","size")==true){
         int nsize = FMTRec__Clusters_size->getLength();
         vec_FMTRec__Clusters_size.clear();
         vec_FMTRec__Clusters_size.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_size[0],FMTRec__Clusters_size->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Clusters","trkID")==true){
         int nsize = FMTRec__Clusters_trkID->getLength();
         vec_FMTRec__Clusters_trkID.clear();
         vec_FMTRec__Clusters_trkID.resize(nsize);
         memcpy(&vec_FMTRec__Clusters_trkID[0],FMTRec__Clusters_trkID->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("FMTRec::Crosses")==true){
      if(dictionary->hasEntry("FMTRec::Crosses","Cluster1_ID")==true){
         int nsize = FMTRec__Crosses_Cluster1_ID->getLength();
         vec_FMTRec__Crosses_Cluster1_ID.clear();
         vec_FMTRec__Crosses_Cluster1_ID.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_Cluster1_ID[0],FMTRec__Crosses_Cluster1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","Cluster2_ID")==true){
         int nsize = FMTRec__Crosses_Cluster2_ID->getLength();
         vec_FMTRec__Crosses_Cluster2_ID.clear();
         vec_FMTRec__Crosses_Cluster2_ID.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_Cluster2_ID[0],FMTRec__Crosses_Cluster2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","ID")==true){
         int nsize = FMTRec__Crosses_ID->getLength();
         vec_FMTRec__Crosses_ID.clear();
         vec_FMTRec__Crosses_ID.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_ID[0],FMTRec__Crosses_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","err_x")==true){
         int nsize = FMTRec__Crosses_err_x->getLength();
         vec_FMTRec__Crosses_err_x.clear();
         vec_FMTRec__Crosses_err_x.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_err_x[0],FMTRec__Crosses_err_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","err_y")==true){
         int nsize = FMTRec__Crosses_err_y->getLength();
         vec_FMTRec__Crosses_err_y.clear();
         vec_FMTRec__Crosses_err_y.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_err_y[0],FMTRec__Crosses_err_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","err_z")==true){
         int nsize = FMTRec__Crosses_err_z->getLength();
         vec_FMTRec__Crosses_err_z.clear();
         vec_FMTRec__Crosses_err_z.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_err_z[0],FMTRec__Crosses_err_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","region")==true){
         int nsize = FMTRec__Crosses_region->getLength();
         vec_FMTRec__Crosses_region.clear();
         vec_FMTRec__Crosses_region.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_region[0],FMTRec__Crosses_region->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","sector")==true){
         int nsize = FMTRec__Crosses_sector->getLength();
         vec_FMTRec__Crosses_sector.clear();
         vec_FMTRec__Crosses_sector.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_sector[0],FMTRec__Crosses_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","trkID")==true){
         int nsize = FMTRec__Crosses_trkID->getLength();
         vec_FMTRec__Crosses_trkID.clear();
         vec_FMTRec__Crosses_trkID.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_trkID[0],FMTRec__Crosses_trkID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","ux")==true){
         int nsize = FMTRec__Crosses_ux->getLength();
         vec_FMTRec__Crosses_ux.clear();
         vec_FMTRec__Crosses_ux.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_ux[0],FMTRec__Crosses_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","uy")==true){
         int nsize = FMTRec__Crosses_uy->getLength();
         vec_FMTRec__Crosses_uy.clear();
         vec_FMTRec__Crosses_uy.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_uy[0],FMTRec__Crosses_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","uz")==true){
         int nsize = FMTRec__Crosses_uz->getLength();
         vec_FMTRec__Crosses_uz.clear();
         vec_FMTRec__Crosses_uz.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_uz[0],FMTRec__Crosses_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","x")==true){
         int nsize = FMTRec__Crosses_x->getLength();
         vec_FMTRec__Crosses_x.clear();
         vec_FMTRec__Crosses_x.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_x[0],FMTRec__Crosses_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","y")==true){
         int nsize = FMTRec__Crosses_y->getLength();
         vec_FMTRec__Crosses_y.clear();
         vec_FMTRec__Crosses_y.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_y[0],FMTRec__Crosses_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Crosses","z")==true){
         int nsize = FMTRec__Crosses_z->getLength();
         vec_FMTRec__Crosses_z.clear();
         vec_FMTRec__Crosses_z.resize(nsize);
         memcpy(&vec_FMTRec__Crosses_z[0],FMTRec__Crosses_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FMTRec::Hits")==true){
      if(dictionary->hasEntry("FMTRec::Hits","ID")==true){
         int nsize = FMTRec__Hits_ID->getLength();
         vec_FMTRec__Hits_ID.clear();
         vec_FMTRec__Hits_ID.resize(nsize);
         memcpy(&vec_FMTRec__Hits_ID[0],FMTRec__Hits_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Hits","clusterID")==true){
         int nsize = FMTRec__Hits_clusterID->getLength();
         vec_FMTRec__Hits_clusterID.clear();
         vec_FMTRec__Hits_clusterID.resize(nsize);
         memcpy(&vec_FMTRec__Hits_clusterID[0],FMTRec__Hits_clusterID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Hits","fitResidual")==true){
         int nsize = FMTRec__Hits_fitResidual->getLength();
         vec_FMTRec__Hits_fitResidual.clear();
         vec_FMTRec__Hits_fitResidual.resize(nsize);
         memcpy(&vec_FMTRec__Hits_fitResidual[0],FMTRec__Hits_fitResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FMTRec::Hits","layer")==true){
         int nsize = FMTRec__Hits_layer->getLength();
         vec_FMTRec__Hits_layer.clear();
         vec_FMTRec__Hits_layer.resize(nsize);
         memcpy(&vec_FMTRec__Hits_layer[0],FMTRec__Hits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMTRec::Hits","sector")==true){
         int nsize = FMTRec__Hits_sector->getLength();
         vec_FMTRec__Hits_sector.clear();
         vec_FMTRec__Hits_sector.resize(nsize);
         memcpy(&vec_FMTRec__Hits_sector[0],FMTRec__Hits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FMTRec::Hits","strip")==true){
         int nsize = FMTRec__Hits_strip->getLength();
         vec_FMTRec__Hits_strip.clear();
         vec_FMTRec__Hits_strip.resize(nsize);
         memcpy(&vec_FMTRec__Hits_strip[0],FMTRec__Hits_strip->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FMTRec::Hits","trkID")==true){
         int nsize = FMTRec__Hits_trkID->getLength();
         vec_FMTRec__Hits_trkID.clear();
         vec_FMTRec__Hits_trkID.resize(nsize);
         memcpy(&vec_FMTRec__Hits_trkID[0],FMTRec__Hits_trkID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FMTRec::Hits","trkingStat")==true){
         int nsize = FMTRec__Hits_trkingStat->getLength();
         vec_FMTRec__Hits_trkingStat.clear();
         vec_FMTRec__Hits_trkingStat.resize(nsize);
         memcpy(&vec_FMTRec__Hits_trkingStat[0],FMTRec__Hits_trkingStat->getAddress(),nsize*sizeof(int32_t));
      }
   }
   if(dictionary->hasSchema("FT::particles")==true){
      if(dictionary->hasEntry("FT::particles","calID")==true){
         int nsize = FT__particles_calID->getLength();
         vec_FT__particles_calID.clear();
         vec_FT__particles_calID.resize(nsize);
         memcpy(&vec_FT__particles_calID[0],FT__particles_calID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FT::particles","charge")==true){
         int nsize = FT__particles_charge->getLength();
         vec_FT__particles_charge.clear();
         vec_FT__particles_charge.resize(nsize);
         memcpy(&vec_FT__particles_charge[0],FT__particles_charge->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FT::particles","cx")==true){
         int nsize = FT__particles_cx->getLength();
         vec_FT__particles_cx.clear();
         vec_FT__particles_cx.resize(nsize);
         memcpy(&vec_FT__particles_cx[0],FT__particles_cx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FT::particles","cy")==true){
         int nsize = FT__particles_cy->getLength();
         vec_FT__particles_cy.clear();
         vec_FT__particles_cy.resize(nsize);
         memcpy(&vec_FT__particles_cy[0],FT__particles_cy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FT::particles","cz")==true){
         int nsize = FT__particles_cz->getLength();
         vec_FT__particles_cz.clear();
         vec_FT__particles_cz.resize(nsize);
         memcpy(&vec_FT__particles_cz[0],FT__particles_cz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FT::particles","energy")==true){
         int nsize = FT__particles_energy->getLength();
         vec_FT__particles_energy.clear();
         vec_FT__particles_energy.resize(nsize);
         memcpy(&vec_FT__particles_energy[0],FT__particles_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FT::particles","hodoID")==true){
         int nsize = FT__particles_hodoID->getLength();
         vec_FT__particles_hodoID.clear();
         vec_FT__particles_hodoID.resize(nsize);
         memcpy(&vec_FT__particles_hodoID[0],FT__particles_hodoID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FT::particles","id")==true){
         int nsize = FT__particles_id->getLength();
         vec_FT__particles_id.clear();
         vec_FT__particles_id.resize(nsize);
         memcpy(&vec_FT__particles_id[0],FT__particles_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FT::particles","time")==true){
         int nsize = FT__particles_time->getLength();
         vec_FT__particles_time.clear();
         vec_FT__particles_time.resize(nsize);
         memcpy(&vec_FT__particles_time[0],FT__particles_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FT::particles","trkID")==true){
         int nsize = FT__particles_trkID->getLength();
         vec_FT__particles_trkID.clear();
         vec_FT__particles_trkID.resize(nsize);
         memcpy(&vec_FT__particles_trkID[0],FT__particles_trkID->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("FTCAL::adc")==true){
      if(dictionary->hasEntry("FTCAL::adc","ADC")==true){
         int nsize = FTCAL__adc_ADC->getLength();
         vec_FTCAL__adc_ADC.clear();
         vec_FTCAL__adc_ADC.resize(nsize);
         memcpy(&vec_FTCAL__adc_ADC[0],FTCAL__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FTCAL::adc","component")==true){
         int nsize = FTCAL__adc_component->getLength();
         vec_FTCAL__adc_component.clear();
         vec_FTCAL__adc_component.resize(nsize);
         memcpy(&vec_FTCAL__adc_component[0],FTCAL__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTCAL::adc","layer")==true){
         int nsize = FTCAL__adc_layer->getLength();
         vec_FTCAL__adc_layer.clear();
         vec_FTCAL__adc_layer.resize(nsize);
         memcpy(&vec_FTCAL__adc_layer[0],FTCAL__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTCAL::adc","order")==true){
         int nsize = FTCAL__adc_order->getLength();
         vec_FTCAL__adc_order.clear();
         vec_FTCAL__adc_order.resize(nsize);
         memcpy(&vec_FTCAL__adc_order[0],FTCAL__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTCAL::adc","ped")==true){
         int nsize = FTCAL__adc_ped->getLength();
         vec_FTCAL__adc_ped.clear();
         vec_FTCAL__adc_ped.resize(nsize);
         memcpy(&vec_FTCAL__adc_ped[0],FTCAL__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTCAL::adc","sector")==true){
         int nsize = FTCAL__adc_sector->getLength();
         vec_FTCAL__adc_sector.clear();
         vec_FTCAL__adc_sector.resize(nsize);
         memcpy(&vec_FTCAL__adc_sector[0],FTCAL__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTCAL::adc","time")==true){
         int nsize = FTCAL__adc_time->getLength();
         vec_FTCAL__adc_time.clear();
         vec_FTCAL__adc_time.resize(nsize);
         memcpy(&vec_FTCAL__adc_time[0],FTCAL__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTCAL::clusters")==true){
      if(dictionary->hasEntry("FTCAL::clusters","energy")==true){
         int nsize = FTCAL__clusters_energy->getLength();
         vec_FTCAL__clusters_energy.clear();
         vec_FTCAL__clusters_energy.resize(nsize);
         memcpy(&vec_FTCAL__clusters_energy[0],FTCAL__clusters_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","id")==true){
         int nsize = FTCAL__clusters_id->getLength();
         vec_FTCAL__clusters_id.clear();
         vec_FTCAL__clusters_id.resize(nsize);
         memcpy(&vec_FTCAL__clusters_id[0],FTCAL__clusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTCAL::clusters","maxEnergy")==true){
         int nsize = FTCAL__clusters_maxEnergy->getLength();
         vec_FTCAL__clusters_maxEnergy.clear();
         vec_FTCAL__clusters_maxEnergy.resize(nsize);
         memcpy(&vec_FTCAL__clusters_maxEnergy[0],FTCAL__clusters_maxEnergy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","radius")==true){
         int nsize = FTCAL__clusters_radius->getLength();
         vec_FTCAL__clusters_radius.clear();
         vec_FTCAL__clusters_radius.resize(nsize);
         memcpy(&vec_FTCAL__clusters_radius[0],FTCAL__clusters_radius->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","recEnergy")==true){
         int nsize = FTCAL__clusters_recEnergy->getLength();
         vec_FTCAL__clusters_recEnergy.clear();
         vec_FTCAL__clusters_recEnergy.resize(nsize);
         memcpy(&vec_FTCAL__clusters_recEnergy[0],FTCAL__clusters_recEnergy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","size")==true){
         int nsize = FTCAL__clusters_size->getLength();
         vec_FTCAL__clusters_size.clear();
         vec_FTCAL__clusters_size.resize(nsize);
         memcpy(&vec_FTCAL__clusters_size[0],FTCAL__clusters_size->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTCAL::clusters","time")==true){
         int nsize = FTCAL__clusters_time->getLength();
         vec_FTCAL__clusters_time.clear();
         vec_FTCAL__clusters_time.resize(nsize);
         memcpy(&vec_FTCAL__clusters_time[0],FTCAL__clusters_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","widthX")==true){
         int nsize = FTCAL__clusters_widthX->getLength();
         vec_FTCAL__clusters_widthX.clear();
         vec_FTCAL__clusters_widthX.resize(nsize);
         memcpy(&vec_FTCAL__clusters_widthX[0],FTCAL__clusters_widthX->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","widthY")==true){
         int nsize = FTCAL__clusters_widthY->getLength();
         vec_FTCAL__clusters_widthY.clear();
         vec_FTCAL__clusters_widthY.resize(nsize);
         memcpy(&vec_FTCAL__clusters_widthY[0],FTCAL__clusters_widthY->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","x")==true){
         int nsize = FTCAL__clusters_x->getLength();
         vec_FTCAL__clusters_x.clear();
         vec_FTCAL__clusters_x.resize(nsize);
         memcpy(&vec_FTCAL__clusters_x[0],FTCAL__clusters_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","y")==true){
         int nsize = FTCAL__clusters_y->getLength();
         vec_FTCAL__clusters_y.clear();
         vec_FTCAL__clusters_y.resize(nsize);
         memcpy(&vec_FTCAL__clusters_y[0],FTCAL__clusters_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::clusters","z")==true){
         int nsize = FTCAL__clusters_z->getLength();
         vec_FTCAL__clusters_z.clear();
         vec_FTCAL__clusters_z.resize(nsize);
         memcpy(&vec_FTCAL__clusters_z[0],FTCAL__clusters_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTCAL::hits")==true){
      if(dictionary->hasEntry("FTCAL::hits","clusterID")==true){
         int nsize = FTCAL__hits_clusterID->getLength();
         vec_FTCAL__hits_clusterID.clear();
         vec_FTCAL__hits_clusterID.resize(nsize);
         memcpy(&vec_FTCAL__hits_clusterID[0],FTCAL__hits_clusterID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTCAL::hits","energy")==true){
         int nsize = FTCAL__hits_energy->getLength();
         vec_FTCAL__hits_energy.clear();
         vec_FTCAL__hits_energy.resize(nsize);
         memcpy(&vec_FTCAL__hits_energy[0],FTCAL__hits_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::hits","hitID")==true){
         int nsize = FTCAL__hits_hitID->getLength();
         vec_FTCAL__hits_hitID.clear();
         vec_FTCAL__hits_hitID.resize(nsize);
         memcpy(&vec_FTCAL__hits_hitID[0],FTCAL__hits_hitID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTCAL::hits","idx")==true){
         int nsize = FTCAL__hits_idx->getLength();
         vec_FTCAL__hits_idx.clear();
         vec_FTCAL__hits_idx.resize(nsize);
         memcpy(&vec_FTCAL__hits_idx[0],FTCAL__hits_idx->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTCAL::hits","idy")==true){
         int nsize = FTCAL__hits_idy->getLength();
         vec_FTCAL__hits_idy.clear();
         vec_FTCAL__hits_idy.resize(nsize);
         memcpy(&vec_FTCAL__hits_idy[0],FTCAL__hits_idy->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTCAL::hits","time")==true){
         int nsize = FTCAL__hits_time->getLength();
         vec_FTCAL__hits_time.clear();
         vec_FTCAL__hits_time.resize(nsize);
         memcpy(&vec_FTCAL__hits_time[0],FTCAL__hits_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::hits","x")==true){
         int nsize = FTCAL__hits_x->getLength();
         vec_FTCAL__hits_x.clear();
         vec_FTCAL__hits_x.resize(nsize);
         memcpy(&vec_FTCAL__hits_x[0],FTCAL__hits_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::hits","y")==true){
         int nsize = FTCAL__hits_y->getLength();
         vec_FTCAL__hits_y.clear();
         vec_FTCAL__hits_y.resize(nsize);
         memcpy(&vec_FTCAL__hits_y[0],FTCAL__hits_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTCAL::hits","z")==true){
         int nsize = FTCAL__hits_z->getLength();
         vec_FTCAL__hits_z.clear();
         vec_FTCAL__hits_z.resize(nsize);
         memcpy(&vec_FTCAL__hits_z[0],FTCAL__hits_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTHODO::adc")==true){
      if(dictionary->hasEntry("FTHODO::adc","ADC")==true){
         int nsize = FTHODO__adc_ADC->getLength();
         vec_FTHODO__adc_ADC.clear();
         vec_FTHODO__adc_ADC.resize(nsize);
         memcpy(&vec_FTHODO__adc_ADC[0],FTHODO__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FTHODO::adc","component")==true){
         int nsize = FTHODO__adc_component->getLength();
         vec_FTHODO__adc_component.clear();
         vec_FTHODO__adc_component.resize(nsize);
         memcpy(&vec_FTHODO__adc_component[0],FTHODO__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTHODO::adc","layer")==true){
         int nsize = FTHODO__adc_layer->getLength();
         vec_FTHODO__adc_layer.clear();
         vec_FTHODO__adc_layer.resize(nsize);
         memcpy(&vec_FTHODO__adc_layer[0],FTHODO__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTHODO::adc","order")==true){
         int nsize = FTHODO__adc_order->getLength();
         vec_FTHODO__adc_order.clear();
         vec_FTHODO__adc_order.resize(nsize);
         memcpy(&vec_FTHODO__adc_order[0],FTHODO__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTHODO::adc","ped")==true){
         int nsize = FTHODO__adc_ped->getLength();
         vec_FTHODO__adc_ped.clear();
         vec_FTHODO__adc_ped.resize(nsize);
         memcpy(&vec_FTHODO__adc_ped[0],FTHODO__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTHODO::adc","sector")==true){
         int nsize = FTHODO__adc_sector->getLength();
         vec_FTHODO__adc_sector.clear();
         vec_FTHODO__adc_sector.resize(nsize);
         memcpy(&vec_FTHODO__adc_sector[0],FTHODO__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTHODO::adc","time")==true){
         int nsize = FTHODO__adc_time->getLength();
         vec_FTHODO__adc_time.clear();
         vec_FTHODO__adc_time.resize(nsize);
         memcpy(&vec_FTHODO__adc_time[0],FTHODO__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTHODO::clusters")==true){
      if(dictionary->hasEntry("FTHODO::clusters","energy")==true){
         int nsize = FTHODO__clusters_energy->getLength();
         vec_FTHODO__clusters_energy.clear();
         vec_FTHODO__clusters_energy.resize(nsize);
         memcpy(&vec_FTHODO__clusters_energy[0],FTHODO__clusters_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::clusters","id")==true){
         int nsize = FTHODO__clusters_id->getLength();
         vec_FTHODO__clusters_id.clear();
         vec_FTHODO__clusters_id.resize(nsize);
         memcpy(&vec_FTHODO__clusters_id[0],FTHODO__clusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTHODO::clusters","radius")==true){
         int nsize = FTHODO__clusters_radius->getLength();
         vec_FTHODO__clusters_radius.clear();
         vec_FTHODO__clusters_radius.resize(nsize);
         memcpy(&vec_FTHODO__clusters_radius[0],FTHODO__clusters_radius->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::clusters","size")==true){
         int nsize = FTHODO__clusters_size->getLength();
         vec_FTHODO__clusters_size.clear();
         vec_FTHODO__clusters_size.resize(nsize);
         memcpy(&vec_FTHODO__clusters_size[0],FTHODO__clusters_size->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTHODO::clusters","time")==true){
         int nsize = FTHODO__clusters_time->getLength();
         vec_FTHODO__clusters_time.clear();
         vec_FTHODO__clusters_time.resize(nsize);
         memcpy(&vec_FTHODO__clusters_time[0],FTHODO__clusters_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::clusters","widthX")==true){
         int nsize = FTHODO__clusters_widthX->getLength();
         vec_FTHODO__clusters_widthX.clear();
         vec_FTHODO__clusters_widthX.resize(nsize);
         memcpy(&vec_FTHODO__clusters_widthX[0],FTHODO__clusters_widthX->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::clusters","widthY")==true){
         int nsize = FTHODO__clusters_widthY->getLength();
         vec_FTHODO__clusters_widthY.clear();
         vec_FTHODO__clusters_widthY.resize(nsize);
         memcpy(&vec_FTHODO__clusters_widthY[0],FTHODO__clusters_widthY->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::clusters","x")==true){
         int nsize = FTHODO__clusters_x->getLength();
         vec_FTHODO__clusters_x.clear();
         vec_FTHODO__clusters_x.resize(nsize);
         memcpy(&vec_FTHODO__clusters_x[0],FTHODO__clusters_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::clusters","y")==true){
         int nsize = FTHODO__clusters_y->getLength();
         vec_FTHODO__clusters_y.clear();
         vec_FTHODO__clusters_y.resize(nsize);
         memcpy(&vec_FTHODO__clusters_y[0],FTHODO__clusters_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::clusters","z")==true){
         int nsize = FTHODO__clusters_z->getLength();
         vec_FTHODO__clusters_z.clear();
         vec_FTHODO__clusters_z.resize(nsize);
         memcpy(&vec_FTHODO__clusters_z[0],FTHODO__clusters_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTHODO::hits")==true){
      if(dictionary->hasEntry("FTHODO::hits","clusterID")==true){
         int nsize = FTHODO__hits_clusterID->getLength();
         vec_FTHODO__hits_clusterID.clear();
         vec_FTHODO__hits_clusterID.resize(nsize);
         memcpy(&vec_FTHODO__hits_clusterID[0],FTHODO__hits_clusterID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTHODO::hits","component")==true){
         int nsize = FTHODO__hits_component->getLength();
         vec_FTHODO__hits_component.clear();
         vec_FTHODO__hits_component.resize(nsize);
         memcpy(&vec_FTHODO__hits_component[0],FTHODO__hits_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTHODO::hits","energy")==true){
         int nsize = FTHODO__hits_energy->getLength();
         vec_FTHODO__hits_energy.clear();
         vec_FTHODO__hits_energy.resize(nsize);
         memcpy(&vec_FTHODO__hits_energy[0],FTHODO__hits_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::hits","hitID")==true){
         int nsize = FTHODO__hits_hitID->getLength();
         vec_FTHODO__hits_hitID.clear();
         vec_FTHODO__hits_hitID.resize(nsize);
         memcpy(&vec_FTHODO__hits_hitID[0],FTHODO__hits_hitID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTHODO::hits","layer")==true){
         int nsize = FTHODO__hits_layer->getLength();
         vec_FTHODO__hits_layer.clear();
         vec_FTHODO__hits_layer.resize(nsize);
         memcpy(&vec_FTHODO__hits_layer[0],FTHODO__hits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTHODO::hits","sector")==true){
         int nsize = FTHODO__hits_sector->getLength();
         vec_FTHODO__hits_sector.clear();
         vec_FTHODO__hits_sector.resize(nsize);
         memcpy(&vec_FTHODO__hits_sector[0],FTHODO__hits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTHODO::hits","time")==true){
         int nsize = FTHODO__hits_time->getLength();
         vec_FTHODO__hits_time.clear();
         vec_FTHODO__hits_time.resize(nsize);
         memcpy(&vec_FTHODO__hits_time[0],FTHODO__hits_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::hits","x")==true){
         int nsize = FTHODO__hits_x->getLength();
         vec_FTHODO__hits_x.clear();
         vec_FTHODO__hits_x.resize(nsize);
         memcpy(&vec_FTHODO__hits_x[0],FTHODO__hits_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::hits","y")==true){
         int nsize = FTHODO__hits_y->getLength();
         vec_FTHODO__hits_y.clear();
         vec_FTHODO__hits_y.resize(nsize);
         memcpy(&vec_FTHODO__hits_y[0],FTHODO__hits_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTHODO::hits","z")==true){
         int nsize = FTHODO__hits_z->getLength();
         vec_FTHODO__hits_z.clear();
         vec_FTHODO__hits_z.resize(nsize);
         memcpy(&vec_FTHODO__hits_z[0],FTHODO__hits_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTOF::adc")==true){
      if(dictionary->hasEntry("FTOF::adc","ADC")==true){
         int nsize = FTOF__adc_ADC->getLength();
         vec_FTOF__adc_ADC.clear();
         vec_FTOF__adc_ADC.resize(nsize);
         memcpy(&vec_FTOF__adc_ADC[0],FTOF__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FTOF::adc","component")==true){
         int nsize = FTOF__adc_component->getLength();
         vec_FTOF__adc_component.clear();
         vec_FTOF__adc_component.resize(nsize);
         memcpy(&vec_FTOF__adc_component[0],FTOF__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::adc","layer")==true){
         int nsize = FTOF__adc_layer->getLength();
         vec_FTOF__adc_layer.clear();
         vec_FTOF__adc_layer.resize(nsize);
         memcpy(&vec_FTOF__adc_layer[0],FTOF__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::adc","order")==true){
         int nsize = FTOF__adc_order->getLength();
         vec_FTOF__adc_order.clear();
         vec_FTOF__adc_order.resize(nsize);
         memcpy(&vec_FTOF__adc_order[0],FTOF__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::adc","ped")==true){
         int nsize = FTOF__adc_ped->getLength();
         vec_FTOF__adc_ped.clear();
         vec_FTOF__adc_ped.resize(nsize);
         memcpy(&vec_FTOF__adc_ped[0],FTOF__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::adc","sector")==true){
         int nsize = FTOF__adc_sector->getLength();
         vec_FTOF__adc_sector.clear();
         vec_FTOF__adc_sector.resize(nsize);
         memcpy(&vec_FTOF__adc_sector[0],FTOF__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::adc","time")==true){
         int nsize = FTOF__adc_time->getLength();
         vec_FTOF__adc_time.clear();
         vec_FTOF__adc_time.resize(nsize);
         memcpy(&vec_FTOF__adc_time[0],FTOF__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTOF::clusters")==true){
      if(dictionary->hasEntry("FTOF::clusters","component")==true){
         int nsize = FTOF__clusters_component->getLength();
         vec_FTOF__clusters_component.clear();
         vec_FTOF__clusters_component.resize(nsize);
         memcpy(&vec_FTOF__clusters_component[0],FTOF__clusters_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::clusters","energy")==true){
         int nsize = FTOF__clusters_energy->getLength();
         vec_FTOF__clusters_energy.clear();
         vec_FTOF__clusters_energy.resize(nsize);
         memcpy(&vec_FTOF__clusters_energy[0],FTOF__clusters_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","energy_unc")==true){
         int nsize = FTOF__clusters_energy_unc->getLength();
         vec_FTOF__clusters_energy_unc.clear();
         vec_FTOF__clusters_energy_unc.resize(nsize);
         memcpy(&vec_FTOF__clusters_energy_unc[0],FTOF__clusters_energy_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","id")==true){
         int nsize = FTOF__clusters_id->getLength();
         vec_FTOF__clusters_id.clear();
         vec_FTOF__clusters_id.resize(nsize);
         memcpy(&vec_FTOF__clusters_id[0],FTOF__clusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::clusters","layer")==true){
         int nsize = FTOF__clusters_layer->getLength();
         vec_FTOF__clusters_layer.clear();
         vec_FTOF__clusters_layer.resize(nsize);
         memcpy(&vec_FTOF__clusters_layer[0],FTOF__clusters_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::clusters","sector")==true){
         int nsize = FTOF__clusters_sector->getLength();
         vec_FTOF__clusters_sector.clear();
         vec_FTOF__clusters_sector.resize(nsize);
         memcpy(&vec_FTOF__clusters_sector[0],FTOF__clusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::clusters","status")==true){
         int nsize = FTOF__clusters_status->getLength();
         vec_FTOF__clusters_status.clear();
         vec_FTOF__clusters_status.resize(nsize);
         memcpy(&vec_FTOF__clusters_status[0],FTOF__clusters_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::clusters","time")==true){
         int nsize = FTOF__clusters_time->getLength();
         vec_FTOF__clusters_time.clear();
         vec_FTOF__clusters_time.resize(nsize);
         memcpy(&vec_FTOF__clusters_time[0],FTOF__clusters_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","time_unc")==true){
         int nsize = FTOF__clusters_time_unc->getLength();
         vec_FTOF__clusters_time_unc.clear();
         vec_FTOF__clusters_time_unc.resize(nsize);
         memcpy(&vec_FTOF__clusters_time_unc[0],FTOF__clusters_time_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","trackid")==true){
         int nsize = FTOF__clusters_trackid->getLength();
         vec_FTOF__clusters_trackid.clear();
         vec_FTOF__clusters_trackid.resize(nsize);
         memcpy(&vec_FTOF__clusters_trackid[0],FTOF__clusters_trackid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::clusters","x")==true){
         int nsize = FTOF__clusters_x->getLength();
         vec_FTOF__clusters_x.clear();
         vec_FTOF__clusters_x.resize(nsize);
         memcpy(&vec_FTOF__clusters_x[0],FTOF__clusters_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","x_unc")==true){
         int nsize = FTOF__clusters_x_unc->getLength();
         vec_FTOF__clusters_x_unc.clear();
         vec_FTOF__clusters_x_unc.resize(nsize);
         memcpy(&vec_FTOF__clusters_x_unc[0],FTOF__clusters_x_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","y")==true){
         int nsize = FTOF__clusters_y->getLength();
         vec_FTOF__clusters_y.clear();
         vec_FTOF__clusters_y.resize(nsize);
         memcpy(&vec_FTOF__clusters_y[0],FTOF__clusters_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","y_unc")==true){
         int nsize = FTOF__clusters_y_unc->getLength();
         vec_FTOF__clusters_y_unc.clear();
         vec_FTOF__clusters_y_unc.resize(nsize);
         memcpy(&vec_FTOF__clusters_y_unc[0],FTOF__clusters_y_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","z")==true){
         int nsize = FTOF__clusters_z->getLength();
         vec_FTOF__clusters_z.clear();
         vec_FTOF__clusters_z.resize(nsize);
         memcpy(&vec_FTOF__clusters_z[0],FTOF__clusters_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::clusters","z_unc")==true){
         int nsize = FTOF__clusters_z_unc->getLength();
         vec_FTOF__clusters_z_unc.clear();
         vec_FTOF__clusters_z_unc.resize(nsize);
         memcpy(&vec_FTOF__clusters_z_unc[0],FTOF__clusters_z_unc->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTOF::hits")==true){
      if(dictionary->hasEntry("FTOF::hits","adc_idx1")==true){
         int nsize = FTOF__hits_adc_idx1->getLength();
         vec_FTOF__hits_adc_idx1.clear();
         vec_FTOF__hits_adc_idx1.resize(nsize);
         memcpy(&vec_FTOF__hits_adc_idx1[0],FTOF__hits_adc_idx1->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::hits","adc_idx2")==true){
         int nsize = FTOF__hits_adc_idx2->getLength();
         vec_FTOF__hits_adc_idx2.clear();
         vec_FTOF__hits_adc_idx2.resize(nsize);
         memcpy(&vec_FTOF__hits_adc_idx2[0],FTOF__hits_adc_idx2->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::hits","component")==true){
         int nsize = FTOF__hits_component->getLength();
         vec_FTOF__hits_component.clear();
         vec_FTOF__hits_component.resize(nsize);
         memcpy(&vec_FTOF__hits_component[0],FTOF__hits_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::hits","energy")==true){
         int nsize = FTOF__hits_energy->getLength();
         vec_FTOF__hits_energy.clear();
         vec_FTOF__hits_energy.resize(nsize);
         memcpy(&vec_FTOF__hits_energy[0],FTOF__hits_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","energy_unc")==true){
         int nsize = FTOF__hits_energy_unc->getLength();
         vec_FTOF__hits_energy_unc.clear();
         vec_FTOF__hits_energy_unc.resize(nsize);
         memcpy(&vec_FTOF__hits_energy_unc[0],FTOF__hits_energy_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","id")==true){
         int nsize = FTOF__hits_id->getLength();
         vec_FTOF__hits_id.clear();
         vec_FTOF__hits_id.resize(nsize);
         memcpy(&vec_FTOF__hits_id[0],FTOF__hits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::hits","layer")==true){
         int nsize = FTOF__hits_layer->getLength();
         vec_FTOF__hits_layer.clear();
         vec_FTOF__hits_layer.resize(nsize);
         memcpy(&vec_FTOF__hits_layer[0],FTOF__hits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::hits","pathLength")==true){
         int nsize = FTOF__hits_pathLength->getLength();
         vec_FTOF__hits_pathLength.clear();
         vec_FTOF__hits_pathLength.resize(nsize);
         memcpy(&vec_FTOF__hits_pathLength[0],FTOF__hits_pathLength->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","pathLengthThruBar")==true){
         int nsize = FTOF__hits_pathLengthThruBar->getLength();
         vec_FTOF__hits_pathLengthThruBar.clear();
         vec_FTOF__hits_pathLengthThruBar.resize(nsize);
         memcpy(&vec_FTOF__hits_pathLengthThruBar[0],FTOF__hits_pathLengthThruBar->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","sector")==true){
         int nsize = FTOF__hits_sector->getLength();
         vec_FTOF__hits_sector.clear();
         vec_FTOF__hits_sector.resize(nsize);
         memcpy(&vec_FTOF__hits_sector[0],FTOF__hits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::hits","status")==true){
         int nsize = FTOF__hits_status->getLength();
         vec_FTOF__hits_status.clear();
         vec_FTOF__hits_status.resize(nsize);
         memcpy(&vec_FTOF__hits_status[0],FTOF__hits_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::hits","tdc_idx1")==true){
         int nsize = FTOF__hits_tdc_idx1->getLength();
         vec_FTOF__hits_tdc_idx1.clear();
         vec_FTOF__hits_tdc_idx1.resize(nsize);
         memcpy(&vec_FTOF__hits_tdc_idx1[0],FTOF__hits_tdc_idx1->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::hits","tdc_idx2")==true){
         int nsize = FTOF__hits_tdc_idx2->getLength();
         vec_FTOF__hits_tdc_idx2.clear();
         vec_FTOF__hits_tdc_idx2.resize(nsize);
         memcpy(&vec_FTOF__hits_tdc_idx2[0],FTOF__hits_tdc_idx2->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::hits","time")==true){
         int nsize = FTOF__hits_time->getLength();
         vec_FTOF__hits_time.clear();
         vec_FTOF__hits_time.resize(nsize);
         memcpy(&vec_FTOF__hits_time[0],FTOF__hits_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","time_unc")==true){
         int nsize = FTOF__hits_time_unc->getLength();
         vec_FTOF__hits_time_unc.clear();
         vec_FTOF__hits_time_unc.resize(nsize);
         memcpy(&vec_FTOF__hits_time_unc[0],FTOF__hits_time_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","trackid")==true){
         int nsize = FTOF__hits_trackid->getLength();
         vec_FTOF__hits_trackid.clear();
         vec_FTOF__hits_trackid.resize(nsize);
         memcpy(&vec_FTOF__hits_trackid[0],FTOF__hits_trackid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::hits","tx")==true){
         int nsize = FTOF__hits_tx->getLength();
         vec_FTOF__hits_tx.clear();
         vec_FTOF__hits_tx.resize(nsize);
         memcpy(&vec_FTOF__hits_tx[0],FTOF__hits_tx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","ty")==true){
         int nsize = FTOF__hits_ty->getLength();
         vec_FTOF__hits_ty.clear();
         vec_FTOF__hits_ty.resize(nsize);
         memcpy(&vec_FTOF__hits_ty[0],FTOF__hits_ty->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","tz")==true){
         int nsize = FTOF__hits_tz->getLength();
         vec_FTOF__hits_tz.clear();
         vec_FTOF__hits_tz.resize(nsize);
         memcpy(&vec_FTOF__hits_tz[0],FTOF__hits_tz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","x")==true){
         int nsize = FTOF__hits_x->getLength();
         vec_FTOF__hits_x.clear();
         vec_FTOF__hits_x.resize(nsize);
         memcpy(&vec_FTOF__hits_x[0],FTOF__hits_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","x_unc")==true){
         int nsize = FTOF__hits_x_unc->getLength();
         vec_FTOF__hits_x_unc.clear();
         vec_FTOF__hits_x_unc.resize(nsize);
         memcpy(&vec_FTOF__hits_x_unc[0],FTOF__hits_x_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","y")==true){
         int nsize = FTOF__hits_y->getLength();
         vec_FTOF__hits_y.clear();
         vec_FTOF__hits_y.resize(nsize);
         memcpy(&vec_FTOF__hits_y[0],FTOF__hits_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","y_unc")==true){
         int nsize = FTOF__hits_y_unc->getLength();
         vec_FTOF__hits_y_unc.clear();
         vec_FTOF__hits_y_unc.resize(nsize);
         memcpy(&vec_FTOF__hits_y_unc[0],FTOF__hits_y_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","z")==true){
         int nsize = FTOF__hits_z->getLength();
         vec_FTOF__hits_z.clear();
         vec_FTOF__hits_z.resize(nsize);
         memcpy(&vec_FTOF__hits_z[0],FTOF__hits_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::hits","z_unc")==true){
         int nsize = FTOF__hits_z_unc->getLength();
         vec_FTOF__hits_z_unc.clear();
         vec_FTOF__hits_z_unc.resize(nsize);
         memcpy(&vec_FTOF__hits_z_unc[0],FTOF__hits_z_unc->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTOF::matchedclusters")==true){
      if(dictionary->hasEntry("FTOF::matchedclusters","EmaxAlgo_1B_tCorr")==true){
         int nsize = FTOF__matchedclusters_EmaxAlgo_1B_tCorr->getLength();
         vec_FTOF__matchedclusters_EmaxAlgo_1B_tCorr.clear();
         vec_FTOF__matchedclusters_EmaxAlgo_1B_tCorr.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_EmaxAlgo_1B_tCorr[0],FTOF__matchedclusters_EmaxAlgo_1B_tCorr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","clusSize_1A")==true){
         int nsize = FTOF__matchedclusters_clusSize_1A->getLength();
         vec_FTOF__matchedclusters_clusSize_1A.clear();
         vec_FTOF__matchedclusters_clusSize_1A.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_clusSize_1A[0],FTOF__matchedclusters_clusSize_1A->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","clusSize_1B")==true){
         int nsize = FTOF__matchedclusters_clusSize_1B->getLength();
         vec_FTOF__matchedclusters_clusSize_1B.clear();
         vec_FTOF__matchedclusters_clusSize_1B.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_clusSize_1B[0],FTOF__matchedclusters_clusSize_1B->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","clus_1Aid")==true){
         int nsize = FTOF__matchedclusters_clus_1Aid->getLength();
         vec_FTOF__matchedclusters_clus_1Aid.clear();
         vec_FTOF__matchedclusters_clus_1Aid.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_clus_1Aid[0],FTOF__matchedclusters_clus_1Aid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","clus_1Bid")==true){
         int nsize = FTOF__matchedclusters_clus_1Bid->getLength();
         vec_FTOF__matchedclusters_clus_1Bid.clear();
         vec_FTOF__matchedclusters_clus_1Bid.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_clus_1Bid[0],FTOF__matchedclusters_clus_1Bid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","midbarAlgo_1B_tCorr")==true){
         int nsize = FTOF__matchedclusters_midbarAlgo_1B_tCorr->getLength();
         vec_FTOF__matchedclusters_midbarAlgo_1B_tCorr.clear();
         vec_FTOF__matchedclusters_midbarAlgo_1B_tCorr.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_midbarAlgo_1B_tCorr[0],FTOF__matchedclusters_midbarAlgo_1B_tCorr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","paddle_id1A")==true){
         int nsize = FTOF__matchedclusters_paddle_id1A->getLength();
         vec_FTOF__matchedclusters_paddle_id1A.clear();
         vec_FTOF__matchedclusters_paddle_id1A.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_paddle_id1A[0],FTOF__matchedclusters_paddle_id1A->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","paddle_id1B")==true){
         int nsize = FTOF__matchedclusters_paddle_id1B->getLength();
         vec_FTOF__matchedclusters_paddle_id1B.clear();
         vec_FTOF__matchedclusters_paddle_id1B.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_paddle_id1B[0],FTOF__matchedclusters_paddle_id1B->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","sector")==true){
         int nsize = FTOF__matchedclusters_sector->getLength();
         vec_FTOF__matchedclusters_sector.clear();
         vec_FTOF__matchedclusters_sector.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_sector[0],FTOF__matchedclusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::matchedclusters","tminAlgo_1B_tCorr")==true){
         int nsize = FTOF__matchedclusters_tminAlgo_1B_tCorr->getLength();
         vec_FTOF__matchedclusters_tminAlgo_1B_tCorr.clear();
         vec_FTOF__matchedclusters_tminAlgo_1B_tCorr.resize(nsize);
         memcpy(&vec_FTOF__matchedclusters_tminAlgo_1B_tCorr[0],FTOF__matchedclusters_tminAlgo_1B_tCorr->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTOF::rawhits")==true){
      if(dictionary->hasEntry("FTOF::rawhits","component")==true){
         int nsize = FTOF__rawhits_component->getLength();
         vec_FTOF__rawhits_component.clear();
         vec_FTOF__rawhits_component.resize(nsize);
         memcpy(&vec_FTOF__rawhits_component[0],FTOF__rawhits_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::rawhits","energy_left")==true){
         int nsize = FTOF__rawhits_energy_left->getLength();
         vec_FTOF__rawhits_energy_left.clear();
         vec_FTOF__rawhits_energy_left.resize(nsize);
         memcpy(&vec_FTOF__rawhits_energy_left[0],FTOF__rawhits_energy_left->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::rawhits","energy_left_unc")==true){
         int nsize = FTOF__rawhits_energy_left_unc->getLength();
         vec_FTOF__rawhits_energy_left_unc.clear();
         vec_FTOF__rawhits_energy_left_unc.resize(nsize);
         memcpy(&vec_FTOF__rawhits_energy_left_unc[0],FTOF__rawhits_energy_left_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::rawhits","energy_right")==true){
         int nsize = FTOF__rawhits_energy_right->getLength();
         vec_FTOF__rawhits_energy_right.clear();
         vec_FTOF__rawhits_energy_right.resize(nsize);
         memcpy(&vec_FTOF__rawhits_energy_right[0],FTOF__rawhits_energy_right->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::rawhits","energy_right_unc")==true){
         int nsize = FTOF__rawhits_energy_right_unc->getLength();
         vec_FTOF__rawhits_energy_right_unc.clear();
         vec_FTOF__rawhits_energy_right_unc.resize(nsize);
         memcpy(&vec_FTOF__rawhits_energy_right_unc[0],FTOF__rawhits_energy_right_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::rawhits","id")==true){
         int nsize = FTOF__rawhits_id->getLength();
         vec_FTOF__rawhits_id.clear();
         vec_FTOF__rawhits_id.resize(nsize);
         memcpy(&vec_FTOF__rawhits_id[0],FTOF__rawhits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::rawhits","layer")==true){
         int nsize = FTOF__rawhits_layer->getLength();
         vec_FTOF__rawhits_layer.clear();
         vec_FTOF__rawhits_layer.resize(nsize);
         memcpy(&vec_FTOF__rawhits_layer[0],FTOF__rawhits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::rawhits","sector")==true){
         int nsize = FTOF__rawhits_sector->getLength();
         vec_FTOF__rawhits_sector.clear();
         vec_FTOF__rawhits_sector.resize(nsize);
         memcpy(&vec_FTOF__rawhits_sector[0],FTOF__rawhits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::rawhits","status")==true){
         int nsize = FTOF__rawhits_status->getLength();
         vec_FTOF__rawhits_status.clear();
         vec_FTOF__rawhits_status.resize(nsize);
         memcpy(&vec_FTOF__rawhits_status[0],FTOF__rawhits_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::rawhits","time_left")==true){
         int nsize = FTOF__rawhits_time_left->getLength();
         vec_FTOF__rawhits_time_left.clear();
         vec_FTOF__rawhits_time_left.resize(nsize);
         memcpy(&vec_FTOF__rawhits_time_left[0],FTOF__rawhits_time_left->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::rawhits","time_left_unc")==true){
         int nsize = FTOF__rawhits_time_left_unc->getLength();
         vec_FTOF__rawhits_time_left_unc.clear();
         vec_FTOF__rawhits_time_left_unc.resize(nsize);
         memcpy(&vec_FTOF__rawhits_time_left_unc[0],FTOF__rawhits_time_left_unc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::rawhits","time_right")==true){
         int nsize = FTOF__rawhits_time_right->getLength();
         vec_FTOF__rawhits_time_right.clear();
         vec_FTOF__rawhits_time_right.resize(nsize);
         memcpy(&vec_FTOF__rawhits_time_right[0],FTOF__rawhits_time_right->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTOF::rawhits","time_right_unc")==true){
         int nsize = FTOF__rawhits_time_right_unc->getLength();
         vec_FTOF__rawhits_time_right_unc.clear();
         vec_FTOF__rawhits_time_right_unc.resize(nsize);
         memcpy(&vec_FTOF__rawhits_time_right_unc[0],FTOF__rawhits_time_right_unc->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("FTOF::tdc")==true){
      if(dictionary->hasEntry("FTOF::tdc","TDC")==true){
         int nsize = FTOF__tdc_TDC->getLength();
         vec_FTOF__tdc_TDC.clear();
         vec_FTOF__tdc_TDC.resize(nsize);
         memcpy(&vec_FTOF__tdc_TDC[0],FTOF__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FTOF::tdc","component")==true){
         int nsize = FTOF__tdc_component->getLength();
         vec_FTOF__tdc_component.clear();
         vec_FTOF__tdc_component.resize(nsize);
         memcpy(&vec_FTOF__tdc_component[0],FTOF__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTOF::tdc","layer")==true){
         int nsize = FTOF__tdc_layer->getLength();
         vec_FTOF__tdc_layer.clear();
         vec_FTOF__tdc_layer.resize(nsize);
         memcpy(&vec_FTOF__tdc_layer[0],FTOF__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::tdc","order")==true){
         int nsize = FTOF__tdc_order->getLength();
         vec_FTOF__tdc_order.clear();
         vec_FTOF__tdc_order.resize(nsize);
         memcpy(&vec_FTOF__tdc_order[0],FTOF__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTOF::tdc","sector")==true){
         int nsize = FTOF__tdc_sector->getLength();
         vec_FTOF__tdc_sector.clear();
         vec_FTOF__tdc_sector.resize(nsize);
         memcpy(&vec_FTOF__tdc_sector[0],FTOF__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("FTTRK::adc")==true){
      if(dictionary->hasEntry("FTTRK::adc","ADC")==true){
         int nsize = FTTRK__adc_ADC->getLength();
         vec_FTTRK__adc_ADC.clear();
         vec_FTTRK__adc_ADC.resize(nsize);
         memcpy(&vec_FTTRK__adc_ADC[0],FTTRK__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FTTRK::adc","component")==true){
         int nsize = FTTRK__adc_component->getLength();
         vec_FTTRK__adc_component.clear();
         vec_FTTRK__adc_component.resize(nsize);
         memcpy(&vec_FTTRK__adc_component[0],FTTRK__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTTRK::adc","integral")==true){
         int nsize = FTTRK__adc_integral->getLength();
         vec_FTTRK__adc_integral.clear();
         vec_FTTRK__adc_integral.resize(nsize);
         memcpy(&vec_FTTRK__adc_integral[0],FTTRK__adc_integral->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("FTTRK::adc","layer")==true){
         int nsize = FTTRK__adc_layer->getLength();
         vec_FTTRK__adc_layer.clear();
         vec_FTTRK__adc_layer.resize(nsize);
         memcpy(&vec_FTTRK__adc_layer[0],FTTRK__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTTRK::adc","order")==true){
         int nsize = FTTRK__adc_order->getLength();
         vec_FTTRK__adc_order.clear();
         vec_FTTRK__adc_order.resize(nsize);
         memcpy(&vec_FTTRK__adc_order[0],FTTRK__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTTRK::adc","ped")==true){
         int nsize = FTTRK__adc_ped->getLength();
         vec_FTTRK__adc_ped.clear();
         vec_FTTRK__adc_ped.resize(nsize);
         memcpy(&vec_FTTRK__adc_ped[0],FTTRK__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("FTTRK::adc","sector")==true){
         int nsize = FTTRK__adc_sector->getLength();
         vec_FTTRK__adc_sector.clear();
         vec_FTTRK__adc_sector.resize(nsize);
         memcpy(&vec_FTTRK__adc_sector[0],FTTRK__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("FTTRK::adc","time")==true){
         int nsize = FTTRK__adc_time->getLength();
         vec_FTTRK__adc_time.clear();
         vec_FTTRK__adc_time.resize(nsize);
         memcpy(&vec_FTTRK__adc_time[0],FTTRK__adc_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("FTTRK::adc","timestamp")==true){
         int nsize = FTTRK__adc_timestamp->getLength();
         vec_FTTRK__adc_timestamp.clear();
         vec_FTTRK__adc_timestamp.resize(nsize);
         memcpy(&vec_FTTRK__adc_timestamp[0],FTTRK__adc_timestamp->getAddress(),nsize*sizeof(int64_t));
      }
   }
   if(dictionary->hasSchema("HEADER::info")==true){
      if(dictionary->hasEntry("HEADER::info","fc")==true){
         int nsize = HEADER__info_fc->getLength();
         vec_HEADER__info_fc.clear();
         vec_HEADER__info_fc.resize(nsize);
         memcpy(&vec_HEADER__info_fc[0],HEADER__info_fc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HEADER::info","fcg")==true){
         int nsize = HEADER__info_fcg->getLength();
         vec_HEADER__info_fcg.clear();
         vec_HEADER__info_fcg.resize(nsize);
         memcpy(&vec_HEADER__info_fcg[0],HEADER__info_fcg->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HEADER::info","helicity")==true){
         int nsize = HEADER__info_helicity->getLength();
         vec_HEADER__info_helicity.clear();
         vec_HEADER__info_helicity.resize(nsize);
         memcpy(&vec_HEADER__info_helicity[0],HEADER__info_helicity->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HEADER::info","nevt")==true){
         int nsize = HEADER__info_nevt->getLength();
         vec_HEADER__info_nevt.clear();
         vec_HEADER__info_nevt.resize(nsize);
         memcpy(&vec_HEADER__info_nevt[0],HEADER__info_nevt->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("HEADER::info","nrun")==true){
         int nsize = HEADER__info_nrun->getLength();
         vec_HEADER__info_nrun.clear();
         vec_HEADER__info_nrun.resize(nsize);
         memcpy(&vec_HEADER__info_nrun[0],HEADER__info_nrun->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("HEADER::info","rastr1")==true){
         int nsize = HEADER__info_rastr1->getLength();
         vec_HEADER__info_rastr1.clear();
         vec_HEADER__info_rastr1.resize(nsize);
         memcpy(&vec_HEADER__info_rastr1[0],HEADER__info_rastr1->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HEADER::info","rastr2")==true){
         int nsize = HEADER__info_rastr2->getLength();
         vec_HEADER__info_rastr2.clear();
         vec_HEADER__info_rastr2.resize(nsize);
         memcpy(&vec_HEADER__info_rastr2[0],HEADER__info_rastr2->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HEADER::info","stt")==true){
         int nsize = HEADER__info_stt->getLength();
         vec_HEADER__info_stt.clear();
         vec_HEADER__info_stt.resize(nsize);
         memcpy(&vec_HEADER__info_stt[0],HEADER__info_stt->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HEADER::info","trigger")==true){
         int nsize = HEADER__info_trigger->getLength();
         vec_HEADER__info_trigger.clear();
         vec_HEADER__info_trigger.resize(nsize);
         memcpy(&vec_HEADER__info_trigger[0],HEADER__info_trigger->getAddress(),nsize*sizeof(int32_t));
      }
   }
   if(dictionary->hasSchema("HEL::adc")==true){
      if(dictionary->hasEntry("HEL::adc","ADC")==true){
         int nsize = HEL__adc_ADC->getLength();
         vec_HEL__adc_ADC.clear();
         vec_HEL__adc_ADC.resize(nsize);
         memcpy(&vec_HEL__adc_ADC[0],HEL__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("HEL::adc","component")==true){
         int nsize = HEL__adc_component->getLength();
         vec_HEL__adc_component.clear();
         vec_HEL__adc_component.resize(nsize);
         memcpy(&vec_HEL__adc_component[0],HEL__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HEL::adc","layer")==true){
         int nsize = HEL__adc_layer->getLength();
         vec_HEL__adc_layer.clear();
         vec_HEL__adc_layer.resize(nsize);
         memcpy(&vec_HEL__adc_layer[0],HEL__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HEL::adc","order")==true){
         int nsize = HEL__adc_order->getLength();
         vec_HEL__adc_order.clear();
         vec_HEL__adc_order.resize(nsize);
         memcpy(&vec_HEL__adc_order[0],HEL__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HEL::adc","ped")==true){
         int nsize = HEL__adc_ped->getLength();
         vec_HEL__adc_ped.clear();
         vec_HEL__adc_ped.resize(nsize);
         memcpy(&vec_HEL__adc_ped[0],HEL__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HEL::adc","sector")==true){
         int nsize = HEL__adc_sector->getLength();
         vec_HEL__adc_sector.clear();
         vec_HEL__adc_sector.resize(nsize);
         memcpy(&vec_HEL__adc_sector[0],HEL__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HEL::adc","time")==true){
         int nsize = HEL__adc_time->getLength();
         vec_HEL__adc_time.clear();
         vec_HEL__adc_time.resize(nsize);
         memcpy(&vec_HEL__adc_time[0],HEL__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("HTCC::adc")==true){
      if(dictionary->hasEntry("HTCC::adc","ADC")==true){
         int nsize = HTCC__adc_ADC->getLength();
         vec_HTCC__adc_ADC.clear();
         vec_HTCC__adc_ADC.resize(nsize);
         memcpy(&vec_HTCC__adc_ADC[0],HTCC__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("HTCC::adc","component")==true){
         int nsize = HTCC__adc_component->getLength();
         vec_HTCC__adc_component.clear();
         vec_HTCC__adc_component.resize(nsize);
         memcpy(&vec_HTCC__adc_component[0],HTCC__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::adc","layer")==true){
         int nsize = HTCC__adc_layer->getLength();
         vec_HTCC__adc_layer.clear();
         vec_HTCC__adc_layer.resize(nsize);
         memcpy(&vec_HTCC__adc_layer[0],HTCC__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HTCC::adc","order")==true){
         int nsize = HTCC__adc_order->getLength();
         vec_HTCC__adc_order.clear();
         vec_HTCC__adc_order.resize(nsize);
         memcpy(&vec_HTCC__adc_order[0],HTCC__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HTCC::adc","ped")==true){
         int nsize = HTCC__adc_ped->getLength();
         vec_HTCC__adc_ped.clear();
         vec_HTCC__adc_ped.resize(nsize);
         memcpy(&vec_HTCC__adc_ped[0],HTCC__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::adc","sector")==true){
         int nsize = HTCC__adc_sector->getLength();
         vec_HTCC__adc_sector.clear();
         vec_HTCC__adc_sector.resize(nsize);
         memcpy(&vec_HTCC__adc_sector[0],HTCC__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HTCC::adc","time")==true){
         int nsize = HTCC__adc_time->getLength();
         vec_HTCC__adc_time.clear();
         vec_HTCC__adc_time.resize(nsize);
         memcpy(&vec_HTCC__adc_time[0],HTCC__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("HTCC::rec")==true){
      if(dictionary->hasEntry("HTCC::rec","dphi")==true){
         int nsize = HTCC__rec_dphi->getLength();
         vec_HTCC__rec_dphi.clear();
         vec_HTCC__rec_dphi.resize(nsize);
         memcpy(&vec_HTCC__rec_dphi[0],HTCC__rec_dphi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HTCC::rec","dtheta")==true){
         int nsize = HTCC__rec_dtheta->getLength();
         vec_HTCC__rec_dtheta.clear();
         vec_HTCC__rec_dtheta.resize(nsize);
         memcpy(&vec_HTCC__rec_dtheta[0],HTCC__rec_dtheta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HTCC::rec","id")==true){
         int nsize = HTCC__rec_id->getLength();
         vec_HTCC__rec_id.clear();
         vec_HTCC__rec_id.resize(nsize);
         memcpy(&vec_HTCC__rec_id[0],HTCC__rec_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::rec","maxphi")==true){
         int nsize = HTCC__rec_maxphi->getLength();
         vec_HTCC__rec_maxphi.clear();
         vec_HTCC__rec_maxphi.resize(nsize);
         memcpy(&vec_HTCC__rec_maxphi[0],HTCC__rec_maxphi->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::rec","maxtheta")==true){
         int nsize = HTCC__rec_maxtheta->getLength();
         vec_HTCC__rec_maxtheta.clear();
         vec_HTCC__rec_maxtheta.resize(nsize);
         memcpy(&vec_HTCC__rec_maxtheta[0],HTCC__rec_maxtheta->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::rec","minphi")==true){
         int nsize = HTCC__rec_minphi->getLength();
         vec_HTCC__rec_minphi.clear();
         vec_HTCC__rec_minphi.resize(nsize);
         memcpy(&vec_HTCC__rec_minphi[0],HTCC__rec_minphi->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::rec","mintheta")==true){
         int nsize = HTCC__rec_mintheta->getLength();
         vec_HTCC__rec_mintheta.clear();
         vec_HTCC__rec_mintheta.resize(nsize);
         memcpy(&vec_HTCC__rec_mintheta[0],HTCC__rec_mintheta->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::rec","nhits")==true){
         int nsize = HTCC__rec_nhits->getLength();
         vec_HTCC__rec_nhits.clear();
         vec_HTCC__rec_nhits.resize(nsize);
         memcpy(&vec_HTCC__rec_nhits[0],HTCC__rec_nhits->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::rec","nphe")==true){
         int nsize = HTCC__rec_nphe->getLength();
         vec_HTCC__rec_nphe.clear();
         vec_HTCC__rec_nphe.resize(nsize);
         memcpy(&vec_HTCC__rec_nphe[0],HTCC__rec_nphe->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HTCC::rec","nphi")==true){
         int nsize = HTCC__rec_nphi->getLength();
         vec_HTCC__rec_nphi.clear();
         vec_HTCC__rec_nphi.resize(nsize);
         memcpy(&vec_HTCC__rec_nphi[0],HTCC__rec_nphi->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::rec","ntheta")==true){
         int nsize = HTCC__rec_ntheta->getLength();
         vec_HTCC__rec_ntheta.clear();
         vec_HTCC__rec_ntheta.resize(nsize);
         memcpy(&vec_HTCC__rec_ntheta[0],HTCC__rec_ntheta->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::rec","phi")==true){
         int nsize = HTCC__rec_phi->getLength();
         vec_HTCC__rec_phi.clear();
         vec_HTCC__rec_phi.resize(nsize);
         memcpy(&vec_HTCC__rec_phi[0],HTCC__rec_phi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HTCC::rec","theta")==true){
         int nsize = HTCC__rec_theta->getLength();
         vec_HTCC__rec_theta.clear();
         vec_HTCC__rec_theta.resize(nsize);
         memcpy(&vec_HTCC__rec_theta[0],HTCC__rec_theta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HTCC::rec","time")==true){
         int nsize = HTCC__rec_time->getLength();
         vec_HTCC__rec_time.clear();
         vec_HTCC__rec_time.resize(nsize);
         memcpy(&vec_HTCC__rec_time[0],HTCC__rec_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HTCC::rec","x")==true){
         int nsize = HTCC__rec_x->getLength();
         vec_HTCC__rec_x.clear();
         vec_HTCC__rec_x.resize(nsize);
         memcpy(&vec_HTCC__rec_x[0],HTCC__rec_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HTCC::rec","y")==true){
         int nsize = HTCC__rec_y->getLength();
         vec_HTCC__rec_y.clear();
         vec_HTCC__rec_y.resize(nsize);
         memcpy(&vec_HTCC__rec_y[0],HTCC__rec_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HTCC::rec","z")==true){
         int nsize = HTCC__rec_z->getLength();
         vec_HTCC__rec_z.clear();
         vec_HTCC__rec_z.resize(nsize);
         memcpy(&vec_HTCC__rec_z[0],HTCC__rec_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("HTCC::tdc")==true){
      if(dictionary->hasEntry("HTCC::tdc","TDC")==true){
         int nsize = HTCC__tdc_TDC->getLength();
         vec_HTCC__tdc_TDC.clear();
         vec_HTCC__tdc_TDC.resize(nsize);
         memcpy(&vec_HTCC__tdc_TDC[0],HTCC__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("HTCC::tdc","component")==true){
         int nsize = HTCC__tdc_component->getLength();
         vec_HTCC__tdc_component.clear();
         vec_HTCC__tdc_component.resize(nsize);
         memcpy(&vec_HTCC__tdc_component[0],HTCC__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HTCC::tdc","layer")==true){
         int nsize = HTCC__tdc_layer->getLength();
         vec_HTCC__tdc_layer.clear();
         vec_HTCC__tdc_layer.resize(nsize);
         memcpy(&vec_HTCC__tdc_layer[0],HTCC__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HTCC::tdc","order")==true){
         int nsize = HTCC__tdc_order->getLength();
         vec_HTCC__tdc_order.clear();
         vec_HTCC__tdc_order.resize(nsize);
         memcpy(&vec_HTCC__tdc_order[0],HTCC__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HTCC::tdc","sector")==true){
         int nsize = HTCC__tdc_sector->getLength();
         vec_HTCC__tdc_sector.clear();
         vec_HTCC__tdc_sector.resize(nsize);
         memcpy(&vec_HTCC__tdc_sector[0],HTCC__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("HitBasedTrkg::HBClusters")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit10_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit10_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit10_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit10_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit10_ID[0],HitBasedTrkg__HBClusters_Hit10_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit11_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit11_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit11_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit11_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit11_ID[0],HitBasedTrkg__HBClusters_Hit11_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit12_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit12_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit12_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit12_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit12_ID[0],HitBasedTrkg__HBClusters_Hit12_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit1_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit1_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit1_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit1_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit1_ID[0],HitBasedTrkg__HBClusters_Hit1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit2_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit2_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit2_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit2_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit2_ID[0],HitBasedTrkg__HBClusters_Hit2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit3_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit3_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit3_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit3_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit3_ID[0],HitBasedTrkg__HBClusters_Hit3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit4_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit4_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit4_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit4_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit4_ID[0],HitBasedTrkg__HBClusters_Hit4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit5_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit5_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit5_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit5_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit5_ID[0],HitBasedTrkg__HBClusters_Hit5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit6_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit6_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit6_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit6_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit6_ID[0],HitBasedTrkg__HBClusters_Hit6_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit7_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit7_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit7_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit7_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit7_ID[0],HitBasedTrkg__HBClusters_Hit7_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit8_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit8_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit8_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit8_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit8_ID[0],HitBasedTrkg__HBClusters_Hit8_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","Hit9_ID")==true){
         int nsize = HitBasedTrkg__HBClusters_Hit9_ID->getLength();
         vec_HitBasedTrkg__HBClusters_Hit9_ID.clear();
         vec_HitBasedTrkg__HBClusters_Hit9_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_Hit9_ID[0],HitBasedTrkg__HBClusters_Hit9_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","avgWire")==true){
         int nsize = HitBasedTrkg__HBClusters_avgWire->getLength();
         vec_HitBasedTrkg__HBClusters_avgWire.clear();
         vec_HitBasedTrkg__HBClusters_avgWire.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_avgWire[0],HitBasedTrkg__HBClusters_avgWire->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitChisqProb")==true){
         int nsize = HitBasedTrkg__HBClusters_fitChisqProb->getLength();
         vec_HitBasedTrkg__HBClusters_fitChisqProb.clear();
         vec_HitBasedTrkg__HBClusters_fitChisqProb.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_fitChisqProb[0],HitBasedTrkg__HBClusters_fitChisqProb->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitInterc")==true){
         int nsize = HitBasedTrkg__HBClusters_fitInterc->getLength();
         vec_HitBasedTrkg__HBClusters_fitInterc.clear();
         vec_HitBasedTrkg__HBClusters_fitInterc.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_fitInterc[0],HitBasedTrkg__HBClusters_fitInterc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitIntercErr")==true){
         int nsize = HitBasedTrkg__HBClusters_fitIntercErr->getLength();
         vec_HitBasedTrkg__HBClusters_fitIntercErr.clear();
         vec_HitBasedTrkg__HBClusters_fitIntercErr.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_fitIntercErr[0],HitBasedTrkg__HBClusters_fitIntercErr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitSlope")==true){
         int nsize = HitBasedTrkg__HBClusters_fitSlope->getLength();
         vec_HitBasedTrkg__HBClusters_fitSlope.clear();
         vec_HitBasedTrkg__HBClusters_fitSlope.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_fitSlope[0],HitBasedTrkg__HBClusters_fitSlope->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","fitSlopeErr")==true){
         int nsize = HitBasedTrkg__HBClusters_fitSlopeErr->getLength();
         vec_HitBasedTrkg__HBClusters_fitSlopeErr.clear();
         vec_HitBasedTrkg__HBClusters_fitSlopeErr.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_fitSlopeErr[0],HitBasedTrkg__HBClusters_fitSlopeErr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","id")==true){
         int nsize = HitBasedTrkg__HBClusters_id->getLength();
         vec_HitBasedTrkg__HBClusters_id.clear();
         vec_HitBasedTrkg__HBClusters_id.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_id[0],HitBasedTrkg__HBClusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","sector")==true){
         int nsize = HitBasedTrkg__HBClusters_sector->getLength();
         vec_HitBasedTrkg__HBClusters_sector.clear();
         vec_HitBasedTrkg__HBClusters_sector.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_sector[0],HitBasedTrkg__HBClusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","size")==true){
         int nsize = HitBasedTrkg__HBClusters_size->getLength();
         vec_HitBasedTrkg__HBClusters_size.clear();
         vec_HitBasedTrkg__HBClusters_size.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_size[0],HitBasedTrkg__HBClusters_size->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","status")==true){
         int nsize = HitBasedTrkg__HBClusters_status->getLength();
         vec_HitBasedTrkg__HBClusters_status.clear();
         vec_HitBasedTrkg__HBClusters_status.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_status[0],HitBasedTrkg__HBClusters_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBClusters","superlayer")==true){
         int nsize = HitBasedTrkg__HBClusters_superlayer->getLength();
         vec_HitBasedTrkg__HBClusters_superlayer.clear();
         vec_HitBasedTrkg__HBClusters_superlayer.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBClusters_superlayer[0],HitBasedTrkg__HBClusters_superlayer->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("HitBasedTrkg::HBCrosses")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","Segment1_ID")==true){
         int nsize = HitBasedTrkg__HBCrosses_Segment1_ID->getLength();
         vec_HitBasedTrkg__HBCrosses_Segment1_ID.clear();
         vec_HitBasedTrkg__HBCrosses_Segment1_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_Segment1_ID[0],HitBasedTrkg__HBCrosses_Segment1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","Segment2_ID")==true){
         int nsize = HitBasedTrkg__HBCrosses_Segment2_ID->getLength();
         vec_HitBasedTrkg__HBCrosses_Segment2_ID.clear();
         vec_HitBasedTrkg__HBCrosses_Segment2_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_Segment2_ID[0],HitBasedTrkg__HBCrosses_Segment2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_ux")==true){
         int nsize = HitBasedTrkg__HBCrosses_err_ux->getLength();
         vec_HitBasedTrkg__HBCrosses_err_ux.clear();
         vec_HitBasedTrkg__HBCrosses_err_ux.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_err_ux[0],HitBasedTrkg__HBCrosses_err_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_uy")==true){
         int nsize = HitBasedTrkg__HBCrosses_err_uy->getLength();
         vec_HitBasedTrkg__HBCrosses_err_uy.clear();
         vec_HitBasedTrkg__HBCrosses_err_uy.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_err_uy[0],HitBasedTrkg__HBCrosses_err_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_uz")==true){
         int nsize = HitBasedTrkg__HBCrosses_err_uz->getLength();
         vec_HitBasedTrkg__HBCrosses_err_uz.clear();
         vec_HitBasedTrkg__HBCrosses_err_uz.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_err_uz[0],HitBasedTrkg__HBCrosses_err_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_x")==true){
         int nsize = HitBasedTrkg__HBCrosses_err_x->getLength();
         vec_HitBasedTrkg__HBCrosses_err_x.clear();
         vec_HitBasedTrkg__HBCrosses_err_x.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_err_x[0],HitBasedTrkg__HBCrosses_err_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_y")==true){
         int nsize = HitBasedTrkg__HBCrosses_err_y->getLength();
         vec_HitBasedTrkg__HBCrosses_err_y.clear();
         vec_HitBasedTrkg__HBCrosses_err_y.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_err_y[0],HitBasedTrkg__HBCrosses_err_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","err_z")==true){
         int nsize = HitBasedTrkg__HBCrosses_err_z->getLength();
         vec_HitBasedTrkg__HBCrosses_err_z.clear();
         vec_HitBasedTrkg__HBCrosses_err_z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_err_z[0],HitBasedTrkg__HBCrosses_err_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","id")==true){
         int nsize = HitBasedTrkg__HBCrosses_id->getLength();
         vec_HitBasedTrkg__HBCrosses_id.clear();
         vec_HitBasedTrkg__HBCrosses_id.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_id[0],HitBasedTrkg__HBCrosses_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","region")==true){
         int nsize = HitBasedTrkg__HBCrosses_region->getLength();
         vec_HitBasedTrkg__HBCrosses_region.clear();
         vec_HitBasedTrkg__HBCrosses_region.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_region[0],HitBasedTrkg__HBCrosses_region->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","sector")==true){
         int nsize = HitBasedTrkg__HBCrosses_sector->getLength();
         vec_HitBasedTrkg__HBCrosses_sector.clear();
         vec_HitBasedTrkg__HBCrosses_sector.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_sector[0],HitBasedTrkg__HBCrosses_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","status")==true){
         int nsize = HitBasedTrkg__HBCrosses_status->getLength();
         vec_HitBasedTrkg__HBCrosses_status.clear();
         vec_HitBasedTrkg__HBCrosses_status.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_status[0],HitBasedTrkg__HBCrosses_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","ux")==true){
         int nsize = HitBasedTrkg__HBCrosses_ux->getLength();
         vec_HitBasedTrkg__HBCrosses_ux.clear();
         vec_HitBasedTrkg__HBCrosses_ux.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_ux[0],HitBasedTrkg__HBCrosses_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","uy")==true){
         int nsize = HitBasedTrkg__HBCrosses_uy->getLength();
         vec_HitBasedTrkg__HBCrosses_uy.clear();
         vec_HitBasedTrkg__HBCrosses_uy.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_uy[0],HitBasedTrkg__HBCrosses_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","uz")==true){
         int nsize = HitBasedTrkg__HBCrosses_uz->getLength();
         vec_HitBasedTrkg__HBCrosses_uz.clear();
         vec_HitBasedTrkg__HBCrosses_uz.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_uz[0],HitBasedTrkg__HBCrosses_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","x")==true){
         int nsize = HitBasedTrkg__HBCrosses_x->getLength();
         vec_HitBasedTrkg__HBCrosses_x.clear();
         vec_HitBasedTrkg__HBCrosses_x.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_x[0],HitBasedTrkg__HBCrosses_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","y")==true){
         int nsize = HitBasedTrkg__HBCrosses_y->getLength();
         vec_HitBasedTrkg__HBCrosses_y.clear();
         vec_HitBasedTrkg__HBCrosses_y.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_y[0],HitBasedTrkg__HBCrosses_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBCrosses","z")==true){
         int nsize = HitBasedTrkg__HBCrosses_z->getLength();
         vec_HitBasedTrkg__HBCrosses_z.clear();
         vec_HitBasedTrkg__HBCrosses_z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBCrosses_z[0],HitBasedTrkg__HBCrosses_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("HitBasedTrkg::HBHits")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","B")==true){
         int nsize = HitBasedTrkg__HBHits_B->getLength();
         vec_HitBasedTrkg__HBHits_B.clear();
         vec_HitBasedTrkg__HBHits_B.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_B[0],HitBasedTrkg__HBHits_B->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","LR")==true){
         int nsize = HitBasedTrkg__HBHits_LR->getLength();
         vec_HitBasedTrkg__HBHits_LR.clear();
         vec_HitBasedTrkg__HBHits_LR.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_LR[0],HitBasedTrkg__HBHits_LR->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","LocX")==true){
         int nsize = HitBasedTrkg__HBHits_LocX->getLength();
         vec_HitBasedTrkg__HBHits_LocX.clear();
         vec_HitBasedTrkg__HBHits_LocX.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_LocX[0],HitBasedTrkg__HBHits_LocX->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","LocY")==true){
         int nsize = HitBasedTrkg__HBHits_LocY->getLength();
         vec_HitBasedTrkg__HBHits_LocY.clear();
         vec_HitBasedTrkg__HBHits_LocY.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_LocY[0],HitBasedTrkg__HBHits_LocY->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","TDC")==true){
         int nsize = HitBasedTrkg__HBHits_TDC->getLength();
         vec_HitBasedTrkg__HBHits_TDC.clear();
         vec_HitBasedTrkg__HBHits_TDC.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_TDC[0],HitBasedTrkg__HBHits_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","TFlight")==true){
         int nsize = HitBasedTrkg__HBHits_TFlight->getLength();
         vec_HitBasedTrkg__HBHits_TFlight.clear();
         vec_HitBasedTrkg__HBHits_TFlight.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_TFlight[0],HitBasedTrkg__HBHits_TFlight->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","TProp")==true){
         int nsize = HitBasedTrkg__HBHits_TProp->getLength();
         vec_HitBasedTrkg__HBHits_TProp.clear();
         vec_HitBasedTrkg__HBHits_TProp.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_TProp[0],HitBasedTrkg__HBHits_TProp->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","X")==true){
         int nsize = HitBasedTrkg__HBHits_X->getLength();
         vec_HitBasedTrkg__HBHits_X.clear();
         vec_HitBasedTrkg__HBHits_X.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_X[0],HitBasedTrkg__HBHits_X->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","Z")==true){
         int nsize = HitBasedTrkg__HBHits_Z->getLength();
         vec_HitBasedTrkg__HBHits_Z.clear();
         vec_HitBasedTrkg__HBHits_Z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_Z[0],HitBasedTrkg__HBHits_Z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","clusterID")==true){
         int nsize = HitBasedTrkg__HBHits_clusterID->getLength();
         vec_HitBasedTrkg__HBHits_clusterID.clear();
         vec_HitBasedTrkg__HBHits_clusterID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_clusterID[0],HitBasedTrkg__HBHits_clusterID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","docaError")==true){
         int nsize = HitBasedTrkg__HBHits_docaError->getLength();
         vec_HitBasedTrkg__HBHits_docaError.clear();
         vec_HitBasedTrkg__HBHits_docaError.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_docaError[0],HitBasedTrkg__HBHits_docaError->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","id")==true){
         int nsize = HitBasedTrkg__HBHits_id->getLength();
         vec_HitBasedTrkg__HBHits_id.clear();
         vec_HitBasedTrkg__HBHits_id.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_id[0],HitBasedTrkg__HBHits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","layer")==true){
         int nsize = HitBasedTrkg__HBHits_layer->getLength();
         vec_HitBasedTrkg__HBHits_layer.clear();
         vec_HitBasedTrkg__HBHits_layer.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_layer[0],HitBasedTrkg__HBHits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","sector")==true){
         int nsize = HitBasedTrkg__HBHits_sector->getLength();
         vec_HitBasedTrkg__HBHits_sector.clear();
         vec_HitBasedTrkg__HBHits_sector.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_sector[0],HitBasedTrkg__HBHits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","status")==true){
         int nsize = HitBasedTrkg__HBHits_status->getLength();
         vec_HitBasedTrkg__HBHits_status.clear();
         vec_HitBasedTrkg__HBHits_status.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_status[0],HitBasedTrkg__HBHits_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","superlayer")==true){
         int nsize = HitBasedTrkg__HBHits_superlayer->getLength();
         vec_HitBasedTrkg__HBHits_superlayer.clear();
         vec_HitBasedTrkg__HBHits_superlayer.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_superlayer[0],HitBasedTrkg__HBHits_superlayer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","trkDoca")==true){
         int nsize = HitBasedTrkg__HBHits_trkDoca->getLength();
         vec_HitBasedTrkg__HBHits_trkDoca.clear();
         vec_HitBasedTrkg__HBHits_trkDoca.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_trkDoca[0],HitBasedTrkg__HBHits_trkDoca->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","trkID")==true){
         int nsize = HitBasedTrkg__HBHits_trkID->getLength();
         vec_HitBasedTrkg__HBHits_trkID.clear();
         vec_HitBasedTrkg__HBHits_trkID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_trkID[0],HitBasedTrkg__HBHits_trkID->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBHits","wire")==true){
         int nsize = HitBasedTrkg__HBHits_wire->getLength();
         vec_HitBasedTrkg__HBHits_wire.clear();
         vec_HitBasedTrkg__HBHits_wire.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBHits_wire[0],HitBasedTrkg__HBHits_wire->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("HitBasedTrkg::HBSegmentTrajectory")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","layer")==true){
         int nsize = HitBasedTrkg__HBSegmentTrajectory_layer->getLength();
         vec_HitBasedTrkg__HBSegmentTrajectory_layer.clear();
         vec_HitBasedTrkg__HBSegmentTrajectory_layer.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegmentTrajectory_layer[0],HitBasedTrkg__HBSegmentTrajectory_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","matchedHitID")==true){
         int nsize = HitBasedTrkg__HBSegmentTrajectory_matchedHitID->getLength();
         vec_HitBasedTrkg__HBSegmentTrajectory_matchedHitID.clear();
         vec_HitBasedTrkg__HBSegmentTrajectory_matchedHitID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegmentTrajectory_matchedHitID[0],HitBasedTrkg__HBSegmentTrajectory_matchedHitID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","sector")==true){
         int nsize = HitBasedTrkg__HBSegmentTrajectory_sector->getLength();
         vec_HitBasedTrkg__HBSegmentTrajectory_sector.clear();
         vec_HitBasedTrkg__HBSegmentTrajectory_sector.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegmentTrajectory_sector[0],HitBasedTrkg__HBSegmentTrajectory_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","segmentID")==true){
         int nsize = HitBasedTrkg__HBSegmentTrajectory_segmentID->getLength();
         vec_HitBasedTrkg__HBSegmentTrajectory_segmentID.clear();
         vec_HitBasedTrkg__HBSegmentTrajectory_segmentID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegmentTrajectory_segmentID[0],HitBasedTrkg__HBSegmentTrajectory_segmentID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","superlayer")==true){
         int nsize = HitBasedTrkg__HBSegmentTrajectory_superlayer->getLength();
         vec_HitBasedTrkg__HBSegmentTrajectory_superlayer.clear();
         vec_HitBasedTrkg__HBSegmentTrajectory_superlayer.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegmentTrajectory_superlayer[0],HitBasedTrkg__HBSegmentTrajectory_superlayer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegmentTrajectory","trkDoca")==true){
         int nsize = HitBasedTrkg__HBSegmentTrajectory_trkDoca->getLength();
         vec_HitBasedTrkg__HBSegmentTrajectory_trkDoca.clear();
         vec_HitBasedTrkg__HBSegmentTrajectory_trkDoca.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegmentTrajectory_trkDoca[0],HitBasedTrkg__HBSegmentTrajectory_trkDoca->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("HitBasedTrkg::HBSegments")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Cluster_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Cluster_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Cluster_ID.clear();
         vec_HitBasedTrkg__HBSegments_Cluster_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Cluster_ID[0],HitBasedTrkg__HBSegments_Cluster_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit10_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit10_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit10_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit10_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit10_ID[0],HitBasedTrkg__HBSegments_Hit10_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit11_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit11_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit11_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit11_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit11_ID[0],HitBasedTrkg__HBSegments_Hit11_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit12_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit12_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit12_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit12_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit12_ID[0],HitBasedTrkg__HBSegments_Hit12_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit1_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit1_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit1_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit1_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit1_ID[0],HitBasedTrkg__HBSegments_Hit1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit2_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit2_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit2_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit2_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit2_ID[0],HitBasedTrkg__HBSegments_Hit2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit3_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit3_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit3_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit3_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit3_ID[0],HitBasedTrkg__HBSegments_Hit3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit4_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit4_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit4_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit4_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit4_ID[0],HitBasedTrkg__HBSegments_Hit4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit5_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit5_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit5_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit5_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit5_ID[0],HitBasedTrkg__HBSegments_Hit5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit6_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit6_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit6_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit6_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit6_ID[0],HitBasedTrkg__HBSegments_Hit6_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit7_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit7_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit7_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit7_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit7_ID[0],HitBasedTrkg__HBSegments_Hit7_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit8_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit8_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit8_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit8_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit8_ID[0],HitBasedTrkg__HBSegments_Hit8_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","Hit9_ID")==true){
         int nsize = HitBasedTrkg__HBSegments_Hit9_ID->getLength();
         vec_HitBasedTrkg__HBSegments_Hit9_ID.clear();
         vec_HitBasedTrkg__HBSegments_Hit9_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_Hit9_ID[0],HitBasedTrkg__HBSegments_Hit9_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","SegEndPoint1X")==true){
         int nsize = HitBasedTrkg__HBSegments_SegEndPoint1X->getLength();
         vec_HitBasedTrkg__HBSegments_SegEndPoint1X.clear();
         vec_HitBasedTrkg__HBSegments_SegEndPoint1X.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_SegEndPoint1X[0],HitBasedTrkg__HBSegments_SegEndPoint1X->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","SegEndPoint1Z")==true){
         int nsize = HitBasedTrkg__HBSegments_SegEndPoint1Z->getLength();
         vec_HitBasedTrkg__HBSegments_SegEndPoint1Z.clear();
         vec_HitBasedTrkg__HBSegments_SegEndPoint1Z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_SegEndPoint1Z[0],HitBasedTrkg__HBSegments_SegEndPoint1Z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","SegEndPoint2X")==true){
         int nsize = HitBasedTrkg__HBSegments_SegEndPoint2X->getLength();
         vec_HitBasedTrkg__HBSegments_SegEndPoint2X.clear();
         vec_HitBasedTrkg__HBSegments_SegEndPoint2X.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_SegEndPoint2X[0],HitBasedTrkg__HBSegments_SegEndPoint2X->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","SegEndPoint2Z")==true){
         int nsize = HitBasedTrkg__HBSegments_SegEndPoint2Z->getLength();
         vec_HitBasedTrkg__HBSegments_SegEndPoint2Z.clear();
         vec_HitBasedTrkg__HBSegments_SegEndPoint2Z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_SegEndPoint2Z[0],HitBasedTrkg__HBSegments_SegEndPoint2Z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","avgWire")==true){
         int nsize = HitBasedTrkg__HBSegments_avgWire->getLength();
         vec_HitBasedTrkg__HBSegments_avgWire.clear();
         vec_HitBasedTrkg__HBSegments_avgWire.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_avgWire[0],HitBasedTrkg__HBSegments_avgWire->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitChisqProb")==true){
         int nsize = HitBasedTrkg__HBSegments_fitChisqProb->getLength();
         vec_HitBasedTrkg__HBSegments_fitChisqProb.clear();
         vec_HitBasedTrkg__HBSegments_fitChisqProb.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_fitChisqProb[0],HitBasedTrkg__HBSegments_fitChisqProb->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitInterc")==true){
         int nsize = HitBasedTrkg__HBSegments_fitInterc->getLength();
         vec_HitBasedTrkg__HBSegments_fitInterc.clear();
         vec_HitBasedTrkg__HBSegments_fitInterc.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_fitInterc[0],HitBasedTrkg__HBSegments_fitInterc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitIntercErr")==true){
         int nsize = HitBasedTrkg__HBSegments_fitIntercErr->getLength();
         vec_HitBasedTrkg__HBSegments_fitIntercErr.clear();
         vec_HitBasedTrkg__HBSegments_fitIntercErr.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_fitIntercErr[0],HitBasedTrkg__HBSegments_fitIntercErr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitSlope")==true){
         int nsize = HitBasedTrkg__HBSegments_fitSlope->getLength();
         vec_HitBasedTrkg__HBSegments_fitSlope.clear();
         vec_HitBasedTrkg__HBSegments_fitSlope.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_fitSlope[0],HitBasedTrkg__HBSegments_fitSlope->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","fitSlopeErr")==true){
         int nsize = HitBasedTrkg__HBSegments_fitSlopeErr->getLength();
         vec_HitBasedTrkg__HBSegments_fitSlopeErr.clear();
         vec_HitBasedTrkg__HBSegments_fitSlopeErr.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_fitSlopeErr[0],HitBasedTrkg__HBSegments_fitSlopeErr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","id")==true){
         int nsize = HitBasedTrkg__HBSegments_id->getLength();
         vec_HitBasedTrkg__HBSegments_id.clear();
         vec_HitBasedTrkg__HBSegments_id.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_id[0],HitBasedTrkg__HBSegments_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","sector")==true){
         int nsize = HitBasedTrkg__HBSegments_sector->getLength();
         vec_HitBasedTrkg__HBSegments_sector.clear();
         vec_HitBasedTrkg__HBSegments_sector.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_sector[0],HitBasedTrkg__HBSegments_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","size")==true){
         int nsize = HitBasedTrkg__HBSegments_size->getLength();
         vec_HitBasedTrkg__HBSegments_size.clear();
         vec_HitBasedTrkg__HBSegments_size.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_size[0],HitBasedTrkg__HBSegments_size->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","status")==true){
         int nsize = HitBasedTrkg__HBSegments_status->getLength();
         vec_HitBasedTrkg__HBSegments_status.clear();
         vec_HitBasedTrkg__HBSegments_status.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_status[0],HitBasedTrkg__HBSegments_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBSegments","superlayer")==true){
         int nsize = HitBasedTrkg__HBSegments_superlayer->getLength();
         vec_HitBasedTrkg__HBSegments_superlayer.clear();
         vec_HitBasedTrkg__HBSegments_superlayer.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBSegments_superlayer[0],HitBasedTrkg__HBSegments_superlayer->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("HitBasedTrkg::HBTracks")==true){
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Cross1_ID")==true){
         int nsize = HitBasedTrkg__HBTracks_Cross1_ID->getLength();
         vec_HitBasedTrkg__HBTracks_Cross1_ID.clear();
         vec_HitBasedTrkg__HBTracks_Cross1_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_Cross1_ID[0],HitBasedTrkg__HBTracks_Cross1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Cross2_ID")==true){
         int nsize = HitBasedTrkg__HBTracks_Cross2_ID->getLength();
         vec_HitBasedTrkg__HBTracks_Cross2_ID.clear();
         vec_HitBasedTrkg__HBTracks_Cross2_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_Cross2_ID[0],HitBasedTrkg__HBTracks_Cross2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Cross3_ID")==true){
         int nsize = HitBasedTrkg__HBTracks_Cross3_ID->getLength();
         vec_HitBasedTrkg__HBTracks_Cross3_ID.clear();
         vec_HitBasedTrkg__HBTracks_Cross3_ID.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_Cross3_ID[0],HitBasedTrkg__HBTracks_Cross3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Vtx0_x")==true){
         int nsize = HitBasedTrkg__HBTracks_Vtx0_x->getLength();
         vec_HitBasedTrkg__HBTracks_Vtx0_x.clear();
         vec_HitBasedTrkg__HBTracks_Vtx0_x.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_Vtx0_x[0],HitBasedTrkg__HBTracks_Vtx0_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Vtx0_y")==true){
         int nsize = HitBasedTrkg__HBTracks_Vtx0_y->getLength();
         vec_HitBasedTrkg__HBTracks_Vtx0_y.clear();
         vec_HitBasedTrkg__HBTracks_Vtx0_y.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_Vtx0_y[0],HitBasedTrkg__HBTracks_Vtx0_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","Vtx0_z")==true){
         int nsize = HitBasedTrkg__HBTracks_Vtx0_z->getLength();
         vec_HitBasedTrkg__HBTracks_Vtx0_z.clear();
         vec_HitBasedTrkg__HBTracks_Vtx0_z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_Vtx0_z[0],HitBasedTrkg__HBTracks_Vtx0_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_ux")==true){
         int nsize = HitBasedTrkg__HBTracks_c1_ux->getLength();
         vec_HitBasedTrkg__HBTracks_c1_ux.clear();
         vec_HitBasedTrkg__HBTracks_c1_ux.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c1_ux[0],HitBasedTrkg__HBTracks_c1_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_uy")==true){
         int nsize = HitBasedTrkg__HBTracks_c1_uy->getLength();
         vec_HitBasedTrkg__HBTracks_c1_uy.clear();
         vec_HitBasedTrkg__HBTracks_c1_uy.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c1_uy[0],HitBasedTrkg__HBTracks_c1_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_uz")==true){
         int nsize = HitBasedTrkg__HBTracks_c1_uz->getLength();
         vec_HitBasedTrkg__HBTracks_c1_uz.clear();
         vec_HitBasedTrkg__HBTracks_c1_uz.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c1_uz[0],HitBasedTrkg__HBTracks_c1_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_x")==true){
         int nsize = HitBasedTrkg__HBTracks_c1_x->getLength();
         vec_HitBasedTrkg__HBTracks_c1_x.clear();
         vec_HitBasedTrkg__HBTracks_c1_x.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c1_x[0],HitBasedTrkg__HBTracks_c1_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_y")==true){
         int nsize = HitBasedTrkg__HBTracks_c1_y->getLength();
         vec_HitBasedTrkg__HBTracks_c1_y.clear();
         vec_HitBasedTrkg__HBTracks_c1_y.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c1_y[0],HitBasedTrkg__HBTracks_c1_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c1_z")==true){
         int nsize = HitBasedTrkg__HBTracks_c1_z->getLength();
         vec_HitBasedTrkg__HBTracks_c1_z.clear();
         vec_HitBasedTrkg__HBTracks_c1_z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c1_z[0],HitBasedTrkg__HBTracks_c1_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_ux")==true){
         int nsize = HitBasedTrkg__HBTracks_c3_ux->getLength();
         vec_HitBasedTrkg__HBTracks_c3_ux.clear();
         vec_HitBasedTrkg__HBTracks_c3_ux.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c3_ux[0],HitBasedTrkg__HBTracks_c3_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_uy")==true){
         int nsize = HitBasedTrkg__HBTracks_c3_uy->getLength();
         vec_HitBasedTrkg__HBTracks_c3_uy.clear();
         vec_HitBasedTrkg__HBTracks_c3_uy.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c3_uy[0],HitBasedTrkg__HBTracks_c3_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_uz")==true){
         int nsize = HitBasedTrkg__HBTracks_c3_uz->getLength();
         vec_HitBasedTrkg__HBTracks_c3_uz.clear();
         vec_HitBasedTrkg__HBTracks_c3_uz.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c3_uz[0],HitBasedTrkg__HBTracks_c3_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_x")==true){
         int nsize = HitBasedTrkg__HBTracks_c3_x->getLength();
         vec_HitBasedTrkg__HBTracks_c3_x.clear();
         vec_HitBasedTrkg__HBTracks_c3_x.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c3_x[0],HitBasedTrkg__HBTracks_c3_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_y")==true){
         int nsize = HitBasedTrkg__HBTracks_c3_y->getLength();
         vec_HitBasedTrkg__HBTracks_c3_y.clear();
         vec_HitBasedTrkg__HBTracks_c3_y.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c3_y[0],HitBasedTrkg__HBTracks_c3_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","c3_z")==true){
         int nsize = HitBasedTrkg__HBTracks_c3_z->getLength();
         vec_HitBasedTrkg__HBTracks_c3_z.clear();
         vec_HitBasedTrkg__HBTracks_c3_z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_c3_z[0],HitBasedTrkg__HBTracks_c3_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","chi2")==true){
         int nsize = HitBasedTrkg__HBTracks_chi2->getLength();
         vec_HitBasedTrkg__HBTracks_chi2.clear();
         vec_HitBasedTrkg__HBTracks_chi2.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_chi2[0],HitBasedTrkg__HBTracks_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","id")==true){
         int nsize = HitBasedTrkg__HBTracks_id->getLength();
         vec_HitBasedTrkg__HBTracks_id.clear();
         vec_HitBasedTrkg__HBTracks_id.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_id[0],HitBasedTrkg__HBTracks_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","ndf")==true){
         int nsize = HitBasedTrkg__HBTracks_ndf->getLength();
         vec_HitBasedTrkg__HBTracks_ndf.clear();
         vec_HitBasedTrkg__HBTracks_ndf.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_ndf[0],HitBasedTrkg__HBTracks_ndf->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","p0_x")==true){
         int nsize = HitBasedTrkg__HBTracks_p0_x->getLength();
         vec_HitBasedTrkg__HBTracks_p0_x.clear();
         vec_HitBasedTrkg__HBTracks_p0_x.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_p0_x[0],HitBasedTrkg__HBTracks_p0_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","p0_y")==true){
         int nsize = HitBasedTrkg__HBTracks_p0_y->getLength();
         vec_HitBasedTrkg__HBTracks_p0_y.clear();
         vec_HitBasedTrkg__HBTracks_p0_y.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_p0_y[0],HitBasedTrkg__HBTracks_p0_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","p0_z")==true){
         int nsize = HitBasedTrkg__HBTracks_p0_z->getLength();
         vec_HitBasedTrkg__HBTracks_p0_z.clear();
         vec_HitBasedTrkg__HBTracks_p0_z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_p0_z[0],HitBasedTrkg__HBTracks_p0_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","pathlength")==true){
         int nsize = HitBasedTrkg__HBTracks_pathlength->getLength();
         vec_HitBasedTrkg__HBTracks_pathlength.clear();
         vec_HitBasedTrkg__HBTracks_pathlength.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_pathlength[0],HitBasedTrkg__HBTracks_pathlength->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","q")==true){
         int nsize = HitBasedTrkg__HBTracks_q->getLength();
         vec_HitBasedTrkg__HBTracks_q.clear();
         vec_HitBasedTrkg__HBTracks_q.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_q[0],HitBasedTrkg__HBTracks_q->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","sector")==true){
         int nsize = HitBasedTrkg__HBTracks_sector->getLength();
         vec_HitBasedTrkg__HBTracks_sector.clear();
         vec_HitBasedTrkg__HBTracks_sector.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_sector[0],HitBasedTrkg__HBTracks_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","status")==true){
         int nsize = HitBasedTrkg__HBTracks_status->getLength();
         vec_HitBasedTrkg__HBTracks_status.clear();
         vec_HitBasedTrkg__HBTracks_status.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_status[0],HitBasedTrkg__HBTracks_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_px")==true){
         int nsize = HitBasedTrkg__HBTracks_t1_px->getLength();
         vec_HitBasedTrkg__HBTracks_t1_px.clear();
         vec_HitBasedTrkg__HBTracks_t1_px.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_t1_px[0],HitBasedTrkg__HBTracks_t1_px->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_py")==true){
         int nsize = HitBasedTrkg__HBTracks_t1_py->getLength();
         vec_HitBasedTrkg__HBTracks_t1_py.clear();
         vec_HitBasedTrkg__HBTracks_t1_py.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_t1_py[0],HitBasedTrkg__HBTracks_t1_py->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_pz")==true){
         int nsize = HitBasedTrkg__HBTracks_t1_pz->getLength();
         vec_HitBasedTrkg__HBTracks_t1_pz.clear();
         vec_HitBasedTrkg__HBTracks_t1_pz.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_t1_pz[0],HitBasedTrkg__HBTracks_t1_pz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_x")==true){
         int nsize = HitBasedTrkg__HBTracks_t1_x->getLength();
         vec_HitBasedTrkg__HBTracks_t1_x.clear();
         vec_HitBasedTrkg__HBTracks_t1_x.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_t1_x[0],HitBasedTrkg__HBTracks_t1_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_y")==true){
         int nsize = HitBasedTrkg__HBTracks_t1_y->getLength();
         vec_HitBasedTrkg__HBTracks_t1_y.clear();
         vec_HitBasedTrkg__HBTracks_t1_y.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_t1_y[0],HitBasedTrkg__HBTracks_t1_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("HitBasedTrkg::HBTracks","t1_z")==true){
         int nsize = HitBasedTrkg__HBTracks_t1_z->getLength();
         vec_HitBasedTrkg__HBTracks_t1_z.clear();
         vec_HitBasedTrkg__HBTracks_t1_z.resize(nsize);
         memcpy(&vec_HitBasedTrkg__HBTracks_t1_z[0],HitBasedTrkg__HBTracks_t1_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("LTCC::adc")==true){
      if(dictionary->hasEntry("LTCC::adc","ADC")==true){
         int nsize = LTCC__adc_ADC->getLength();
         vec_LTCC__adc_ADC.clear();
         vec_LTCC__adc_ADC.resize(nsize);
         memcpy(&vec_LTCC__adc_ADC[0],LTCC__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("LTCC::adc","component")==true){
         int nsize = LTCC__adc_component->getLength();
         vec_LTCC__adc_component.clear();
         vec_LTCC__adc_component.resize(nsize);
         memcpy(&vec_LTCC__adc_component[0],LTCC__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("LTCC::adc","layer")==true){
         int nsize = LTCC__adc_layer->getLength();
         vec_LTCC__adc_layer.clear();
         vec_LTCC__adc_layer.resize(nsize);
         memcpy(&vec_LTCC__adc_layer[0],LTCC__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("LTCC::adc","order")==true){
         int nsize = LTCC__adc_order->getLength();
         vec_LTCC__adc_order.clear();
         vec_LTCC__adc_order.resize(nsize);
         memcpy(&vec_LTCC__adc_order[0],LTCC__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("LTCC::adc","ped")==true){
         int nsize = LTCC__adc_ped->getLength();
         vec_LTCC__adc_ped.clear();
         vec_LTCC__adc_ped.resize(nsize);
         memcpy(&vec_LTCC__adc_ped[0],LTCC__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("LTCC::adc","sector")==true){
         int nsize = LTCC__adc_sector->getLength();
         vec_LTCC__adc_sector.clear();
         vec_LTCC__adc_sector.resize(nsize);
         memcpy(&vec_LTCC__adc_sector[0],LTCC__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("LTCC::adc","time")==true){
         int nsize = LTCC__adc_time->getLength();
         vec_LTCC__adc_time.clear();
         vec_LTCC__adc_time.resize(nsize);
         memcpy(&vec_LTCC__adc_time[0],LTCC__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("LTCC::clusters")==true){
      if(dictionary->hasEntry("LTCC::clusters","id")==true){
         int nsize = LTCC__clusters_id->getLength();
         vec_LTCC__clusters_id.clear();
         vec_LTCC__clusters_id.resize(nsize);
         memcpy(&vec_LTCC__clusters_id[0],LTCC__clusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("LTCC::clusters","maxPhi")==true){
         int nsize = LTCC__clusters_maxPhi->getLength();
         vec_LTCC__clusters_maxPhi.clear();
         vec_LTCC__clusters_maxPhi.resize(nsize);
         memcpy(&vec_LTCC__clusters_maxPhi[0],LTCC__clusters_maxPhi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("LTCC::clusters","maxTheta")==true){
         int nsize = LTCC__clusters_maxTheta->getLength();
         vec_LTCC__clusters_maxTheta.clear();
         vec_LTCC__clusters_maxTheta.resize(nsize);
         memcpy(&vec_LTCC__clusters_maxTheta[0],LTCC__clusters_maxTheta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("LTCC::clusters","minPhi")==true){
         int nsize = LTCC__clusters_minPhi->getLength();
         vec_LTCC__clusters_minPhi.clear();
         vec_LTCC__clusters_minPhi.resize(nsize);
         memcpy(&vec_LTCC__clusters_minPhi[0],LTCC__clusters_minPhi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("LTCC::clusters","minTheta")==true){
         int nsize = LTCC__clusters_minTheta->getLength();
         vec_LTCC__clusters_minTheta.clear();
         vec_LTCC__clusters_minTheta.resize(nsize);
         memcpy(&vec_LTCC__clusters_minTheta[0],LTCC__clusters_minTheta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("LTCC::clusters","nHits")==true){
         int nsize = LTCC__clusters_nHits->getLength();
         vec_LTCC__clusters_nHits.clear();
         vec_LTCC__clusters_nHits.resize(nsize);
         memcpy(&vec_LTCC__clusters_nHits[0],LTCC__clusters_nHits->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("LTCC::clusters","nphe")==true){
         int nsize = LTCC__clusters_nphe->getLength();
         vec_LTCC__clusters_nphe.clear();
         vec_LTCC__clusters_nphe.resize(nsize);
         memcpy(&vec_LTCC__clusters_nphe[0],LTCC__clusters_nphe->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("LTCC::clusters","sector")==true){
         int nsize = LTCC__clusters_sector->getLength();
         vec_LTCC__clusters_sector.clear();
         vec_LTCC__clusters_sector.resize(nsize);
         memcpy(&vec_LTCC__clusters_sector[0],LTCC__clusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("LTCC::clusters","segment")==true){
         int nsize = LTCC__clusters_segment->getLength();
         vec_LTCC__clusters_segment.clear();
         vec_LTCC__clusters_segment.resize(nsize);
         memcpy(&vec_LTCC__clusters_segment[0],LTCC__clusters_segment->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("LTCC::clusters","status")==true){
         int nsize = LTCC__clusters_status->getLength();
         vec_LTCC__clusters_status.clear();
         vec_LTCC__clusters_status.resize(nsize);
         memcpy(&vec_LTCC__clusters_status[0],LTCC__clusters_status->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("LTCC::clusters","time")==true){
         int nsize = LTCC__clusters_time->getLength();
         vec_LTCC__clusters_time.clear();
         vec_LTCC__clusters_time.resize(nsize);
         memcpy(&vec_LTCC__clusters_time[0],LTCC__clusters_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("LTCC::clusters","x")==true){
         int nsize = LTCC__clusters_x->getLength();
         vec_LTCC__clusters_x.clear();
         vec_LTCC__clusters_x.resize(nsize);
         memcpy(&vec_LTCC__clusters_x[0],LTCC__clusters_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("LTCC::clusters","y")==true){
         int nsize = LTCC__clusters_y->getLength();
         vec_LTCC__clusters_y.clear();
         vec_LTCC__clusters_y.resize(nsize);
         memcpy(&vec_LTCC__clusters_y[0],LTCC__clusters_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("LTCC::clusters","z")==true){
         int nsize = LTCC__clusters_z->getLength();
         vec_LTCC__clusters_z.clear();
         vec_LTCC__clusters_z.resize(nsize);
         memcpy(&vec_LTCC__clusters_z[0],LTCC__clusters_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("LTCC::tdc")==true){
      if(dictionary->hasEntry("LTCC::tdc","TDC")==true){
         int nsize = LTCC__tdc_TDC->getLength();
         vec_LTCC__tdc_TDC.clear();
         vec_LTCC__tdc_TDC.resize(nsize);
         memcpy(&vec_LTCC__tdc_TDC[0],LTCC__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("LTCC::tdc","component")==true){
         int nsize = LTCC__tdc_component->getLength();
         vec_LTCC__tdc_component.clear();
         vec_LTCC__tdc_component.resize(nsize);
         memcpy(&vec_LTCC__tdc_component[0],LTCC__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("LTCC::tdc","layer")==true){
         int nsize = LTCC__tdc_layer->getLength();
         vec_LTCC__tdc_layer.clear();
         vec_LTCC__tdc_layer.resize(nsize);
         memcpy(&vec_LTCC__tdc_layer[0],LTCC__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("LTCC::tdc","order")==true){
         int nsize = LTCC__tdc_order->getLength();
         vec_LTCC__tdc_order.clear();
         vec_LTCC__tdc_order.resize(nsize);
         memcpy(&vec_LTCC__tdc_order[0],LTCC__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("LTCC::tdc","sector")==true){
         int nsize = LTCC__tdc_sector->getLength();
         vec_LTCC__tdc_sector.clear();
         vec_LTCC__tdc_sector.resize(nsize);
         memcpy(&vec_LTCC__tdc_sector[0],LTCC__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("MC::Event")==true){
      if(dictionary->hasEntry("MC::Event","atarget")==true){
         int nsize = MC__Event_atarget->getLength();
         vec_MC__Event_atarget.clear();
         vec_MC__Event_atarget.resize(nsize);
         memcpy(&vec_MC__Event_atarget[0],MC__Event_atarget->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("MC::Event","btype")==true){
         int nsize = MC__Event_btype->getLength();
         vec_MC__Event_btype.clear();
         vec_MC__Event_btype.resize(nsize);
         memcpy(&vec_MC__Event_btype[0],MC__Event_btype->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("MC::Event","ebeam")==true){
         int nsize = MC__Event_ebeam->getLength();
         vec_MC__Event_ebeam.clear();
         vec_MC__Event_ebeam.resize(nsize);
         memcpy(&vec_MC__Event_ebeam[0],MC__Event_ebeam->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Event","npart")==true){
         int nsize = MC__Event_npart->getLength();
         vec_MC__Event_npart.clear();
         vec_MC__Event_npart.resize(nsize);
         memcpy(&vec_MC__Event_npart[0],MC__Event_npart->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("MC::Event","pbeam")==true){
         int nsize = MC__Event_pbeam->getLength();
         vec_MC__Event_pbeam.clear();
         vec_MC__Event_pbeam.resize(nsize);
         memcpy(&vec_MC__Event_pbeam[0],MC__Event_pbeam->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Event","processid")==true){
         int nsize = MC__Event_processid->getLength();
         vec_MC__Event_processid.clear();
         vec_MC__Event_processid.resize(nsize);
         memcpy(&vec_MC__Event_processid[0],MC__Event_processid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("MC::Event","ptarget")==true){
         int nsize = MC__Event_ptarget->getLength();
         vec_MC__Event_ptarget.clear();
         vec_MC__Event_ptarget.resize(nsize);
         memcpy(&vec_MC__Event_ptarget[0],MC__Event_ptarget->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Event","targetid")==true){
         int nsize = MC__Event_targetid->getLength();
         vec_MC__Event_targetid.clear();
         vec_MC__Event_targetid.resize(nsize);
         memcpy(&vec_MC__Event_targetid[0],MC__Event_targetid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("MC::Event","weight")==true){
         int nsize = MC__Event_weight->getLength();
         vec_MC__Event_weight.clear();
         vec_MC__Event_weight.resize(nsize);
         memcpy(&vec_MC__Event_weight[0],MC__Event_weight->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Event","ztarget")==true){
         int nsize = MC__Event_ztarget->getLength();
         vec_MC__Event_ztarget.clear();
         vec_MC__Event_ztarget.resize(nsize);
         memcpy(&vec_MC__Event_ztarget[0],MC__Event_ztarget->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("MC::Header")==true){
      if(dictionary->hasEntry("MC::Header","event")==true){
         int nsize = MC__Header_event->getLength();
         vec_MC__Header_event.clear();
         vec_MC__Header_event.resize(nsize);
         memcpy(&vec_MC__Header_event[0],MC__Header_event->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::Header","helicity")==true){
         int nsize = MC__Header_helicity->getLength();
         vec_MC__Header_helicity.clear();
         vec_MC__Header_helicity.resize(nsize);
         memcpy(&vec_MC__Header_helicity[0],MC__Header_helicity->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Header","run")==true){
         int nsize = MC__Header_run->getLength();
         vec_MC__Header_run.clear();
         vec_MC__Header_run.resize(nsize);
         memcpy(&vec_MC__Header_run[0],MC__Header_run->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::Header","type")==true){
         int nsize = MC__Header_type->getLength();
         vec_MC__Header_type.clear();
         vec_MC__Header_type.resize(nsize);
         memcpy(&vec_MC__Header_type[0],MC__Header_type->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("MC::Lund")==true){
      if(dictionary->hasEntry("MC::Lund","E")==true){
         int nsize = MC__Lund_E->getLength();
         vec_MC__Lund_E.clear();
         vec_MC__Lund_E.resize(nsize);
         memcpy(&vec_MC__Lund_E[0],MC__Lund_E->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Lund","daughter")==true){
         int nsize = MC__Lund_daughter->getLength();
         vec_MC__Lund_daughter.clear();
         vec_MC__Lund_daughter.resize(nsize);
         memcpy(&vec_MC__Lund_daughter[0],MC__Lund_daughter->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("MC::Lund","index")==true){
         int nsize = MC__Lund_index->getLength();
         vec_MC__Lund_index.clear();
         vec_MC__Lund_index.resize(nsize);
         memcpy(&vec_MC__Lund_index[0],MC__Lund_index->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("MC::Lund","ltime")==true){
         int nsize = MC__Lund_ltime->getLength();
         vec_MC__Lund_ltime.clear();
         vec_MC__Lund_ltime.resize(nsize);
         memcpy(&vec_MC__Lund_ltime[0],MC__Lund_ltime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Lund","mass")==true){
         int nsize = MC__Lund_mass->getLength();
         vec_MC__Lund_mass.clear();
         vec_MC__Lund_mass.resize(nsize);
         memcpy(&vec_MC__Lund_mass[0],MC__Lund_mass->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Lund","parent")==true){
         int nsize = MC__Lund_parent->getLength();
         vec_MC__Lund_parent.clear();
         vec_MC__Lund_parent.resize(nsize);
         memcpy(&vec_MC__Lund_parent[0],MC__Lund_parent->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("MC::Lund","pid")==true){
         int nsize = MC__Lund_pid->getLength();
         vec_MC__Lund_pid.clear();
         vec_MC__Lund_pid.resize(nsize);
         memcpy(&vec_MC__Lund_pid[0],MC__Lund_pid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::Lund","px")==true){
         int nsize = MC__Lund_px->getLength();
         vec_MC__Lund_px.clear();
         vec_MC__Lund_px.resize(nsize);
         memcpy(&vec_MC__Lund_px[0],MC__Lund_px->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Lund","py")==true){
         int nsize = MC__Lund_py->getLength();
         vec_MC__Lund_py.clear();
         vec_MC__Lund_py.resize(nsize);
         memcpy(&vec_MC__Lund_py[0],MC__Lund_py->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Lund","pz")==true){
         int nsize = MC__Lund_pz->getLength();
         vec_MC__Lund_pz.clear();
         vec_MC__Lund_pz.resize(nsize);
         memcpy(&vec_MC__Lund_pz[0],MC__Lund_pz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Lund","type")==true){
         int nsize = MC__Lund_type->getLength();
         vec_MC__Lund_type.clear();
         vec_MC__Lund_type.resize(nsize);
         memcpy(&vec_MC__Lund_type[0],MC__Lund_type->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("MC::Lund","vx")==true){
         int nsize = MC__Lund_vx->getLength();
         vec_MC__Lund_vx.clear();
         vec_MC__Lund_vx.resize(nsize);
         memcpy(&vec_MC__Lund_vx[0],MC__Lund_vx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Lund","vy")==true){
         int nsize = MC__Lund_vy->getLength();
         vec_MC__Lund_vy.clear();
         vec_MC__Lund_vy.resize(nsize);
         memcpy(&vec_MC__Lund_vy[0],MC__Lund_vy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Lund","vz")==true){
         int nsize = MC__Lund_vz->getLength();
         vec_MC__Lund_vz.clear();
         vec_MC__Lund_vz.resize(nsize);
         memcpy(&vec_MC__Lund_vz[0],MC__Lund_vz->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("MC::Particle")==true){
      if(dictionary->hasEntry("MC::Particle","pid")==true){
         int nsize = MC__Particle_pid->getLength();
         vec_MC__Particle_pid.clear();
         vec_MC__Particle_pid.resize(nsize);
         memcpy(&vec_MC__Particle_pid[0],MC__Particle_pid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::Particle","px")==true){
         int nsize = MC__Particle_px->getLength();
         vec_MC__Particle_px.clear();
         vec_MC__Particle_px.resize(nsize);
         memcpy(&vec_MC__Particle_px[0],MC__Particle_px->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Particle","py")==true){
         int nsize = MC__Particle_py->getLength();
         vec_MC__Particle_py.clear();
         vec_MC__Particle_py.resize(nsize);
         memcpy(&vec_MC__Particle_py[0],MC__Particle_py->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Particle","pz")==true){
         int nsize = MC__Particle_pz->getLength();
         vec_MC__Particle_pz.clear();
         vec_MC__Particle_pz.resize(nsize);
         memcpy(&vec_MC__Particle_pz[0],MC__Particle_pz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Particle","vt")==true){
         int nsize = MC__Particle_vt->getLength();
         vec_MC__Particle_vt.clear();
         vec_MC__Particle_vt.resize(nsize);
         memcpy(&vec_MC__Particle_vt[0],MC__Particle_vt->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Particle","vx")==true){
         int nsize = MC__Particle_vx->getLength();
         vec_MC__Particle_vx.clear();
         vec_MC__Particle_vx.resize(nsize);
         memcpy(&vec_MC__Particle_vx[0],MC__Particle_vx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Particle","vy")==true){
         int nsize = MC__Particle_vy->getLength();
         vec_MC__Particle_vy.clear();
         vec_MC__Particle_vy.resize(nsize);
         memcpy(&vec_MC__Particle_vy[0],MC__Particle_vy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::Particle","vz")==true){
         int nsize = MC__Particle_vz->getLength();
         vec_MC__Particle_vz.clear();
         vec_MC__Particle_vz.resize(nsize);
         memcpy(&vec_MC__Particle_vz[0],MC__Particle_vz->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("MC::True")==true){
      if(dictionary->hasEntry("MC::True","avgLx")==true){
         int nsize = MC__True_avgLx->getLength();
         vec_MC__True_avgLx.clear();
         vec_MC__True_avgLx.resize(nsize);
         memcpy(&vec_MC__True_avgLx[0],MC__True_avgLx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","avgLy")==true){
         int nsize = MC__True_avgLy->getLength();
         vec_MC__True_avgLy.clear();
         vec_MC__True_avgLy.resize(nsize);
         memcpy(&vec_MC__True_avgLy[0],MC__True_avgLy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","avgLz")==true){
         int nsize = MC__True_avgLz->getLength();
         vec_MC__True_avgLz.clear();
         vec_MC__True_avgLz.resize(nsize);
         memcpy(&vec_MC__True_avgLz[0],MC__True_avgLz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","avgT")==true){
         int nsize = MC__True_avgT->getLength();
         vec_MC__True_avgT.clear();
         vec_MC__True_avgT.resize(nsize);
         memcpy(&vec_MC__True_avgT[0],MC__True_avgT->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","avgX")==true){
         int nsize = MC__True_avgX->getLength();
         vec_MC__True_avgX.clear();
         vec_MC__True_avgX.resize(nsize);
         memcpy(&vec_MC__True_avgX[0],MC__True_avgX->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","avgY")==true){
         int nsize = MC__True_avgY->getLength();
         vec_MC__True_avgY.clear();
         vec_MC__True_avgY.resize(nsize);
         memcpy(&vec_MC__True_avgY[0],MC__True_avgY->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","avgZ")==true){
         int nsize = MC__True_avgZ->getLength();
         vec_MC__True_avgZ.clear();
         vec_MC__True_avgZ.resize(nsize);
         memcpy(&vec_MC__True_avgZ[0],MC__True_avgZ->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","detector")==true){
         int nsize = MC__True_detector->getLength();
         vec_MC__True_detector.clear();
         vec_MC__True_detector.resize(nsize);
         memcpy(&vec_MC__True_detector[0],MC__True_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("MC::True","hitn")==true){
         int nsize = MC__True_hitn->getLength();
         vec_MC__True_hitn.clear();
         vec_MC__True_hitn.resize(nsize);
         memcpy(&vec_MC__True_hitn[0],MC__True_hitn->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::True","mpid")==true){
         int nsize = MC__True_mpid->getLength();
         vec_MC__True_mpid.clear();
         vec_MC__True_mpid.resize(nsize);
         memcpy(&vec_MC__True_mpid[0],MC__True_mpid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::True","mtid")==true){
         int nsize = MC__True_mtid->getLength();
         vec_MC__True_mtid.clear();
         vec_MC__True_mtid.resize(nsize);
         memcpy(&vec_MC__True_mtid[0],MC__True_mtid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::True","mvx")==true){
         int nsize = MC__True_mvx->getLength();
         vec_MC__True_mvx.clear();
         vec_MC__True_mvx.resize(nsize);
         memcpy(&vec_MC__True_mvx[0],MC__True_mvx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","mvy")==true){
         int nsize = MC__True_mvy->getLength();
         vec_MC__True_mvy.clear();
         vec_MC__True_mvy.resize(nsize);
         memcpy(&vec_MC__True_mvy[0],MC__True_mvy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","mvz")==true){
         int nsize = MC__True_mvz->getLength();
         vec_MC__True_mvz.clear();
         vec_MC__True_mvz.resize(nsize);
         memcpy(&vec_MC__True_mvz[0],MC__True_mvz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","nsteps")==true){
         int nsize = MC__True_nsteps->getLength();
         vec_MC__True_nsteps.clear();
         vec_MC__True_nsteps.resize(nsize);
         memcpy(&vec_MC__True_nsteps[0],MC__True_nsteps->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::True","otid")==true){
         int nsize = MC__True_otid->getLength();
         vec_MC__True_otid.clear();
         vec_MC__True_otid.resize(nsize);
         memcpy(&vec_MC__True_otid[0],MC__True_otid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::True","pid")==true){
         int nsize = MC__True_pid->getLength();
         vec_MC__True_pid.clear();
         vec_MC__True_pid.resize(nsize);
         memcpy(&vec_MC__True_pid[0],MC__True_pid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::True","procID")==true){
         int nsize = MC__True_procID->getLength();
         vec_MC__True_procID.clear();
         vec_MC__True_procID.resize(nsize);
         memcpy(&vec_MC__True_procID[0],MC__True_procID->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::True","px")==true){
         int nsize = MC__True_px->getLength();
         vec_MC__True_px.clear();
         vec_MC__True_px.resize(nsize);
         memcpy(&vec_MC__True_px[0],MC__True_px->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","py")==true){
         int nsize = MC__True_py->getLength();
         vec_MC__True_py.clear();
         vec_MC__True_py.resize(nsize);
         memcpy(&vec_MC__True_py[0],MC__True_py->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","pz")==true){
         int nsize = MC__True_pz->getLength();
         vec_MC__True_pz.clear();
         vec_MC__True_pz.resize(nsize);
         memcpy(&vec_MC__True_pz[0],MC__True_pz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","tid")==true){
         int nsize = MC__True_tid->getLength();
         vec_MC__True_tid.clear();
         vec_MC__True_tid.resize(nsize);
         memcpy(&vec_MC__True_tid[0],MC__True_tid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("MC::True","totEdep")==true){
         int nsize = MC__True_totEdep->getLength();
         vec_MC__True_totEdep.clear();
         vec_MC__True_totEdep.resize(nsize);
         memcpy(&vec_MC__True_totEdep[0],MC__True_totEdep->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","trackE")==true){
         int nsize = MC__True_trackE->getLength();
         vec_MC__True_trackE.clear();
         vec_MC__True_trackE.resize(nsize);
         memcpy(&vec_MC__True_trackE[0],MC__True_trackE->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","vx")==true){
         int nsize = MC__True_vx->getLength();
         vec_MC__True_vx.clear();
         vec_MC__True_vx.resize(nsize);
         memcpy(&vec_MC__True_vx[0],MC__True_vx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","vy")==true){
         int nsize = MC__True_vy->getLength();
         vec_MC__True_vy.clear();
         vec_MC__True_vy.resize(nsize);
         memcpy(&vec_MC__True_vy[0],MC__True_vy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("MC::True","vz")==true){
         int nsize = MC__True_vz->getLength();
         vec_MC__True_vz.clear();
         vec_MC__True_vz.resize(nsize);
         memcpy(&vec_MC__True_vz[0],MC__True_vz->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RAW::adc")==true){
      if(dictionary->hasEntry("RAW::adc","ADC")==true){
         int nsize = RAW__adc_ADC->getLength();
         vec_RAW__adc_ADC.clear();
         vec_RAW__adc_ADC.resize(nsize);
         memcpy(&vec_RAW__adc_ADC[0],RAW__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RAW::adc","channel")==true){
         int nsize = RAW__adc_channel->getLength();
         vec_RAW__adc_channel.clear();
         vec_RAW__adc_channel.resize(nsize);
         memcpy(&vec_RAW__adc_channel[0],RAW__adc_channel->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RAW::adc","crate")==true){
         int nsize = RAW__adc_crate->getLength();
         vec_RAW__adc_crate.clear();
         vec_RAW__adc_crate.resize(nsize);
         memcpy(&vec_RAW__adc_crate[0],RAW__adc_crate->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::adc","ped")==true){
         int nsize = RAW__adc_ped->getLength();
         vec_RAW__adc_ped.clear();
         vec_RAW__adc_ped.resize(nsize);
         memcpy(&vec_RAW__adc_ped[0],RAW__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RAW::adc","slot")==true){
         int nsize = RAW__adc_slot->getLength();
         vec_RAW__adc_slot.clear();
         vec_RAW__adc_slot.resize(nsize);
         memcpy(&vec_RAW__adc_slot[0],RAW__adc_slot->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::adc","time")==true){
         int nsize = RAW__adc_time->getLength();
         vec_RAW__adc_time.clear();
         vec_RAW__adc_time.resize(nsize);
         memcpy(&vec_RAW__adc_time[0],RAW__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RAW::scaler")==true){
      if(dictionary->hasEntry("RAW::scaler","channel")==true){
         int nsize = RAW__scaler_channel->getLength();
         vec_RAW__scaler_channel.clear();
         vec_RAW__scaler_channel.resize(nsize);
         memcpy(&vec_RAW__scaler_channel[0],RAW__scaler_channel->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RAW::scaler","crate")==true){
         int nsize = RAW__scaler_crate->getLength();
         vec_RAW__scaler_crate.clear();
         vec_RAW__scaler_crate.resize(nsize);
         memcpy(&vec_RAW__scaler_crate[0],RAW__scaler_crate->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::scaler","helicity")==true){
         int nsize = RAW__scaler_helicity->getLength();
         vec_RAW__scaler_helicity.clear();
         vec_RAW__scaler_helicity.resize(nsize);
         memcpy(&vec_RAW__scaler_helicity[0],RAW__scaler_helicity->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::scaler","quartet")==true){
         int nsize = RAW__scaler_quartet->getLength();
         vec_RAW__scaler_quartet.clear();
         vec_RAW__scaler_quartet.resize(nsize);
         memcpy(&vec_RAW__scaler_quartet[0],RAW__scaler_quartet->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::scaler","slot")==true){
         int nsize = RAW__scaler_slot->getLength();
         vec_RAW__scaler_slot.clear();
         vec_RAW__scaler_slot.resize(nsize);
         memcpy(&vec_RAW__scaler_slot[0],RAW__scaler_slot->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::scaler","value")==true){
         int nsize = RAW__scaler_value->getLength();
         vec_RAW__scaler_value.clear();
         vec_RAW__scaler_value.resize(nsize);
         memcpy(&vec_RAW__scaler_value[0],RAW__scaler_value->getAddress(),nsize*sizeof(int32_t));
      }
   }
   if(dictionary->hasSchema("RAW::tdc")==true){
      if(dictionary->hasEntry("RAW::tdc","TDC")==true){
         int nsize = RAW__tdc_TDC->getLength();
         vec_RAW__tdc_TDC.clear();
         vec_RAW__tdc_TDC.resize(nsize);
         memcpy(&vec_RAW__tdc_TDC[0],RAW__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RAW::tdc","channel")==true){
         int nsize = RAW__tdc_channel->getLength();
         vec_RAW__tdc_channel.clear();
         vec_RAW__tdc_channel.resize(nsize);
         memcpy(&vec_RAW__tdc_channel[0],RAW__tdc_channel->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RAW::tdc","crate")==true){
         int nsize = RAW__tdc_crate->getLength();
         vec_RAW__tdc_crate.clear();
         vec_RAW__tdc_crate.resize(nsize);
         memcpy(&vec_RAW__tdc_crate[0],RAW__tdc_crate->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::tdc","slot")==true){
         int nsize = RAW__tdc_slot->getLength();
         vec_RAW__tdc_slot.clear();
         vec_RAW__tdc_slot.resize(nsize);
         memcpy(&vec_RAW__tdc_slot[0],RAW__tdc_slot->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("RAW::vtp")==true){
      if(dictionary->hasEntry("RAW::vtp","channel")==true){
         int nsize = RAW__vtp_channel->getLength();
         vec_RAW__vtp_channel.clear();
         vec_RAW__vtp_channel.resize(nsize);
         memcpy(&vec_RAW__vtp_channel[0],RAW__vtp_channel->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RAW::vtp","crate")==true){
         int nsize = RAW__vtp_crate->getLength();
         vec_RAW__vtp_crate.clear();
         vec_RAW__vtp_crate.resize(nsize);
         memcpy(&vec_RAW__vtp_crate[0],RAW__vtp_crate->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::vtp","slot")==true){
         int nsize = RAW__vtp_slot->getLength();
         vec_RAW__vtp_slot.clear();
         vec_RAW__vtp_slot.resize(nsize);
         memcpy(&vec_RAW__vtp_slot[0],RAW__vtp_slot->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RAW::vtp","word")==true){
         int nsize = RAW__vtp_word->getLength();
         vec_RAW__vtp_word.clear();
         vec_RAW__vtp_word.resize(nsize);
         memcpy(&vec_RAW__vtp_word[0],RAW__vtp_word->getAddress(),nsize*sizeof(int32_t));
      }
   }
   if(dictionary->hasSchema("REC::Calorimeter")==true){
      if(dictionary->hasEntry("REC::Calorimeter","chi2")==true){
         int nsize = REC__Calorimeter_chi2->getLength();
         vec_REC__Calorimeter_chi2.clear();
         vec_REC__Calorimeter_chi2.resize(nsize);
         memcpy(&vec_REC__Calorimeter_chi2[0],REC__Calorimeter_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","detector")==true){
         int nsize = REC__Calorimeter_detector->getLength();
         vec_REC__Calorimeter_detector.clear();
         vec_REC__Calorimeter_detector.resize(nsize);
         memcpy(&vec_REC__Calorimeter_detector[0],REC__Calorimeter_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Calorimeter","du")==true){
         int nsize = REC__Calorimeter_du->getLength();
         vec_REC__Calorimeter_du.clear();
         vec_REC__Calorimeter_du.resize(nsize);
         memcpy(&vec_REC__Calorimeter_du[0],REC__Calorimeter_du->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","dv")==true){
         int nsize = REC__Calorimeter_dv->getLength();
         vec_REC__Calorimeter_dv.clear();
         vec_REC__Calorimeter_dv.resize(nsize);
         memcpy(&vec_REC__Calorimeter_dv[0],REC__Calorimeter_dv->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","dw")==true){
         int nsize = REC__Calorimeter_dw->getLength();
         vec_REC__Calorimeter_dw.clear();
         vec_REC__Calorimeter_dw.resize(nsize);
         memcpy(&vec_REC__Calorimeter_dw[0],REC__Calorimeter_dw->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","energy")==true){
         int nsize = REC__Calorimeter_energy->getLength();
         vec_REC__Calorimeter_energy.clear();
         vec_REC__Calorimeter_energy.resize(nsize);
         memcpy(&vec_REC__Calorimeter_energy[0],REC__Calorimeter_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","hx")==true){
         int nsize = REC__Calorimeter_hx->getLength();
         vec_REC__Calorimeter_hx.clear();
         vec_REC__Calorimeter_hx.resize(nsize);
         memcpy(&vec_REC__Calorimeter_hx[0],REC__Calorimeter_hx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","hy")==true){
         int nsize = REC__Calorimeter_hy->getLength();
         vec_REC__Calorimeter_hy.clear();
         vec_REC__Calorimeter_hy.resize(nsize);
         memcpy(&vec_REC__Calorimeter_hy[0],REC__Calorimeter_hy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","hz")==true){
         int nsize = REC__Calorimeter_hz->getLength();
         vec_REC__Calorimeter_hz.clear();
         vec_REC__Calorimeter_hz.resize(nsize);
         memcpy(&vec_REC__Calorimeter_hz[0],REC__Calorimeter_hz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","index")==true){
         int nsize = REC__Calorimeter_index->getLength();
         vec_REC__Calorimeter_index.clear();
         vec_REC__Calorimeter_index.resize(nsize);
         memcpy(&vec_REC__Calorimeter_index[0],REC__Calorimeter_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Calorimeter","layer")==true){
         int nsize = REC__Calorimeter_layer->getLength();
         vec_REC__Calorimeter_layer.clear();
         vec_REC__Calorimeter_layer.resize(nsize);
         memcpy(&vec_REC__Calorimeter_layer[0],REC__Calorimeter_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Calorimeter","lu")==true){
         int nsize = REC__Calorimeter_lu->getLength();
         vec_REC__Calorimeter_lu.clear();
         vec_REC__Calorimeter_lu.resize(nsize);
         memcpy(&vec_REC__Calorimeter_lu[0],REC__Calorimeter_lu->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","lv")==true){
         int nsize = REC__Calorimeter_lv->getLength();
         vec_REC__Calorimeter_lv.clear();
         vec_REC__Calorimeter_lv.resize(nsize);
         memcpy(&vec_REC__Calorimeter_lv[0],REC__Calorimeter_lv->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","lw")==true){
         int nsize = REC__Calorimeter_lw->getLength();
         vec_REC__Calorimeter_lw.clear();
         vec_REC__Calorimeter_lw.resize(nsize);
         memcpy(&vec_REC__Calorimeter_lw[0],REC__Calorimeter_lw->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","m2u")==true){
         int nsize = REC__Calorimeter_m2u->getLength();
         vec_REC__Calorimeter_m2u.clear();
         vec_REC__Calorimeter_m2u.resize(nsize);
         memcpy(&vec_REC__Calorimeter_m2u[0],REC__Calorimeter_m2u->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","m2v")==true){
         int nsize = REC__Calorimeter_m2v->getLength();
         vec_REC__Calorimeter_m2v.clear();
         vec_REC__Calorimeter_m2v.resize(nsize);
         memcpy(&vec_REC__Calorimeter_m2v[0],REC__Calorimeter_m2v->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","m2w")==true){
         int nsize = REC__Calorimeter_m2w->getLength();
         vec_REC__Calorimeter_m2w.clear();
         vec_REC__Calorimeter_m2w.resize(nsize);
         memcpy(&vec_REC__Calorimeter_m2w[0],REC__Calorimeter_m2w->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","m3u")==true){
         int nsize = REC__Calorimeter_m3u->getLength();
         vec_REC__Calorimeter_m3u.clear();
         vec_REC__Calorimeter_m3u.resize(nsize);
         memcpy(&vec_REC__Calorimeter_m3u[0],REC__Calorimeter_m3u->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","m3v")==true){
         int nsize = REC__Calorimeter_m3v->getLength();
         vec_REC__Calorimeter_m3v.clear();
         vec_REC__Calorimeter_m3v.resize(nsize);
         memcpy(&vec_REC__Calorimeter_m3v[0],REC__Calorimeter_m3v->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","m3w")==true){
         int nsize = REC__Calorimeter_m3w->getLength();
         vec_REC__Calorimeter_m3w.clear();
         vec_REC__Calorimeter_m3w.resize(nsize);
         memcpy(&vec_REC__Calorimeter_m3w[0],REC__Calorimeter_m3w->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","path")==true){
         int nsize = REC__Calorimeter_path->getLength();
         vec_REC__Calorimeter_path.clear();
         vec_REC__Calorimeter_path.resize(nsize);
         memcpy(&vec_REC__Calorimeter_path[0],REC__Calorimeter_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","pindex")==true){
         int nsize = REC__Calorimeter_pindex->getLength();
         vec_REC__Calorimeter_pindex.clear();
         vec_REC__Calorimeter_pindex.resize(nsize);
         memcpy(&vec_REC__Calorimeter_pindex[0],REC__Calorimeter_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Calorimeter","sector")==true){
         int nsize = REC__Calorimeter_sector->getLength();
         vec_REC__Calorimeter_sector.clear();
         vec_REC__Calorimeter_sector.resize(nsize);
         memcpy(&vec_REC__Calorimeter_sector[0],REC__Calorimeter_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Calorimeter","status")==true){
         int nsize = REC__Calorimeter_status->getLength();
         vec_REC__Calorimeter_status.clear();
         vec_REC__Calorimeter_status.resize(nsize);
         memcpy(&vec_REC__Calorimeter_status[0],REC__Calorimeter_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Calorimeter","time")==true){
         int nsize = REC__Calorimeter_time->getLength();
         vec_REC__Calorimeter_time.clear();
         vec_REC__Calorimeter_time.resize(nsize);
         memcpy(&vec_REC__Calorimeter_time[0],REC__Calorimeter_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","x")==true){
         int nsize = REC__Calorimeter_x->getLength();
         vec_REC__Calorimeter_x.clear();
         vec_REC__Calorimeter_x.resize(nsize);
         memcpy(&vec_REC__Calorimeter_x[0],REC__Calorimeter_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","y")==true){
         int nsize = REC__Calorimeter_y->getLength();
         vec_REC__Calorimeter_y.clear();
         vec_REC__Calorimeter_y.resize(nsize);
         memcpy(&vec_REC__Calorimeter_y[0],REC__Calorimeter_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Calorimeter","z")==true){
         int nsize = REC__Calorimeter_z->getLength();
         vec_REC__Calorimeter_z.clear();
         vec_REC__Calorimeter_z.resize(nsize);
         memcpy(&vec_REC__Calorimeter_z[0],REC__Calorimeter_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("REC::Cherenkov")==true){
      if(dictionary->hasEntry("REC::Cherenkov","chi2")==true){
         int nsize = REC__Cherenkov_chi2->getLength();
         vec_REC__Cherenkov_chi2.clear();
         vec_REC__Cherenkov_chi2.resize(nsize);
         memcpy(&vec_REC__Cherenkov_chi2[0],REC__Cherenkov_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","detector")==true){
         int nsize = REC__Cherenkov_detector->getLength();
         vec_REC__Cherenkov_detector.clear();
         vec_REC__Cherenkov_detector.resize(nsize);
         memcpy(&vec_REC__Cherenkov_detector[0],REC__Cherenkov_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Cherenkov","dphi")==true){
         int nsize = REC__Cherenkov_dphi->getLength();
         vec_REC__Cherenkov_dphi.clear();
         vec_REC__Cherenkov_dphi.resize(nsize);
         memcpy(&vec_REC__Cherenkov_dphi[0],REC__Cherenkov_dphi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","dtheta")==true){
         int nsize = REC__Cherenkov_dtheta->getLength();
         vec_REC__Cherenkov_dtheta.clear();
         vec_REC__Cherenkov_dtheta.resize(nsize);
         memcpy(&vec_REC__Cherenkov_dtheta[0],REC__Cherenkov_dtheta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","index")==true){
         int nsize = REC__Cherenkov_index->getLength();
         vec_REC__Cherenkov_index.clear();
         vec_REC__Cherenkov_index.resize(nsize);
         memcpy(&vec_REC__Cherenkov_index[0],REC__Cherenkov_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Cherenkov","nphe")==true){
         int nsize = REC__Cherenkov_nphe->getLength();
         vec_REC__Cherenkov_nphe.clear();
         vec_REC__Cherenkov_nphe.resize(nsize);
         memcpy(&vec_REC__Cherenkov_nphe[0],REC__Cherenkov_nphe->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","path")==true){
         int nsize = REC__Cherenkov_path->getLength();
         vec_REC__Cherenkov_path.clear();
         vec_REC__Cherenkov_path.resize(nsize);
         memcpy(&vec_REC__Cherenkov_path[0],REC__Cherenkov_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","phi")==true){
         int nsize = REC__Cherenkov_phi->getLength();
         vec_REC__Cherenkov_phi.clear();
         vec_REC__Cherenkov_phi.resize(nsize);
         memcpy(&vec_REC__Cherenkov_phi[0],REC__Cherenkov_phi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","pindex")==true){
         int nsize = REC__Cherenkov_pindex->getLength();
         vec_REC__Cherenkov_pindex.clear();
         vec_REC__Cherenkov_pindex.resize(nsize);
         memcpy(&vec_REC__Cherenkov_pindex[0],REC__Cherenkov_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Cherenkov","sector")==true){
         int nsize = REC__Cherenkov_sector->getLength();
         vec_REC__Cherenkov_sector.clear();
         vec_REC__Cherenkov_sector.resize(nsize);
         memcpy(&vec_REC__Cherenkov_sector[0],REC__Cherenkov_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Cherenkov","status")==true){
         int nsize = REC__Cherenkov_status->getLength();
         vec_REC__Cherenkov_status.clear();
         vec_REC__Cherenkov_status.resize(nsize);
         memcpy(&vec_REC__Cherenkov_status[0],REC__Cherenkov_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Cherenkov","theta")==true){
         int nsize = REC__Cherenkov_theta->getLength();
         vec_REC__Cherenkov_theta.clear();
         vec_REC__Cherenkov_theta.resize(nsize);
         memcpy(&vec_REC__Cherenkov_theta[0],REC__Cherenkov_theta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","time")==true){
         int nsize = REC__Cherenkov_time->getLength();
         vec_REC__Cherenkov_time.clear();
         vec_REC__Cherenkov_time.resize(nsize);
         memcpy(&vec_REC__Cherenkov_time[0],REC__Cherenkov_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","x")==true){
         int nsize = REC__Cherenkov_x->getLength();
         vec_REC__Cherenkov_x.clear();
         vec_REC__Cherenkov_x.resize(nsize);
         memcpy(&vec_REC__Cherenkov_x[0],REC__Cherenkov_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","y")==true){
         int nsize = REC__Cherenkov_y->getLength();
         vec_REC__Cherenkov_y.clear();
         vec_REC__Cherenkov_y.resize(nsize);
         memcpy(&vec_REC__Cherenkov_y[0],REC__Cherenkov_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Cherenkov","z")==true){
         int nsize = REC__Cherenkov_z->getLength();
         vec_REC__Cherenkov_z.clear();
         vec_REC__Cherenkov_z.resize(nsize);
         memcpy(&vec_REC__Cherenkov_z[0],REC__Cherenkov_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("REC::CovMat")==true){
      if(dictionary->hasEntry("REC::CovMat","C11")==true){
         int nsize = REC__CovMat_C11->getLength();
         vec_REC__CovMat_C11.clear();
         vec_REC__CovMat_C11.resize(nsize);
         memcpy(&vec_REC__CovMat_C11[0],REC__CovMat_C11->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C12")==true){
         int nsize = REC__CovMat_C12->getLength();
         vec_REC__CovMat_C12.clear();
         vec_REC__CovMat_C12.resize(nsize);
         memcpy(&vec_REC__CovMat_C12[0],REC__CovMat_C12->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C13")==true){
         int nsize = REC__CovMat_C13->getLength();
         vec_REC__CovMat_C13.clear();
         vec_REC__CovMat_C13.resize(nsize);
         memcpy(&vec_REC__CovMat_C13[0],REC__CovMat_C13->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C14")==true){
         int nsize = REC__CovMat_C14->getLength();
         vec_REC__CovMat_C14.clear();
         vec_REC__CovMat_C14.resize(nsize);
         memcpy(&vec_REC__CovMat_C14[0],REC__CovMat_C14->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C15")==true){
         int nsize = REC__CovMat_C15->getLength();
         vec_REC__CovMat_C15.clear();
         vec_REC__CovMat_C15.resize(nsize);
         memcpy(&vec_REC__CovMat_C15[0],REC__CovMat_C15->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C22")==true){
         int nsize = REC__CovMat_C22->getLength();
         vec_REC__CovMat_C22.clear();
         vec_REC__CovMat_C22.resize(nsize);
         memcpy(&vec_REC__CovMat_C22[0],REC__CovMat_C22->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C23")==true){
         int nsize = REC__CovMat_C23->getLength();
         vec_REC__CovMat_C23.clear();
         vec_REC__CovMat_C23.resize(nsize);
         memcpy(&vec_REC__CovMat_C23[0],REC__CovMat_C23->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C24")==true){
         int nsize = REC__CovMat_C24->getLength();
         vec_REC__CovMat_C24.clear();
         vec_REC__CovMat_C24.resize(nsize);
         memcpy(&vec_REC__CovMat_C24[0],REC__CovMat_C24->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C25")==true){
         int nsize = REC__CovMat_C25->getLength();
         vec_REC__CovMat_C25.clear();
         vec_REC__CovMat_C25.resize(nsize);
         memcpy(&vec_REC__CovMat_C25[0],REC__CovMat_C25->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C33")==true){
         int nsize = REC__CovMat_C33->getLength();
         vec_REC__CovMat_C33.clear();
         vec_REC__CovMat_C33.resize(nsize);
         memcpy(&vec_REC__CovMat_C33[0],REC__CovMat_C33->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C34")==true){
         int nsize = REC__CovMat_C34->getLength();
         vec_REC__CovMat_C34.clear();
         vec_REC__CovMat_C34.resize(nsize);
         memcpy(&vec_REC__CovMat_C34[0],REC__CovMat_C34->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C35")==true){
         int nsize = REC__CovMat_C35->getLength();
         vec_REC__CovMat_C35.clear();
         vec_REC__CovMat_C35.resize(nsize);
         memcpy(&vec_REC__CovMat_C35[0],REC__CovMat_C35->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C44")==true){
         int nsize = REC__CovMat_C44->getLength();
         vec_REC__CovMat_C44.clear();
         vec_REC__CovMat_C44.resize(nsize);
         memcpy(&vec_REC__CovMat_C44[0],REC__CovMat_C44->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C45")==true){
         int nsize = REC__CovMat_C45->getLength();
         vec_REC__CovMat_C45.clear();
         vec_REC__CovMat_C45.resize(nsize);
         memcpy(&vec_REC__CovMat_C45[0],REC__CovMat_C45->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","C55")==true){
         int nsize = REC__CovMat_C55->getLength();
         vec_REC__CovMat_C55.clear();
         vec_REC__CovMat_C55.resize(nsize);
         memcpy(&vec_REC__CovMat_C55[0],REC__CovMat_C55->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::CovMat","index")==true){
         int nsize = REC__CovMat_index->getLength();
         vec_REC__CovMat_index.clear();
         vec_REC__CovMat_index.resize(nsize);
         memcpy(&vec_REC__CovMat_index[0],REC__CovMat_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::CovMat","pindex")==true){
         int nsize = REC__CovMat_pindex->getLength();
         vec_REC__CovMat_pindex.clear();
         vec_REC__CovMat_pindex.resize(nsize);
         memcpy(&vec_REC__CovMat_pindex[0],REC__CovMat_pindex->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("REC::Event")==true){
      if(dictionary->hasEntry("REC::Event","BCG")==true){
         int nsize = REC__Event_BCG->getLength();
         vec_REC__Event_BCG.clear();
         vec_REC__Event_BCG.resize(nsize);
         memcpy(&vec_REC__Event_BCG[0],REC__Event_BCG->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Event","EVNTime")==true){
         int nsize = REC__Event_EVNTime->getLength();
         vec_REC__Event_EVNTime.clear();
         vec_REC__Event_EVNTime.resize(nsize);
         memcpy(&vec_REC__Event_EVNTime[0],REC__Event_EVNTime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Event","EvCAT")==true){
         int nsize = REC__Event_EvCAT->getLength();
         vec_REC__Event_EvCAT.clear();
         vec_REC__Event_EvCAT.resize(nsize);
         memcpy(&vec_REC__Event_EvCAT[0],REC__Event_EvCAT->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Event","Helic")==true){
         int nsize = REC__Event_Helic->getLength();
         vec_REC__Event_Helic.clear();
         vec_REC__Event_Helic.resize(nsize);
         memcpy(&vec_REC__Event_Helic[0],REC__Event_Helic->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Event","LT")==true){
         int nsize = REC__Event_LT->getLength();
         vec_REC__Event_LT.clear();
         vec_REC__Event_LT.resize(nsize);
         memcpy(&vec_REC__Event_LT[0],REC__Event_LT->getAddress(),nsize*sizeof(double));
      }
      if(dictionary->hasEntry("REC::Event","NEVENT")==true){
         int nsize = REC__Event_NEVENT->getLength();
         vec_REC__Event_NEVENT.clear();
         vec_REC__Event_NEVENT.resize(nsize);
         memcpy(&vec_REC__Event_NEVENT[0],REC__Event_NEVENT->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("REC::Event","NPGP")==true){
         int nsize = REC__Event_NPGP->getLength();
         vec_REC__Event_NPGP.clear();
         vec_REC__Event_NPGP.resize(nsize);
         memcpy(&vec_REC__Event_NPGP[0],REC__Event_NPGP->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Event","NRUN")==true){
         int nsize = REC__Event_NRUN->getLength();
         vec_REC__Event_NRUN.clear();
         vec_REC__Event_NRUN.resize(nsize);
         memcpy(&vec_REC__Event_NRUN[0],REC__Event_NRUN->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("REC::Event","PTIME")==true){
         int nsize = REC__Event_PTIME->getLength();
         vec_REC__Event_PTIME.clear();
         vec_REC__Event_PTIME.resize(nsize);
         memcpy(&vec_REC__Event_PTIME[0],REC__Event_PTIME->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Event","RFTime")==true){
         int nsize = REC__Event_RFTime->getLength();
         vec_REC__Event_RFTime.clear();
         vec_REC__Event_RFTime.resize(nsize);
         memcpy(&vec_REC__Event_RFTime[0],REC__Event_RFTime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Event","STTime")==true){
         int nsize = REC__Event_STTime->getLength();
         vec_REC__Event_STTime.clear();
         vec_REC__Event_STTime.resize(nsize);
         memcpy(&vec_REC__Event_STTime[0],REC__Event_STTime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Event","TRG")==true){
         int nsize = REC__Event_TRG->getLength();
         vec_REC__Event_TRG.clear();
         vec_REC__Event_TRG.resize(nsize);
         memcpy(&vec_REC__Event_TRG[0],REC__Event_TRG->getAddress(),nsize*sizeof(int64_t));
      }
      if(dictionary->hasEntry("REC::Event","TYPE")==true){
         int nsize = REC__Event_TYPE->getLength();
         vec_REC__Event_TYPE.clear();
         vec_REC__Event_TYPE.resize(nsize);
         memcpy(&vec_REC__Event_TYPE[0],REC__Event_TYPE->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("REC::ForwardTagger")==true){
      if(dictionary->hasEntry("REC::ForwardTagger","chi2")==true){
         int nsize = REC__ForwardTagger_chi2->getLength();
         vec_REC__ForwardTagger_chi2.clear();
         vec_REC__ForwardTagger_chi2.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_chi2[0],REC__ForwardTagger_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","detector")==true){
         int nsize = REC__ForwardTagger_detector->getLength();
         vec_REC__ForwardTagger_detector.clear();
         vec_REC__ForwardTagger_detector.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_detector[0],REC__ForwardTagger_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","dx")==true){
         int nsize = REC__ForwardTagger_dx->getLength();
         vec_REC__ForwardTagger_dx.clear();
         vec_REC__ForwardTagger_dx.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_dx[0],REC__ForwardTagger_dx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","dy")==true){
         int nsize = REC__ForwardTagger_dy->getLength();
         vec_REC__ForwardTagger_dy.clear();
         vec_REC__ForwardTagger_dy.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_dy[0],REC__ForwardTagger_dy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","energy")==true){
         int nsize = REC__ForwardTagger_energy->getLength();
         vec_REC__ForwardTagger_energy.clear();
         vec_REC__ForwardTagger_energy.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_energy[0],REC__ForwardTagger_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","index")==true){
         int nsize = REC__ForwardTagger_index->getLength();
         vec_REC__ForwardTagger_index.clear();
         vec_REC__ForwardTagger_index.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_index[0],REC__ForwardTagger_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","path")==true){
         int nsize = REC__ForwardTagger_path->getLength();
         vec_REC__ForwardTagger_path.clear();
         vec_REC__ForwardTagger_path.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_path[0],REC__ForwardTagger_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","pindex")==true){
         int nsize = REC__ForwardTagger_pindex->getLength();
         vec_REC__ForwardTagger_pindex.clear();
         vec_REC__ForwardTagger_pindex.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_pindex[0],REC__ForwardTagger_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","radius")==true){
         int nsize = REC__ForwardTagger_radius->getLength();
         vec_REC__ForwardTagger_radius.clear();
         vec_REC__ForwardTagger_radius.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_radius[0],REC__ForwardTagger_radius->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","size")==true){
         int nsize = REC__ForwardTagger_size->getLength();
         vec_REC__ForwardTagger_size.clear();
         vec_REC__ForwardTagger_size.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_size[0],REC__ForwardTagger_size->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","status")==true){
         int nsize = REC__ForwardTagger_status->getLength();
         vec_REC__ForwardTagger_status.clear();
         vec_REC__ForwardTagger_status.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_status[0],REC__ForwardTagger_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","time")==true){
         int nsize = REC__ForwardTagger_time->getLength();
         vec_REC__ForwardTagger_time.clear();
         vec_REC__ForwardTagger_time.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_time[0],REC__ForwardTagger_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","x")==true){
         int nsize = REC__ForwardTagger_x->getLength();
         vec_REC__ForwardTagger_x.clear();
         vec_REC__ForwardTagger_x.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_x[0],REC__ForwardTagger_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","y")==true){
         int nsize = REC__ForwardTagger_y->getLength();
         vec_REC__ForwardTagger_y.clear();
         vec_REC__ForwardTagger_y.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_y[0],REC__ForwardTagger_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::ForwardTagger","z")==true){
         int nsize = REC__ForwardTagger_z->getLength();
         vec_REC__ForwardTagger_z.clear();
         vec_REC__ForwardTagger_z.resize(nsize);
         memcpy(&vec_REC__ForwardTagger_z[0],REC__ForwardTagger_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("REC::Particle")==true){
      if(dictionary->hasEntry("REC::Particle","beta")==true){
         int nsize = REC__Particle_beta->getLength();
         vec_REC__Particle_beta.clear();
         vec_REC__Particle_beta.resize(nsize);
         memcpy(&vec_REC__Particle_beta[0],REC__Particle_beta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Particle","charge")==true){
         int nsize = REC__Particle_charge->getLength();
         vec_REC__Particle_charge.clear();
         vec_REC__Particle_charge.resize(nsize);
         memcpy(&vec_REC__Particle_charge[0],REC__Particle_charge->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Particle","chi2pid")==true){
         int nsize = REC__Particle_chi2pid->getLength();
         vec_REC__Particle_chi2pid.clear();
         vec_REC__Particle_chi2pid.resize(nsize);
         memcpy(&vec_REC__Particle_chi2pid[0],REC__Particle_chi2pid->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Particle","pid")==true){
         int nsize = REC__Particle_pid->getLength();
         vec_REC__Particle_pid.clear();
         vec_REC__Particle_pid.resize(nsize);
         memcpy(&vec_REC__Particle_pid[0],REC__Particle_pid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("REC::Particle","px")==true){
         int nsize = REC__Particle_px->getLength();
         vec_REC__Particle_px.clear();
         vec_REC__Particle_px.resize(nsize);
         memcpy(&vec_REC__Particle_px[0],REC__Particle_px->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Particle","py")==true){
         int nsize = REC__Particle_py->getLength();
         vec_REC__Particle_py.clear();
         vec_REC__Particle_py.resize(nsize);
         memcpy(&vec_REC__Particle_py[0],REC__Particle_py->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Particle","pz")==true){
         int nsize = REC__Particle_pz->getLength();
         vec_REC__Particle_pz.clear();
         vec_REC__Particle_pz.resize(nsize);
         memcpy(&vec_REC__Particle_pz[0],REC__Particle_pz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Particle","status")==true){
         int nsize = REC__Particle_status->getLength();
         vec_REC__Particle_status.clear();
         vec_REC__Particle_status.resize(nsize);
         memcpy(&vec_REC__Particle_status[0],REC__Particle_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Particle","vx")==true){
         int nsize = REC__Particle_vx->getLength();
         vec_REC__Particle_vx.clear();
         vec_REC__Particle_vx.resize(nsize);
         memcpy(&vec_REC__Particle_vx[0],REC__Particle_vx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Particle","vy")==true){
         int nsize = REC__Particle_vy->getLength();
         vec_REC__Particle_vy.clear();
         vec_REC__Particle_vy.resize(nsize);
         memcpy(&vec_REC__Particle_vy[0],REC__Particle_vy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Particle","vz")==true){
         int nsize = REC__Particle_vz->getLength();
         vec_REC__Particle_vz.clear();
         vec_REC__Particle_vz.resize(nsize);
         memcpy(&vec_REC__Particle_vz[0],REC__Particle_vz->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("REC::Scintillator")==true){
      if(dictionary->hasEntry("REC::Scintillator","chi2")==true){
         int nsize = REC__Scintillator_chi2->getLength();
         vec_REC__Scintillator_chi2.clear();
         vec_REC__Scintillator_chi2.resize(nsize);
         memcpy(&vec_REC__Scintillator_chi2[0],REC__Scintillator_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","component")==true){
         int nsize = REC__Scintillator_component->getLength();
         vec_REC__Scintillator_component.clear();
         vec_REC__Scintillator_component.resize(nsize);
         memcpy(&vec_REC__Scintillator_component[0],REC__Scintillator_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Scintillator","detector")==true){
         int nsize = REC__Scintillator_detector->getLength();
         vec_REC__Scintillator_detector.clear();
         vec_REC__Scintillator_detector.resize(nsize);
         memcpy(&vec_REC__Scintillator_detector[0],REC__Scintillator_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Scintillator","energy")==true){
         int nsize = REC__Scintillator_energy->getLength();
         vec_REC__Scintillator_energy.clear();
         vec_REC__Scintillator_energy.resize(nsize);
         memcpy(&vec_REC__Scintillator_energy[0],REC__Scintillator_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","hx")==true){
         int nsize = REC__Scintillator_hx->getLength();
         vec_REC__Scintillator_hx.clear();
         vec_REC__Scintillator_hx.resize(nsize);
         memcpy(&vec_REC__Scintillator_hx[0],REC__Scintillator_hx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","hy")==true){
         int nsize = REC__Scintillator_hy->getLength();
         vec_REC__Scintillator_hy.clear();
         vec_REC__Scintillator_hy.resize(nsize);
         memcpy(&vec_REC__Scintillator_hy[0],REC__Scintillator_hy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","hz")==true){
         int nsize = REC__Scintillator_hz->getLength();
         vec_REC__Scintillator_hz.clear();
         vec_REC__Scintillator_hz.resize(nsize);
         memcpy(&vec_REC__Scintillator_hz[0],REC__Scintillator_hz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","index")==true){
         int nsize = REC__Scintillator_index->getLength();
         vec_REC__Scintillator_index.clear();
         vec_REC__Scintillator_index.resize(nsize);
         memcpy(&vec_REC__Scintillator_index[0],REC__Scintillator_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Scintillator","layer")==true){
         int nsize = REC__Scintillator_layer->getLength();
         vec_REC__Scintillator_layer.clear();
         vec_REC__Scintillator_layer.resize(nsize);
         memcpy(&vec_REC__Scintillator_layer[0],REC__Scintillator_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Scintillator","path")==true){
         int nsize = REC__Scintillator_path->getLength();
         vec_REC__Scintillator_path.clear();
         vec_REC__Scintillator_path.resize(nsize);
         memcpy(&vec_REC__Scintillator_path[0],REC__Scintillator_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","pindex")==true){
         int nsize = REC__Scintillator_pindex->getLength();
         vec_REC__Scintillator_pindex.clear();
         vec_REC__Scintillator_pindex.resize(nsize);
         memcpy(&vec_REC__Scintillator_pindex[0],REC__Scintillator_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Scintillator","sector")==true){
         int nsize = REC__Scintillator_sector->getLength();
         vec_REC__Scintillator_sector.clear();
         vec_REC__Scintillator_sector.resize(nsize);
         memcpy(&vec_REC__Scintillator_sector[0],REC__Scintillator_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Scintillator","status")==true){
         int nsize = REC__Scintillator_status->getLength();
         vec_REC__Scintillator_status.clear();
         vec_REC__Scintillator_status.resize(nsize);
         memcpy(&vec_REC__Scintillator_status[0],REC__Scintillator_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Scintillator","time")==true){
         int nsize = REC__Scintillator_time->getLength();
         vec_REC__Scintillator_time.clear();
         vec_REC__Scintillator_time.resize(nsize);
         memcpy(&vec_REC__Scintillator_time[0],REC__Scintillator_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","x")==true){
         int nsize = REC__Scintillator_x->getLength();
         vec_REC__Scintillator_x.clear();
         vec_REC__Scintillator_x.resize(nsize);
         memcpy(&vec_REC__Scintillator_x[0],REC__Scintillator_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","y")==true){
         int nsize = REC__Scintillator_y->getLength();
         vec_REC__Scintillator_y.clear();
         vec_REC__Scintillator_y.resize(nsize);
         memcpy(&vec_REC__Scintillator_y[0],REC__Scintillator_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Scintillator","z")==true){
         int nsize = REC__Scintillator_z->getLength();
         vec_REC__Scintillator_z.clear();
         vec_REC__Scintillator_z.resize(nsize);
         memcpy(&vec_REC__Scintillator_z[0],REC__Scintillator_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("REC::Track")==true){
      if(dictionary->hasEntry("REC::Track","NDF")==true){
         int nsize = REC__Track_NDF->getLength();
         vec_REC__Track_NDF.clear();
         vec_REC__Track_NDF.resize(nsize);
         memcpy(&vec_REC__Track_NDF[0],REC__Track_NDF->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Track","NDF_nomm")==true){
         int nsize = REC__Track_NDF_nomm->getLength();
         vec_REC__Track_NDF_nomm.clear();
         vec_REC__Track_NDF_nomm.resize(nsize);
         memcpy(&vec_REC__Track_NDF_nomm[0],REC__Track_NDF_nomm->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Track","chi2")==true){
         int nsize = REC__Track_chi2->getLength();
         vec_REC__Track_chi2.clear();
         vec_REC__Track_chi2.resize(nsize);
         memcpy(&vec_REC__Track_chi2[0],REC__Track_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Track","chi2_nomm")==true){
         int nsize = REC__Track_chi2_nomm->getLength();
         vec_REC__Track_chi2_nomm.clear();
         vec_REC__Track_chi2_nomm.resize(nsize);
         memcpy(&vec_REC__Track_chi2_nomm[0],REC__Track_chi2_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Track","detector")==true){
         int nsize = REC__Track_detector->getLength();
         vec_REC__Track_detector.clear();
         vec_REC__Track_detector.resize(nsize);
         memcpy(&vec_REC__Track_detector[0],REC__Track_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Track","index")==true){
         int nsize = REC__Track_index->getLength();
         vec_REC__Track_index.clear();
         vec_REC__Track_index.resize(nsize);
         memcpy(&vec_REC__Track_index[0],REC__Track_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Track","pindex")==true){
         int nsize = REC__Track_pindex->getLength();
         vec_REC__Track_pindex.clear();
         vec_REC__Track_pindex.resize(nsize);
         memcpy(&vec_REC__Track_pindex[0],REC__Track_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Track","px_nomm")==true){
         int nsize = REC__Track_px_nomm->getLength();
         vec_REC__Track_px_nomm.clear();
         vec_REC__Track_px_nomm.resize(nsize);
         memcpy(&vec_REC__Track_px_nomm[0],REC__Track_px_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Track","py_nomm")==true){
         int nsize = REC__Track_py_nomm->getLength();
         vec_REC__Track_py_nomm.clear();
         vec_REC__Track_py_nomm.resize(nsize);
         memcpy(&vec_REC__Track_py_nomm[0],REC__Track_py_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Track","pz_nomm")==true){
         int nsize = REC__Track_pz_nomm->getLength();
         vec_REC__Track_pz_nomm.clear();
         vec_REC__Track_pz_nomm.resize(nsize);
         memcpy(&vec_REC__Track_pz_nomm[0],REC__Track_pz_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Track","q")==true){
         int nsize = REC__Track_q->getLength();
         vec_REC__Track_q.clear();
         vec_REC__Track_q.resize(nsize);
         memcpy(&vec_REC__Track_q[0],REC__Track_q->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Track","sector")==true){
         int nsize = REC__Track_sector->getLength();
         vec_REC__Track_sector.clear();
         vec_REC__Track_sector.resize(nsize);
         memcpy(&vec_REC__Track_sector[0],REC__Track_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Track","status")==true){
         int nsize = REC__Track_status->getLength();
         vec_REC__Track_status.clear();
         vec_REC__Track_status.resize(nsize);
         memcpy(&vec_REC__Track_status[0],REC__Track_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Track","vx_nomm")==true){
         int nsize = REC__Track_vx_nomm->getLength();
         vec_REC__Track_vx_nomm.clear();
         vec_REC__Track_vx_nomm.resize(nsize);
         memcpy(&vec_REC__Track_vx_nomm[0],REC__Track_vx_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Track","vy_nomm")==true){
         int nsize = REC__Track_vy_nomm->getLength();
         vec_REC__Track_vy_nomm.clear();
         vec_REC__Track_vy_nomm.resize(nsize);
         memcpy(&vec_REC__Track_vy_nomm[0],REC__Track_vy_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Track","vz_nomm")==true){
         int nsize = REC__Track_vz_nomm->getLength();
         vec_REC__Track_vz_nomm.clear();
         vec_REC__Track_vz_nomm.resize(nsize);
         memcpy(&vec_REC__Track_vz_nomm[0],REC__Track_vz_nomm->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("REC::TrackCross")==true){
      if(dictionary->hasEntry("REC::TrackCross","c_ux")==true){
         int nsize = REC__TrackCross_c_ux->getLength();
         vec_REC__TrackCross_c_ux.clear();
         vec_REC__TrackCross_c_ux.resize(nsize);
         memcpy(&vec_REC__TrackCross_c_ux[0],REC__TrackCross_c_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::TrackCross","c_uy")==true){
         int nsize = REC__TrackCross_c_uy->getLength();
         vec_REC__TrackCross_c_uy.clear();
         vec_REC__TrackCross_c_uy.resize(nsize);
         memcpy(&vec_REC__TrackCross_c_uy[0],REC__TrackCross_c_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::TrackCross","c_uz")==true){
         int nsize = REC__TrackCross_c_uz->getLength();
         vec_REC__TrackCross_c_uz.clear();
         vec_REC__TrackCross_c_uz.resize(nsize);
         memcpy(&vec_REC__TrackCross_c_uz[0],REC__TrackCross_c_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::TrackCross","c_x")==true){
         int nsize = REC__TrackCross_c_x->getLength();
         vec_REC__TrackCross_c_x.clear();
         vec_REC__TrackCross_c_x.resize(nsize);
         memcpy(&vec_REC__TrackCross_c_x[0],REC__TrackCross_c_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::TrackCross","c_y")==true){
         int nsize = REC__TrackCross_c_y->getLength();
         vec_REC__TrackCross_c_y.clear();
         vec_REC__TrackCross_c_y.resize(nsize);
         memcpy(&vec_REC__TrackCross_c_y[0],REC__TrackCross_c_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::TrackCross","c_z")==true){
         int nsize = REC__TrackCross_c_z->getLength();
         vec_REC__TrackCross_c_z.clear();
         vec_REC__TrackCross_c_z.resize(nsize);
         memcpy(&vec_REC__TrackCross_c_z[0],REC__TrackCross_c_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::TrackCross","detector")==true){
         int nsize = REC__TrackCross_detector->getLength();
         vec_REC__TrackCross_detector.clear();
         vec_REC__TrackCross_detector.resize(nsize);
         memcpy(&vec_REC__TrackCross_detector[0],REC__TrackCross_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::TrackCross","index")==true){
         int nsize = REC__TrackCross_index->getLength();
         vec_REC__TrackCross_index.clear();
         vec_REC__TrackCross_index.resize(nsize);
         memcpy(&vec_REC__TrackCross_index[0],REC__TrackCross_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::TrackCross","layer")==true){
         int nsize = REC__TrackCross_layer->getLength();
         vec_REC__TrackCross_layer.clear();
         vec_REC__TrackCross_layer.resize(nsize);
         memcpy(&vec_REC__TrackCross_layer[0],REC__TrackCross_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::TrackCross","pindex")==true){
         int nsize = REC__TrackCross_pindex->getLength();
         vec_REC__TrackCross_pindex.clear();
         vec_REC__TrackCross_pindex.resize(nsize);
         memcpy(&vec_REC__TrackCross_pindex[0],REC__TrackCross_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::TrackCross","sector")==true){
         int nsize = REC__TrackCross_sector->getLength();
         vec_REC__TrackCross_sector.clear();
         vec_REC__TrackCross_sector.resize(nsize);
         memcpy(&vec_REC__TrackCross_sector[0],REC__TrackCross_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::TrackCross","status")==true){
         int nsize = REC__TrackCross_status->getLength();
         vec_REC__TrackCross_status.clear();
         vec_REC__TrackCross_status.resize(nsize);
         memcpy(&vec_REC__TrackCross_status[0],REC__TrackCross_status->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("REC::Traj")==true){
      if(dictionary->hasEntry("REC::Traj","cx")==true){
         int nsize = REC__Traj_cx->getLength();
         vec_REC__Traj_cx.clear();
         vec_REC__Traj_cx.resize(nsize);
         memcpy(&vec_REC__Traj_cx[0],REC__Traj_cx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Traj","cy")==true){
         int nsize = REC__Traj_cy->getLength();
         vec_REC__Traj_cy.clear();
         vec_REC__Traj_cy.resize(nsize);
         memcpy(&vec_REC__Traj_cy[0],REC__Traj_cy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Traj","cz")==true){
         int nsize = REC__Traj_cz->getLength();
         vec_REC__Traj_cz.clear();
         vec_REC__Traj_cz.resize(nsize);
         memcpy(&vec_REC__Traj_cz[0],REC__Traj_cz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Traj","detId")==true){
         int nsize = REC__Traj_detId->getLength();
         vec_REC__Traj_detId.clear();
         vec_REC__Traj_detId.resize(nsize);
         memcpy(&vec_REC__Traj_detId[0],REC__Traj_detId->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Traj","index")==true){
         int nsize = REC__Traj_index->getLength();
         vec_REC__Traj_index.clear();
         vec_REC__Traj_index.resize(nsize);
         memcpy(&vec_REC__Traj_index[0],REC__Traj_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Traj","pathlength")==true){
         int nsize = REC__Traj_pathlength->getLength();
         vec_REC__Traj_pathlength.clear();
         vec_REC__Traj_pathlength.resize(nsize);
         memcpy(&vec_REC__Traj_pathlength[0],REC__Traj_pathlength->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Traj","pindex")==true){
         int nsize = REC__Traj_pindex->getLength();
         vec_REC__Traj_pindex.clear();
         vec_REC__Traj_pindex.resize(nsize);
         memcpy(&vec_REC__Traj_pindex[0],REC__Traj_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::Traj","q")==true){
         int nsize = REC__Traj_q->getLength();
         vec_REC__Traj_q.clear();
         vec_REC__Traj_q.resize(nsize);
         memcpy(&vec_REC__Traj_q[0],REC__Traj_q->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("REC::Traj","x")==true){
         int nsize = REC__Traj_x->getLength();
         vec_REC__Traj_x.clear();
         vec_REC__Traj_x.resize(nsize);
         memcpy(&vec_REC__Traj_x[0],REC__Traj_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Traj","y")==true){
         int nsize = REC__Traj_y->getLength();
         vec_REC__Traj_y.clear();
         vec_REC__Traj_y.resize(nsize);
         memcpy(&vec_REC__Traj_y[0],REC__Traj_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::Traj","z")==true){
         int nsize = REC__Traj_z->getLength();
         vec_REC__Traj_z.clear();
         vec_REC__Traj_z.resize(nsize);
         memcpy(&vec_REC__Traj_z[0],REC__Traj_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("REC::VertDoca")==true){
      if(dictionary->hasEntry("REC::VertDoca","cx1")==true){
         int nsize = REC__VertDoca_cx1->getLength();
         vec_REC__VertDoca_cx1.clear();
         vec_REC__VertDoca_cx1.resize(nsize);
         memcpy(&vec_REC__VertDoca_cx1[0],REC__VertDoca_cx1->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","cx2")==true){
         int nsize = REC__VertDoca_cx2->getLength();
         vec_REC__VertDoca_cx2.clear();
         vec_REC__VertDoca_cx2.resize(nsize);
         memcpy(&vec_REC__VertDoca_cx2[0],REC__VertDoca_cx2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","cy1")==true){
         int nsize = REC__VertDoca_cy1->getLength();
         vec_REC__VertDoca_cy1.clear();
         vec_REC__VertDoca_cy1.resize(nsize);
         memcpy(&vec_REC__VertDoca_cy1[0],REC__VertDoca_cy1->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","cy2")==true){
         int nsize = REC__VertDoca_cy2->getLength();
         vec_REC__VertDoca_cy2.clear();
         vec_REC__VertDoca_cy2.resize(nsize);
         memcpy(&vec_REC__VertDoca_cy2[0],REC__VertDoca_cy2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","cz1")==true){
         int nsize = REC__VertDoca_cz1->getLength();
         vec_REC__VertDoca_cz1.clear();
         vec_REC__VertDoca_cz1.resize(nsize);
         memcpy(&vec_REC__VertDoca_cz1[0],REC__VertDoca_cz1->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","cz2")==true){
         int nsize = REC__VertDoca_cz2->getLength();
         vec_REC__VertDoca_cz2.clear();
         vec_REC__VertDoca_cz2.resize(nsize);
         memcpy(&vec_REC__VertDoca_cz2[0],REC__VertDoca_cz2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","index1")==true){
         int nsize = REC__VertDoca_index1->getLength();
         vec_REC__VertDoca_index1.clear();
         vec_REC__VertDoca_index1.resize(nsize);
         memcpy(&vec_REC__VertDoca_index1[0],REC__VertDoca_index1->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::VertDoca","index2")==true){
         int nsize = REC__VertDoca_index2->getLength();
         vec_REC__VertDoca_index2.clear();
         vec_REC__VertDoca_index2.resize(nsize);
         memcpy(&vec_REC__VertDoca_index2[0],REC__VertDoca_index2->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("REC::VertDoca","r")==true){
         int nsize = REC__VertDoca_r->getLength();
         vec_REC__VertDoca_r.clear();
         vec_REC__VertDoca_r.resize(nsize);
         memcpy(&vec_REC__VertDoca_r[0],REC__VertDoca_r->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","x")==true){
         int nsize = REC__VertDoca_x->getLength();
         vec_REC__VertDoca_x.clear();
         vec_REC__VertDoca_x.resize(nsize);
         memcpy(&vec_REC__VertDoca_x[0],REC__VertDoca_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","x1")==true){
         int nsize = REC__VertDoca_x1->getLength();
         vec_REC__VertDoca_x1.clear();
         vec_REC__VertDoca_x1.resize(nsize);
         memcpy(&vec_REC__VertDoca_x1[0],REC__VertDoca_x1->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","x2")==true){
         int nsize = REC__VertDoca_x2->getLength();
         vec_REC__VertDoca_x2.clear();
         vec_REC__VertDoca_x2.resize(nsize);
         memcpy(&vec_REC__VertDoca_x2[0],REC__VertDoca_x2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","y")==true){
         int nsize = REC__VertDoca_y->getLength();
         vec_REC__VertDoca_y.clear();
         vec_REC__VertDoca_y.resize(nsize);
         memcpy(&vec_REC__VertDoca_y[0],REC__VertDoca_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","y1")==true){
         int nsize = REC__VertDoca_y1->getLength();
         vec_REC__VertDoca_y1.clear();
         vec_REC__VertDoca_y1.resize(nsize);
         memcpy(&vec_REC__VertDoca_y1[0],REC__VertDoca_y1->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","y2")==true){
         int nsize = REC__VertDoca_y2->getLength();
         vec_REC__VertDoca_y2.clear();
         vec_REC__VertDoca_y2.resize(nsize);
         memcpy(&vec_REC__VertDoca_y2[0],REC__VertDoca_y2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","z")==true){
         int nsize = REC__VertDoca_z->getLength();
         vec_REC__VertDoca_z.clear();
         vec_REC__VertDoca_z.resize(nsize);
         memcpy(&vec_REC__VertDoca_z[0],REC__VertDoca_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","z1")==true){
         int nsize = REC__VertDoca_z1->getLength();
         vec_REC__VertDoca_z1.clear();
         vec_REC__VertDoca_z1.resize(nsize);
         memcpy(&vec_REC__VertDoca_z1[0],REC__VertDoca_z1->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("REC::VertDoca","z2")==true){
         int nsize = REC__VertDoca_z2->getLength();
         vec_REC__VertDoca_z2.clear();
         vec_REC__VertDoca_z2.resize(nsize);
         memcpy(&vec_REC__VertDoca_z2[0],REC__VertDoca_z2->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RECHB::Calorimeter")==true){
      if(dictionary->hasEntry("RECHB::Calorimeter","chi2")==true){
         int nsize = RECHB__Calorimeter_chi2->getLength();
         vec_RECHB__Calorimeter_chi2.clear();
         vec_RECHB__Calorimeter_chi2.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_chi2[0],RECHB__Calorimeter_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","detector")==true){
         int nsize = RECHB__Calorimeter_detector->getLength();
         vec_RECHB__Calorimeter_detector.clear();
         vec_RECHB__Calorimeter_detector.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_detector[0],RECHB__Calorimeter_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","du")==true){
         int nsize = RECHB__Calorimeter_du->getLength();
         vec_RECHB__Calorimeter_du.clear();
         vec_RECHB__Calorimeter_du.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_du[0],RECHB__Calorimeter_du->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","dv")==true){
         int nsize = RECHB__Calorimeter_dv->getLength();
         vec_RECHB__Calorimeter_dv.clear();
         vec_RECHB__Calorimeter_dv.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_dv[0],RECHB__Calorimeter_dv->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","dw")==true){
         int nsize = RECHB__Calorimeter_dw->getLength();
         vec_RECHB__Calorimeter_dw.clear();
         vec_RECHB__Calorimeter_dw.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_dw[0],RECHB__Calorimeter_dw->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","energy")==true){
         int nsize = RECHB__Calorimeter_energy->getLength();
         vec_RECHB__Calorimeter_energy.clear();
         vec_RECHB__Calorimeter_energy.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_energy[0],RECHB__Calorimeter_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","hx")==true){
         int nsize = RECHB__Calorimeter_hx->getLength();
         vec_RECHB__Calorimeter_hx.clear();
         vec_RECHB__Calorimeter_hx.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_hx[0],RECHB__Calorimeter_hx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","hy")==true){
         int nsize = RECHB__Calorimeter_hy->getLength();
         vec_RECHB__Calorimeter_hy.clear();
         vec_RECHB__Calorimeter_hy.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_hy[0],RECHB__Calorimeter_hy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","hz")==true){
         int nsize = RECHB__Calorimeter_hz->getLength();
         vec_RECHB__Calorimeter_hz.clear();
         vec_RECHB__Calorimeter_hz.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_hz[0],RECHB__Calorimeter_hz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","index")==true){
         int nsize = RECHB__Calorimeter_index->getLength();
         vec_RECHB__Calorimeter_index.clear();
         vec_RECHB__Calorimeter_index.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_index[0],RECHB__Calorimeter_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","layer")==true){
         int nsize = RECHB__Calorimeter_layer->getLength();
         vec_RECHB__Calorimeter_layer.clear();
         vec_RECHB__Calorimeter_layer.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_layer[0],RECHB__Calorimeter_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","lu")==true){
         int nsize = RECHB__Calorimeter_lu->getLength();
         vec_RECHB__Calorimeter_lu.clear();
         vec_RECHB__Calorimeter_lu.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_lu[0],RECHB__Calorimeter_lu->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","lv")==true){
         int nsize = RECHB__Calorimeter_lv->getLength();
         vec_RECHB__Calorimeter_lv.clear();
         vec_RECHB__Calorimeter_lv.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_lv[0],RECHB__Calorimeter_lv->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","lw")==true){
         int nsize = RECHB__Calorimeter_lw->getLength();
         vec_RECHB__Calorimeter_lw.clear();
         vec_RECHB__Calorimeter_lw.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_lw[0],RECHB__Calorimeter_lw->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m2u")==true){
         int nsize = RECHB__Calorimeter_m2u->getLength();
         vec_RECHB__Calorimeter_m2u.clear();
         vec_RECHB__Calorimeter_m2u.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_m2u[0],RECHB__Calorimeter_m2u->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m2v")==true){
         int nsize = RECHB__Calorimeter_m2v->getLength();
         vec_RECHB__Calorimeter_m2v.clear();
         vec_RECHB__Calorimeter_m2v.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_m2v[0],RECHB__Calorimeter_m2v->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m2w")==true){
         int nsize = RECHB__Calorimeter_m2w->getLength();
         vec_RECHB__Calorimeter_m2w.clear();
         vec_RECHB__Calorimeter_m2w.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_m2w[0],RECHB__Calorimeter_m2w->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m3u")==true){
         int nsize = RECHB__Calorimeter_m3u->getLength();
         vec_RECHB__Calorimeter_m3u.clear();
         vec_RECHB__Calorimeter_m3u.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_m3u[0],RECHB__Calorimeter_m3u->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m3v")==true){
         int nsize = RECHB__Calorimeter_m3v->getLength();
         vec_RECHB__Calorimeter_m3v.clear();
         vec_RECHB__Calorimeter_m3v.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_m3v[0],RECHB__Calorimeter_m3v->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","m3w")==true){
         int nsize = RECHB__Calorimeter_m3w->getLength();
         vec_RECHB__Calorimeter_m3w.clear();
         vec_RECHB__Calorimeter_m3w.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_m3w[0],RECHB__Calorimeter_m3w->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","path")==true){
         int nsize = RECHB__Calorimeter_path->getLength();
         vec_RECHB__Calorimeter_path.clear();
         vec_RECHB__Calorimeter_path.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_path[0],RECHB__Calorimeter_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","pindex")==true){
         int nsize = RECHB__Calorimeter_pindex->getLength();
         vec_RECHB__Calorimeter_pindex.clear();
         vec_RECHB__Calorimeter_pindex.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_pindex[0],RECHB__Calorimeter_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","sector")==true){
         int nsize = RECHB__Calorimeter_sector->getLength();
         vec_RECHB__Calorimeter_sector.clear();
         vec_RECHB__Calorimeter_sector.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_sector[0],RECHB__Calorimeter_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","status")==true){
         int nsize = RECHB__Calorimeter_status->getLength();
         vec_RECHB__Calorimeter_status.clear();
         vec_RECHB__Calorimeter_status.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_status[0],RECHB__Calorimeter_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","time")==true){
         int nsize = RECHB__Calorimeter_time->getLength();
         vec_RECHB__Calorimeter_time.clear();
         vec_RECHB__Calorimeter_time.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_time[0],RECHB__Calorimeter_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","x")==true){
         int nsize = RECHB__Calorimeter_x->getLength();
         vec_RECHB__Calorimeter_x.clear();
         vec_RECHB__Calorimeter_x.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_x[0],RECHB__Calorimeter_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","y")==true){
         int nsize = RECHB__Calorimeter_y->getLength();
         vec_RECHB__Calorimeter_y.clear();
         vec_RECHB__Calorimeter_y.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_y[0],RECHB__Calorimeter_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Calorimeter","z")==true){
         int nsize = RECHB__Calorimeter_z->getLength();
         vec_RECHB__Calorimeter_z.clear();
         vec_RECHB__Calorimeter_z.resize(nsize);
         memcpy(&vec_RECHB__Calorimeter_z[0],RECHB__Calorimeter_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RECHB::Cherenkov")==true){
      if(dictionary->hasEntry("RECHB::Cherenkov","chi2")==true){
         int nsize = RECHB__Cherenkov_chi2->getLength();
         vec_RECHB__Cherenkov_chi2.clear();
         vec_RECHB__Cherenkov_chi2.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_chi2[0],RECHB__Cherenkov_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","detector")==true){
         int nsize = RECHB__Cherenkov_detector->getLength();
         vec_RECHB__Cherenkov_detector.clear();
         vec_RECHB__Cherenkov_detector.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_detector[0],RECHB__Cherenkov_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","dphi")==true){
         int nsize = RECHB__Cherenkov_dphi->getLength();
         vec_RECHB__Cherenkov_dphi.clear();
         vec_RECHB__Cherenkov_dphi.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_dphi[0],RECHB__Cherenkov_dphi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","dtheta")==true){
         int nsize = RECHB__Cherenkov_dtheta->getLength();
         vec_RECHB__Cherenkov_dtheta.clear();
         vec_RECHB__Cherenkov_dtheta.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_dtheta[0],RECHB__Cherenkov_dtheta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","index")==true){
         int nsize = RECHB__Cherenkov_index->getLength();
         vec_RECHB__Cherenkov_index.clear();
         vec_RECHB__Cherenkov_index.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_index[0],RECHB__Cherenkov_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","nphe")==true){
         int nsize = RECHB__Cherenkov_nphe->getLength();
         vec_RECHB__Cherenkov_nphe.clear();
         vec_RECHB__Cherenkov_nphe.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_nphe[0],RECHB__Cherenkov_nphe->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","path")==true){
         int nsize = RECHB__Cherenkov_path->getLength();
         vec_RECHB__Cherenkov_path.clear();
         vec_RECHB__Cherenkov_path.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_path[0],RECHB__Cherenkov_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","phi")==true){
         int nsize = RECHB__Cherenkov_phi->getLength();
         vec_RECHB__Cherenkov_phi.clear();
         vec_RECHB__Cherenkov_phi.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_phi[0],RECHB__Cherenkov_phi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","pindex")==true){
         int nsize = RECHB__Cherenkov_pindex->getLength();
         vec_RECHB__Cherenkov_pindex.clear();
         vec_RECHB__Cherenkov_pindex.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_pindex[0],RECHB__Cherenkov_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","sector")==true){
         int nsize = RECHB__Cherenkov_sector->getLength();
         vec_RECHB__Cherenkov_sector.clear();
         vec_RECHB__Cherenkov_sector.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_sector[0],RECHB__Cherenkov_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","status")==true){
         int nsize = RECHB__Cherenkov_status->getLength();
         vec_RECHB__Cherenkov_status.clear();
         vec_RECHB__Cherenkov_status.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_status[0],RECHB__Cherenkov_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","theta")==true){
         int nsize = RECHB__Cherenkov_theta->getLength();
         vec_RECHB__Cherenkov_theta.clear();
         vec_RECHB__Cherenkov_theta.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_theta[0],RECHB__Cherenkov_theta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","time")==true){
         int nsize = RECHB__Cherenkov_time->getLength();
         vec_RECHB__Cherenkov_time.clear();
         vec_RECHB__Cherenkov_time.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_time[0],RECHB__Cherenkov_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","x")==true){
         int nsize = RECHB__Cherenkov_x->getLength();
         vec_RECHB__Cherenkov_x.clear();
         vec_RECHB__Cherenkov_x.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_x[0],RECHB__Cherenkov_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","y")==true){
         int nsize = RECHB__Cherenkov_y->getLength();
         vec_RECHB__Cherenkov_y.clear();
         vec_RECHB__Cherenkov_y.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_y[0],RECHB__Cherenkov_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Cherenkov","z")==true){
         int nsize = RECHB__Cherenkov_z->getLength();
         vec_RECHB__Cherenkov_z.clear();
         vec_RECHB__Cherenkov_z.resize(nsize);
         memcpy(&vec_RECHB__Cherenkov_z[0],RECHB__Cherenkov_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RECHB::Event")==true){
      if(dictionary->hasEntry("RECHB::Event","BCG")==true){
         int nsize = RECHB__Event_BCG->getLength();
         vec_RECHB__Event_BCG.clear();
         vec_RECHB__Event_BCG.resize(nsize);
         memcpy(&vec_RECHB__Event_BCG[0],RECHB__Event_BCG->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Event","EVNTime")==true){
         int nsize = RECHB__Event_EVNTime->getLength();
         vec_RECHB__Event_EVNTime.clear();
         vec_RECHB__Event_EVNTime.resize(nsize);
         memcpy(&vec_RECHB__Event_EVNTime[0],RECHB__Event_EVNTime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Event","EvCAT")==true){
         int nsize = RECHB__Event_EvCAT->getLength();
         vec_RECHB__Event_EvCAT.clear();
         vec_RECHB__Event_EvCAT.resize(nsize);
         memcpy(&vec_RECHB__Event_EvCAT[0],RECHB__Event_EvCAT->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Event","Helic")==true){
         int nsize = RECHB__Event_Helic->getLength();
         vec_RECHB__Event_Helic.clear();
         vec_RECHB__Event_Helic.resize(nsize);
         memcpy(&vec_RECHB__Event_Helic[0],RECHB__Event_Helic->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Event","LT")==true){
         int nsize = RECHB__Event_LT->getLength();
         vec_RECHB__Event_LT.clear();
         vec_RECHB__Event_LT.resize(nsize);
         memcpy(&vec_RECHB__Event_LT[0],RECHB__Event_LT->getAddress(),nsize*sizeof(double));
      }
      if(dictionary->hasEntry("RECHB::Event","NEVENT")==true){
         int nsize = RECHB__Event_NEVENT->getLength();
         vec_RECHB__Event_NEVENT.clear();
         vec_RECHB__Event_NEVENT.resize(nsize);
         memcpy(&vec_RECHB__Event_NEVENT[0],RECHB__Event_NEVENT->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RECHB::Event","NPGP")==true){
         int nsize = RECHB__Event_NPGP->getLength();
         vec_RECHB__Event_NPGP.clear();
         vec_RECHB__Event_NPGP.resize(nsize);
         memcpy(&vec_RECHB__Event_NPGP[0],RECHB__Event_NPGP->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Event","NRUN")==true){
         int nsize = RECHB__Event_NRUN->getLength();
         vec_RECHB__Event_NRUN.clear();
         vec_RECHB__Event_NRUN.resize(nsize);
         memcpy(&vec_RECHB__Event_NRUN[0],RECHB__Event_NRUN->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RECHB::Event","PTIME")==true){
         int nsize = RECHB__Event_PTIME->getLength();
         vec_RECHB__Event_PTIME.clear();
         vec_RECHB__Event_PTIME.resize(nsize);
         memcpy(&vec_RECHB__Event_PTIME[0],RECHB__Event_PTIME->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Event","RFTime")==true){
         int nsize = RECHB__Event_RFTime->getLength();
         vec_RECHB__Event_RFTime.clear();
         vec_RECHB__Event_RFTime.resize(nsize);
         memcpy(&vec_RECHB__Event_RFTime[0],RECHB__Event_RFTime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Event","STTime")==true){
         int nsize = RECHB__Event_STTime->getLength();
         vec_RECHB__Event_STTime.clear();
         vec_RECHB__Event_STTime.resize(nsize);
         memcpy(&vec_RECHB__Event_STTime[0],RECHB__Event_STTime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Event","TRG")==true){
         int nsize = RECHB__Event_TRG->getLength();
         vec_RECHB__Event_TRG.clear();
         vec_RECHB__Event_TRG.resize(nsize);
         memcpy(&vec_RECHB__Event_TRG[0],RECHB__Event_TRG->getAddress(),nsize*sizeof(int64_t));
      }
      if(dictionary->hasEntry("RECHB::Event","TYPE")==true){
         int nsize = RECHB__Event_TYPE->getLength();
         vec_RECHB__Event_TYPE.clear();
         vec_RECHB__Event_TYPE.resize(nsize);
         memcpy(&vec_RECHB__Event_TYPE[0],RECHB__Event_TYPE->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("RECHB::ForwardTagger")==true){
      if(dictionary->hasEntry("RECHB::ForwardTagger","chi2")==true){
         int nsize = RECHB__ForwardTagger_chi2->getLength();
         vec_RECHB__ForwardTagger_chi2.clear();
         vec_RECHB__ForwardTagger_chi2.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_chi2[0],RECHB__ForwardTagger_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","detector")==true){
         int nsize = RECHB__ForwardTagger_detector->getLength();
         vec_RECHB__ForwardTagger_detector.clear();
         vec_RECHB__ForwardTagger_detector.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_detector[0],RECHB__ForwardTagger_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","dx")==true){
         int nsize = RECHB__ForwardTagger_dx->getLength();
         vec_RECHB__ForwardTagger_dx.clear();
         vec_RECHB__ForwardTagger_dx.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_dx[0],RECHB__ForwardTagger_dx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","dy")==true){
         int nsize = RECHB__ForwardTagger_dy->getLength();
         vec_RECHB__ForwardTagger_dy.clear();
         vec_RECHB__ForwardTagger_dy.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_dy[0],RECHB__ForwardTagger_dy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","energy")==true){
         int nsize = RECHB__ForwardTagger_energy->getLength();
         vec_RECHB__ForwardTagger_energy.clear();
         vec_RECHB__ForwardTagger_energy.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_energy[0],RECHB__ForwardTagger_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","index")==true){
         int nsize = RECHB__ForwardTagger_index->getLength();
         vec_RECHB__ForwardTagger_index.clear();
         vec_RECHB__ForwardTagger_index.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_index[0],RECHB__ForwardTagger_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","path")==true){
         int nsize = RECHB__ForwardTagger_path->getLength();
         vec_RECHB__ForwardTagger_path.clear();
         vec_RECHB__ForwardTagger_path.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_path[0],RECHB__ForwardTagger_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","pindex")==true){
         int nsize = RECHB__ForwardTagger_pindex->getLength();
         vec_RECHB__ForwardTagger_pindex.clear();
         vec_RECHB__ForwardTagger_pindex.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_pindex[0],RECHB__ForwardTagger_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","radius")==true){
         int nsize = RECHB__ForwardTagger_radius->getLength();
         vec_RECHB__ForwardTagger_radius.clear();
         vec_RECHB__ForwardTagger_radius.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_radius[0],RECHB__ForwardTagger_radius->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","size")==true){
         int nsize = RECHB__ForwardTagger_size->getLength();
         vec_RECHB__ForwardTagger_size.clear();
         vec_RECHB__ForwardTagger_size.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_size[0],RECHB__ForwardTagger_size->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","status")==true){
         int nsize = RECHB__ForwardTagger_status->getLength();
         vec_RECHB__ForwardTagger_status.clear();
         vec_RECHB__ForwardTagger_status.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_status[0],RECHB__ForwardTagger_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","time")==true){
         int nsize = RECHB__ForwardTagger_time->getLength();
         vec_RECHB__ForwardTagger_time.clear();
         vec_RECHB__ForwardTagger_time.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_time[0],RECHB__ForwardTagger_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","x")==true){
         int nsize = RECHB__ForwardTagger_x->getLength();
         vec_RECHB__ForwardTagger_x.clear();
         vec_RECHB__ForwardTagger_x.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_x[0],RECHB__ForwardTagger_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","y")==true){
         int nsize = RECHB__ForwardTagger_y->getLength();
         vec_RECHB__ForwardTagger_y.clear();
         vec_RECHB__ForwardTagger_y.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_y[0],RECHB__ForwardTagger_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::ForwardTagger","z")==true){
         int nsize = RECHB__ForwardTagger_z->getLength();
         vec_RECHB__ForwardTagger_z.clear();
         vec_RECHB__ForwardTagger_z.resize(nsize);
         memcpy(&vec_RECHB__ForwardTagger_z[0],RECHB__ForwardTagger_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RECHB::Particle")==true){
      if(dictionary->hasEntry("RECHB::Particle","beta")==true){
         int nsize = RECHB__Particle_beta->getLength();
         vec_RECHB__Particle_beta.clear();
         vec_RECHB__Particle_beta.resize(nsize);
         memcpy(&vec_RECHB__Particle_beta[0],RECHB__Particle_beta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Particle","charge")==true){
         int nsize = RECHB__Particle_charge->getLength();
         vec_RECHB__Particle_charge.clear();
         vec_RECHB__Particle_charge.resize(nsize);
         memcpy(&vec_RECHB__Particle_charge[0],RECHB__Particle_charge->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Particle","chi2pid")==true){
         int nsize = RECHB__Particle_chi2pid->getLength();
         vec_RECHB__Particle_chi2pid.clear();
         vec_RECHB__Particle_chi2pid.resize(nsize);
         memcpy(&vec_RECHB__Particle_chi2pid[0],RECHB__Particle_chi2pid->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Particle","pid")==true){
         int nsize = RECHB__Particle_pid->getLength();
         vec_RECHB__Particle_pid.clear();
         vec_RECHB__Particle_pid.resize(nsize);
         memcpy(&vec_RECHB__Particle_pid[0],RECHB__Particle_pid->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RECHB::Particle","px")==true){
         int nsize = RECHB__Particle_px->getLength();
         vec_RECHB__Particle_px.clear();
         vec_RECHB__Particle_px.resize(nsize);
         memcpy(&vec_RECHB__Particle_px[0],RECHB__Particle_px->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Particle","py")==true){
         int nsize = RECHB__Particle_py->getLength();
         vec_RECHB__Particle_py.clear();
         vec_RECHB__Particle_py.resize(nsize);
         memcpy(&vec_RECHB__Particle_py[0],RECHB__Particle_py->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Particle","pz")==true){
         int nsize = RECHB__Particle_pz->getLength();
         vec_RECHB__Particle_pz.clear();
         vec_RECHB__Particle_pz.resize(nsize);
         memcpy(&vec_RECHB__Particle_pz[0],RECHB__Particle_pz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Particle","status")==true){
         int nsize = RECHB__Particle_status->getLength();
         vec_RECHB__Particle_status.clear();
         vec_RECHB__Particle_status.resize(nsize);
         memcpy(&vec_RECHB__Particle_status[0],RECHB__Particle_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Particle","vx")==true){
         int nsize = RECHB__Particle_vx->getLength();
         vec_RECHB__Particle_vx.clear();
         vec_RECHB__Particle_vx.resize(nsize);
         memcpy(&vec_RECHB__Particle_vx[0],RECHB__Particle_vx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Particle","vy")==true){
         int nsize = RECHB__Particle_vy->getLength();
         vec_RECHB__Particle_vy.clear();
         vec_RECHB__Particle_vy.resize(nsize);
         memcpy(&vec_RECHB__Particle_vy[0],RECHB__Particle_vy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Particle","vz")==true){
         int nsize = RECHB__Particle_vz->getLength();
         vec_RECHB__Particle_vz.clear();
         vec_RECHB__Particle_vz.resize(nsize);
         memcpy(&vec_RECHB__Particle_vz[0],RECHB__Particle_vz->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RECHB::Scintillator")==true){
      if(dictionary->hasEntry("RECHB::Scintillator","chi2")==true){
         int nsize = RECHB__Scintillator_chi2->getLength();
         vec_RECHB__Scintillator_chi2.clear();
         vec_RECHB__Scintillator_chi2.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_chi2[0],RECHB__Scintillator_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","component")==true){
         int nsize = RECHB__Scintillator_component->getLength();
         vec_RECHB__Scintillator_component.clear();
         vec_RECHB__Scintillator_component.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_component[0],RECHB__Scintillator_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","detector")==true){
         int nsize = RECHB__Scintillator_detector->getLength();
         vec_RECHB__Scintillator_detector.clear();
         vec_RECHB__Scintillator_detector.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_detector[0],RECHB__Scintillator_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","energy")==true){
         int nsize = RECHB__Scintillator_energy->getLength();
         vec_RECHB__Scintillator_energy.clear();
         vec_RECHB__Scintillator_energy.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_energy[0],RECHB__Scintillator_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","hx")==true){
         int nsize = RECHB__Scintillator_hx->getLength();
         vec_RECHB__Scintillator_hx.clear();
         vec_RECHB__Scintillator_hx.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_hx[0],RECHB__Scintillator_hx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","hy")==true){
         int nsize = RECHB__Scintillator_hy->getLength();
         vec_RECHB__Scintillator_hy.clear();
         vec_RECHB__Scintillator_hy.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_hy[0],RECHB__Scintillator_hy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","hz")==true){
         int nsize = RECHB__Scintillator_hz->getLength();
         vec_RECHB__Scintillator_hz.clear();
         vec_RECHB__Scintillator_hz.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_hz[0],RECHB__Scintillator_hz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","index")==true){
         int nsize = RECHB__Scintillator_index->getLength();
         vec_RECHB__Scintillator_index.clear();
         vec_RECHB__Scintillator_index.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_index[0],RECHB__Scintillator_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","layer")==true){
         int nsize = RECHB__Scintillator_layer->getLength();
         vec_RECHB__Scintillator_layer.clear();
         vec_RECHB__Scintillator_layer.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_layer[0],RECHB__Scintillator_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","path")==true){
         int nsize = RECHB__Scintillator_path->getLength();
         vec_RECHB__Scintillator_path.clear();
         vec_RECHB__Scintillator_path.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_path[0],RECHB__Scintillator_path->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","pindex")==true){
         int nsize = RECHB__Scintillator_pindex->getLength();
         vec_RECHB__Scintillator_pindex.clear();
         vec_RECHB__Scintillator_pindex.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_pindex[0],RECHB__Scintillator_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","sector")==true){
         int nsize = RECHB__Scintillator_sector->getLength();
         vec_RECHB__Scintillator_sector.clear();
         vec_RECHB__Scintillator_sector.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_sector[0],RECHB__Scintillator_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","status")==true){
         int nsize = RECHB__Scintillator_status->getLength();
         vec_RECHB__Scintillator_status.clear();
         vec_RECHB__Scintillator_status.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_status[0],RECHB__Scintillator_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","time")==true){
         int nsize = RECHB__Scintillator_time->getLength();
         vec_RECHB__Scintillator_time.clear();
         vec_RECHB__Scintillator_time.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_time[0],RECHB__Scintillator_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","x")==true){
         int nsize = RECHB__Scintillator_x->getLength();
         vec_RECHB__Scintillator_x.clear();
         vec_RECHB__Scintillator_x.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_x[0],RECHB__Scintillator_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","y")==true){
         int nsize = RECHB__Scintillator_y->getLength();
         vec_RECHB__Scintillator_y.clear();
         vec_RECHB__Scintillator_y.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_y[0],RECHB__Scintillator_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Scintillator","z")==true){
         int nsize = RECHB__Scintillator_z->getLength();
         vec_RECHB__Scintillator_z.clear();
         vec_RECHB__Scintillator_z.resize(nsize);
         memcpy(&vec_RECHB__Scintillator_z[0],RECHB__Scintillator_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RECHB::Track")==true){
      if(dictionary->hasEntry("RECHB::Track","NDF")==true){
         int nsize = RECHB__Track_NDF->getLength();
         vec_RECHB__Track_NDF.clear();
         vec_RECHB__Track_NDF.resize(nsize);
         memcpy(&vec_RECHB__Track_NDF[0],RECHB__Track_NDF->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Track","NDF_nomm")==true){
         int nsize = RECHB__Track_NDF_nomm->getLength();
         vec_RECHB__Track_NDF_nomm.clear();
         vec_RECHB__Track_NDF_nomm.resize(nsize);
         memcpy(&vec_RECHB__Track_NDF_nomm[0],RECHB__Track_NDF_nomm->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Track","chi2")==true){
         int nsize = RECHB__Track_chi2->getLength();
         vec_RECHB__Track_chi2.clear();
         vec_RECHB__Track_chi2.resize(nsize);
         memcpy(&vec_RECHB__Track_chi2[0],RECHB__Track_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Track","chi2_nomm")==true){
         int nsize = RECHB__Track_chi2_nomm->getLength();
         vec_RECHB__Track_chi2_nomm.clear();
         vec_RECHB__Track_chi2_nomm.resize(nsize);
         memcpy(&vec_RECHB__Track_chi2_nomm[0],RECHB__Track_chi2_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Track","detector")==true){
         int nsize = RECHB__Track_detector->getLength();
         vec_RECHB__Track_detector.clear();
         vec_RECHB__Track_detector.resize(nsize);
         memcpy(&vec_RECHB__Track_detector[0],RECHB__Track_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Track","index")==true){
         int nsize = RECHB__Track_index->getLength();
         vec_RECHB__Track_index.clear();
         vec_RECHB__Track_index.resize(nsize);
         memcpy(&vec_RECHB__Track_index[0],RECHB__Track_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Track","pindex")==true){
         int nsize = RECHB__Track_pindex->getLength();
         vec_RECHB__Track_pindex.clear();
         vec_RECHB__Track_pindex.resize(nsize);
         memcpy(&vec_RECHB__Track_pindex[0],RECHB__Track_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Track","px_nomm")==true){
         int nsize = RECHB__Track_px_nomm->getLength();
         vec_RECHB__Track_px_nomm.clear();
         vec_RECHB__Track_px_nomm.resize(nsize);
         memcpy(&vec_RECHB__Track_px_nomm[0],RECHB__Track_px_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Track","py_nomm")==true){
         int nsize = RECHB__Track_py_nomm->getLength();
         vec_RECHB__Track_py_nomm.clear();
         vec_RECHB__Track_py_nomm.resize(nsize);
         memcpy(&vec_RECHB__Track_py_nomm[0],RECHB__Track_py_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Track","pz_nomm")==true){
         int nsize = RECHB__Track_pz_nomm->getLength();
         vec_RECHB__Track_pz_nomm.clear();
         vec_RECHB__Track_pz_nomm.resize(nsize);
         memcpy(&vec_RECHB__Track_pz_nomm[0],RECHB__Track_pz_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Track","q")==true){
         int nsize = RECHB__Track_q->getLength();
         vec_RECHB__Track_q.clear();
         vec_RECHB__Track_q.resize(nsize);
         memcpy(&vec_RECHB__Track_q[0],RECHB__Track_q->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Track","sector")==true){
         int nsize = RECHB__Track_sector->getLength();
         vec_RECHB__Track_sector.clear();
         vec_RECHB__Track_sector.resize(nsize);
         memcpy(&vec_RECHB__Track_sector[0],RECHB__Track_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::Track","status")==true){
         int nsize = RECHB__Track_status->getLength();
         vec_RECHB__Track_status.clear();
         vec_RECHB__Track_status.resize(nsize);
         memcpy(&vec_RECHB__Track_status[0],RECHB__Track_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::Track","vx_nomm")==true){
         int nsize = RECHB__Track_vx_nomm->getLength();
         vec_RECHB__Track_vx_nomm.clear();
         vec_RECHB__Track_vx_nomm.resize(nsize);
         memcpy(&vec_RECHB__Track_vx_nomm[0],RECHB__Track_vx_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Track","vy_nomm")==true){
         int nsize = RECHB__Track_vy_nomm->getLength();
         vec_RECHB__Track_vy_nomm.clear();
         vec_RECHB__Track_vy_nomm.resize(nsize);
         memcpy(&vec_RECHB__Track_vy_nomm[0],RECHB__Track_vy_nomm->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::Track","vz_nomm")==true){
         int nsize = RECHB__Track_vz_nomm->getLength();
         vec_RECHB__Track_vz_nomm.clear();
         vec_RECHB__Track_vz_nomm.resize(nsize);
         memcpy(&vec_RECHB__Track_vz_nomm[0],RECHB__Track_vz_nomm->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RECHB::TrackCross")==true){
      if(dictionary->hasEntry("RECHB::TrackCross","c_ux")==true){
         int nsize = RECHB__TrackCross_c_ux->getLength();
         vec_RECHB__TrackCross_c_ux.clear();
         vec_RECHB__TrackCross_c_ux.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_c_ux[0],RECHB__TrackCross_c_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_uy")==true){
         int nsize = RECHB__TrackCross_c_uy->getLength();
         vec_RECHB__TrackCross_c_uy.clear();
         vec_RECHB__TrackCross_c_uy.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_c_uy[0],RECHB__TrackCross_c_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_uz")==true){
         int nsize = RECHB__TrackCross_c_uz->getLength();
         vec_RECHB__TrackCross_c_uz.clear();
         vec_RECHB__TrackCross_c_uz.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_c_uz[0],RECHB__TrackCross_c_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_x")==true){
         int nsize = RECHB__TrackCross_c_x->getLength();
         vec_RECHB__TrackCross_c_x.clear();
         vec_RECHB__TrackCross_c_x.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_c_x[0],RECHB__TrackCross_c_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_y")==true){
         int nsize = RECHB__TrackCross_c_y->getLength();
         vec_RECHB__TrackCross_c_y.clear();
         vec_RECHB__TrackCross_c_y.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_c_y[0],RECHB__TrackCross_c_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","c_z")==true){
         int nsize = RECHB__TrackCross_c_z->getLength();
         vec_RECHB__TrackCross_c_z.clear();
         vec_RECHB__TrackCross_c_z.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_c_z[0],RECHB__TrackCross_c_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","detector")==true){
         int nsize = RECHB__TrackCross_detector->getLength();
         vec_RECHB__TrackCross_detector.clear();
         vec_RECHB__TrackCross_detector.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_detector[0],RECHB__TrackCross_detector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","index")==true){
         int nsize = RECHB__TrackCross_index->getLength();
         vec_RECHB__TrackCross_index.clear();
         vec_RECHB__TrackCross_index.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_index[0],RECHB__TrackCross_index->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","layer")==true){
         int nsize = RECHB__TrackCross_layer->getLength();
         vec_RECHB__TrackCross_layer.clear();
         vec_RECHB__TrackCross_layer.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_layer[0],RECHB__TrackCross_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","pindex")==true){
         int nsize = RECHB__TrackCross_pindex->getLength();
         vec_RECHB__TrackCross_pindex.clear();
         vec_RECHB__TrackCross_pindex.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_pindex[0],RECHB__TrackCross_pindex->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","sector")==true){
         int nsize = RECHB__TrackCross_sector->getLength();
         vec_RECHB__TrackCross_sector.clear();
         vec_RECHB__TrackCross_sector.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_sector[0],RECHB__TrackCross_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RECHB::TrackCross","status")==true){
         int nsize = RECHB__TrackCross_status->getLength();
         vec_RECHB__TrackCross_status.clear();
         vec_RECHB__TrackCross_status.resize(nsize);
         memcpy(&vec_RECHB__TrackCross_status[0],RECHB__TrackCross_status->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("RF::adc")==true){
      if(dictionary->hasEntry("RF::adc","ADC")==true){
         int nsize = RF__adc_ADC->getLength();
         vec_RF__adc_ADC.clear();
         vec_RF__adc_ADC.resize(nsize);
         memcpy(&vec_RF__adc_ADC[0],RF__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RF::adc","component")==true){
         int nsize = RF__adc_component->getLength();
         vec_RF__adc_component.clear();
         vec_RF__adc_component.resize(nsize);
         memcpy(&vec_RF__adc_component[0],RF__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RF::adc","layer")==true){
         int nsize = RF__adc_layer->getLength();
         vec_RF__adc_layer.clear();
         vec_RF__adc_layer.resize(nsize);
         memcpy(&vec_RF__adc_layer[0],RF__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RF::adc","order")==true){
         int nsize = RF__adc_order->getLength();
         vec_RF__adc_order.clear();
         vec_RF__adc_order.resize(nsize);
         memcpy(&vec_RF__adc_order[0],RF__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RF::adc","ped")==true){
         int nsize = RF__adc_ped->getLength();
         vec_RF__adc_ped.clear();
         vec_RF__adc_ped.resize(nsize);
         memcpy(&vec_RF__adc_ped[0],RF__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RF::adc","sector")==true){
         int nsize = RF__adc_sector->getLength();
         vec_RF__adc_sector.clear();
         vec_RF__adc_sector.resize(nsize);
         memcpy(&vec_RF__adc_sector[0],RF__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RF::adc","time")==true){
         int nsize = RF__adc_time->getLength();
         vec_RF__adc_time.clear();
         vec_RF__adc_time.resize(nsize);
         memcpy(&vec_RF__adc_time[0],RF__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RF::tdc")==true){
      if(dictionary->hasEntry("RF::tdc","TDC")==true){
         int nsize = RF__tdc_TDC->getLength();
         vec_RF__tdc_TDC.clear();
         vec_RF__tdc_TDC.resize(nsize);
         memcpy(&vec_RF__tdc_TDC[0],RF__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RF::tdc","component")==true){
         int nsize = RF__tdc_component->getLength();
         vec_RF__tdc_component.clear();
         vec_RF__tdc_component.resize(nsize);
         memcpy(&vec_RF__tdc_component[0],RF__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RF::tdc","layer")==true){
         int nsize = RF__tdc_layer->getLength();
         vec_RF__tdc_layer.clear();
         vec_RF__tdc_layer.resize(nsize);
         memcpy(&vec_RF__tdc_layer[0],RF__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RF::tdc","order")==true){
         int nsize = RF__tdc_order->getLength();
         vec_RF__tdc_order.clear();
         vec_RF__tdc_order.resize(nsize);
         memcpy(&vec_RF__tdc_order[0],RF__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RF::tdc","sector")==true){
         int nsize = RF__tdc_sector->getLength();
         vec_RF__tdc_sector.clear();
         vec_RF__tdc_sector.resize(nsize);
         memcpy(&vec_RF__tdc_sector[0],RF__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("RICH::adc")==true){
      if(dictionary->hasEntry("RICH::adc","ADC")==true){
         int nsize = RICH__adc_ADC->getLength();
         vec_RICH__adc_ADC.clear();
         vec_RICH__adc_ADC.resize(nsize);
         memcpy(&vec_RICH__adc_ADC[0],RICH__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RICH::adc","component")==true){
         int nsize = RICH__adc_component->getLength();
         vec_RICH__adc_component.clear();
         vec_RICH__adc_component.resize(nsize);
         memcpy(&vec_RICH__adc_component[0],RICH__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::adc","layer")==true){
         int nsize = RICH__adc_layer->getLength();
         vec_RICH__adc_layer.clear();
         vec_RICH__adc_layer.resize(nsize);
         memcpy(&vec_RICH__adc_layer[0],RICH__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RICH::adc","order")==true){
         int nsize = RICH__adc_order->getLength();
         vec_RICH__adc_order.clear();
         vec_RICH__adc_order.resize(nsize);
         memcpy(&vec_RICH__adc_order[0],RICH__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RICH::adc","ped")==true){
         int nsize = RICH__adc_ped->getLength();
         vec_RICH__adc_ped.clear();
         vec_RICH__adc_ped.resize(nsize);
         memcpy(&vec_RICH__adc_ped[0],RICH__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::adc","sector")==true){
         int nsize = RICH__adc_sector->getLength();
         vec_RICH__adc_sector.clear();
         vec_RICH__adc_sector.resize(nsize);
         memcpy(&vec_RICH__adc_sector[0],RICH__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RICH::adc","time")==true){
         int nsize = RICH__adc_time->getLength();
         vec_RICH__adc_time.clear();
         vec_RICH__adc_time.resize(nsize);
         memcpy(&vec_RICH__adc_time[0],RICH__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RICH::clusters")==true){
      if(dictionary->hasEntry("RICH::clusters","charge")==true){
         int nsize = RICH__clusters_charge->getLength();
         vec_RICH__clusters_charge.clear();
         vec_RICH__clusters_charge.resize(nsize);
         memcpy(&vec_RICH__clusters_charge[0],RICH__clusters_charge->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RICH::clusters","id")==true){
         int nsize = RICH__clusters_id->getLength();
         vec_RICH__clusters_id.clear();
         vec_RICH__clusters_id.resize(nsize);
         memcpy(&vec_RICH__clusters_id[0],RICH__clusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::clusters","pmt")==true){
         int nsize = RICH__clusters_pmt->getLength();
         vec_RICH__clusters_pmt.clear();
         vec_RICH__clusters_pmt.resize(nsize);
         memcpy(&vec_RICH__clusters_pmt[0],RICH__clusters_pmt->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::clusters","sector")==true){
         int nsize = RICH__clusters_sector->getLength();
         vec_RICH__clusters_sector.clear();
         vec_RICH__clusters_sector.resize(nsize);
         memcpy(&vec_RICH__clusters_sector[0],RICH__clusters_sector->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::clusters","size")==true){
         int nsize = RICH__clusters_size->getLength();
         vec_RICH__clusters_size.clear();
         vec_RICH__clusters_size.resize(nsize);
         memcpy(&vec_RICH__clusters_size[0],RICH__clusters_size->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::clusters","tile")==true){
         int nsize = RICH__clusters_tile->getLength();
         vec_RICH__clusters_tile.clear();
         vec_RICH__clusters_tile.resize(nsize);
         memcpy(&vec_RICH__clusters_tile[0],RICH__clusters_tile->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::clusters","time")==true){
         int nsize = RICH__clusters_time->getLength();
         vec_RICH__clusters_time.clear();
         vec_RICH__clusters_time.resize(nsize);
         memcpy(&vec_RICH__clusters_time[0],RICH__clusters_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RICH::clusters","wtime")==true){
         int nsize = RICH__clusters_wtime->getLength();
         vec_RICH__clusters_wtime.clear();
         vec_RICH__clusters_wtime.resize(nsize);
         memcpy(&vec_RICH__clusters_wtime[0],RICH__clusters_wtime->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RICH::clusters","wx")==true){
         int nsize = RICH__clusters_wx->getLength();
         vec_RICH__clusters_wx.clear();
         vec_RICH__clusters_wx.resize(nsize);
         memcpy(&vec_RICH__clusters_wx[0],RICH__clusters_wx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RICH::clusters","wy")==true){
         int nsize = RICH__clusters_wy->getLength();
         vec_RICH__clusters_wy.clear();
         vec_RICH__clusters_wy.resize(nsize);
         memcpy(&vec_RICH__clusters_wy[0],RICH__clusters_wy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RICH::clusters","wz")==true){
         int nsize = RICH__clusters_wz->getLength();
         vec_RICH__clusters_wz.clear();
         vec_RICH__clusters_wz.resize(nsize);
         memcpy(&vec_RICH__clusters_wz[0],RICH__clusters_wz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RICH::clusters","x")==true){
         int nsize = RICH__clusters_x->getLength();
         vec_RICH__clusters_x.clear();
         vec_RICH__clusters_x.resize(nsize);
         memcpy(&vec_RICH__clusters_x[0],RICH__clusters_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RICH::clusters","y")==true){
         int nsize = RICH__clusters_y->getLength();
         vec_RICH__clusters_y.clear();
         vec_RICH__clusters_y.resize(nsize);
         memcpy(&vec_RICH__clusters_y[0],RICH__clusters_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RICH::clusters","z")==true){
         int nsize = RICH__clusters_z->getLength();
         vec_RICH__clusters_z.clear();
         vec_RICH__clusters_z.resize(nsize);
         memcpy(&vec_RICH__clusters_z[0],RICH__clusters_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RICH::hits")==true){
      if(dictionary->hasEntry("RICH::hits","anode")==true){
         int nsize = RICH__hits_anode->getLength();
         vec_RICH__hits_anode.clear();
         vec_RICH__hits_anode.resize(nsize);
         memcpy(&vec_RICH__hits_anode[0],RICH__hits_anode->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","cluster")==true){
         int nsize = RICH__hits_cluster->getLength();
         vec_RICH__hits_cluster.clear();
         vec_RICH__hits_cluster.resize(nsize);
         memcpy(&vec_RICH__hits_cluster[0],RICH__hits_cluster->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","duration")==true){
         int nsize = RICH__hits_duration->getLength();
         vec_RICH__hits_duration.clear();
         vec_RICH__hits_duration.resize(nsize);
         memcpy(&vec_RICH__hits_duration[0],RICH__hits_duration->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","glx")==true){
         int nsize = RICH__hits_glx->getLength();
         vec_RICH__hits_glx.clear();
         vec_RICH__hits_glx.resize(nsize);
         memcpy(&vec_RICH__hits_glx[0],RICH__hits_glx->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","gly")==true){
         int nsize = RICH__hits_gly->getLength();
         vec_RICH__hits_gly.clear();
         vec_RICH__hits_gly.resize(nsize);
         memcpy(&vec_RICH__hits_gly[0],RICH__hits_gly->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","id")==true){
         int nsize = RICH__hits_id->getLength();
         vec_RICH__hits_id.clear();
         vec_RICH__hits_id.resize(nsize);
         memcpy(&vec_RICH__hits_id[0],RICH__hits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","idx")==true){
         int nsize = RICH__hits_idx->getLength();
         vec_RICH__hits_idx.clear();
         vec_RICH__hits_idx.resize(nsize);
         memcpy(&vec_RICH__hits_idx[0],RICH__hits_idx->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","idy")==true){
         int nsize = RICH__hits_idy->getLength();
         vec_RICH__hits_idy.clear();
         vec_RICH__hits_idy.resize(nsize);
         memcpy(&vec_RICH__hits_idy[0],RICH__hits_idy->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","pmt")==true){
         int nsize = RICH__hits_pmt->getLength();
         vec_RICH__hits_pmt.clear();
         vec_RICH__hits_pmt.resize(nsize);
         memcpy(&vec_RICH__hits_pmt[0],RICH__hits_pmt->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","sector")==true){
         int nsize = RICH__hits_sector->getLength();
         vec_RICH__hits_sector.clear();
         vec_RICH__hits_sector.resize(nsize);
         memcpy(&vec_RICH__hits_sector[0],RICH__hits_sector->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","tile")==true){
         int nsize = RICH__hits_tile->getLength();
         vec_RICH__hits_tile.clear();
         vec_RICH__hits_tile.resize(nsize);
         memcpy(&vec_RICH__hits_tile[0],RICH__hits_tile->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","time")==true){
         int nsize = RICH__hits_time->getLength();
         vec_RICH__hits_time.clear();
         vec_RICH__hits_time.resize(nsize);
         memcpy(&vec_RICH__hits_time[0],RICH__hits_time->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::hits","xtalk")==true){
         int nsize = RICH__hits_xtalk->getLength();
         vec_RICH__hits_xtalk.clear();
         vec_RICH__hits_xtalk.resize(nsize);
         memcpy(&vec_RICH__hits_xtalk[0],RICH__hits_xtalk->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("RICH::tdc")==true){
      if(dictionary->hasEntry("RICH::tdc","TDC")==true){
         int nsize = RICH__tdc_TDC->getLength();
         vec_RICH__tdc_TDC.clear();
         vec_RICH__tdc_TDC.resize(nsize);
         memcpy(&vec_RICH__tdc_TDC[0],RICH__tdc_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RICH::tdc","component")==true){
         int nsize = RICH__tdc_component->getLength();
         vec_RICH__tdc_component.clear();
         vec_RICH__tdc_component.resize(nsize);
         memcpy(&vec_RICH__tdc_component[0],RICH__tdc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RICH::tdc","layer")==true){
         int nsize = RICH__tdc_layer->getLength();
         vec_RICH__tdc_layer.clear();
         vec_RICH__tdc_layer.resize(nsize);
         memcpy(&vec_RICH__tdc_layer[0],RICH__tdc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RICH::tdc","order")==true){
         int nsize = RICH__tdc_order->getLength();
         vec_RICH__tdc_order.clear();
         vec_RICH__tdc_order.resize(nsize);
         memcpy(&vec_RICH__tdc_order[0],RICH__tdc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RICH::tdc","sector")==true){
         int nsize = RICH__tdc_sector->getLength();
         vec_RICH__tdc_sector.clear();
         vec_RICH__tdc_sector.resize(nsize);
         memcpy(&vec_RICH__tdc_sector[0],RICH__tdc_sector->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("RTPC::adc")==true){
      if(dictionary->hasEntry("RTPC::adc","ADC")==true){
         int nsize = RTPC__adc_ADC->getLength();
         vec_RTPC__adc_ADC.clear();
         vec_RTPC__adc_ADC.resize(nsize);
         memcpy(&vec_RTPC__adc_ADC[0],RTPC__adc_ADC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RTPC::adc","component")==true){
         int nsize = RTPC__adc_component->getLength();
         vec_RTPC__adc_component.clear();
         vec_RTPC__adc_component.resize(nsize);
         memcpy(&vec_RTPC__adc_component[0],RTPC__adc_component->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RTPC::adc","layer")==true){
         int nsize = RTPC__adc_layer->getLength();
         vec_RTPC__adc_layer.clear();
         vec_RTPC__adc_layer.resize(nsize);
         memcpy(&vec_RTPC__adc_layer[0],RTPC__adc_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RTPC::adc","order")==true){
         int nsize = RTPC__adc_order->getLength();
         vec_RTPC__adc_order.clear();
         vec_RTPC__adc_order.resize(nsize);
         memcpy(&vec_RTPC__adc_order[0],RTPC__adc_order->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RTPC::adc","ped")==true){
         int nsize = RTPC__adc_ped->getLength();
         vec_RTPC__adc_ped.clear();
         vec_RTPC__adc_ped.resize(nsize);
         memcpy(&vec_RTPC__adc_ped[0],RTPC__adc_ped->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RTPC::adc","sector")==true){
         int nsize = RTPC__adc_sector->getLength();
         vec_RTPC__adc_sector.clear();
         vec_RTPC__adc_sector.resize(nsize);
         memcpy(&vec_RTPC__adc_sector[0],RTPC__adc_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RTPC::adc","time")==true){
         int nsize = RTPC__adc_time->getLength();
         vec_RTPC__adc_time.clear();
         vec_RTPC__adc_time.resize(nsize);
         memcpy(&vec_RTPC__adc_time[0],RTPC__adc_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RTPC::pos")==true){
      if(dictionary->hasEntry("RTPC::pos","energy")==true){
         int nsize = RTPC__pos_energy->getLength();
         vec_RTPC__pos_energy.clear();
         vec_RTPC__pos_energy.resize(nsize);
         memcpy(&vec_RTPC__pos_energy[0],RTPC__pos_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RTPC::pos","phi")==true){
         int nsize = RTPC__pos_phi->getLength();
         vec_RTPC__pos_phi.clear();
         vec_RTPC__pos_phi.resize(nsize);
         memcpy(&vec_RTPC__pos_phi[0],RTPC__pos_phi->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RTPC::pos","posx")==true){
         int nsize = RTPC__pos_posx->getLength();
         vec_RTPC__pos_posx.clear();
         vec_RTPC__pos_posx.resize(nsize);
         memcpy(&vec_RTPC__pos_posx[0],RTPC__pos_posx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RTPC::pos","posy")==true){
         int nsize = RTPC__pos_posy->getLength();
         vec_RTPC__pos_posy.clear();
         vec_RTPC__pos_posy.resize(nsize);
         memcpy(&vec_RTPC__pos_posy[0],RTPC__pos_posy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RTPC::pos","posz")==true){
         int nsize = RTPC__pos_posz->getLength();
         vec_RTPC__pos_posz.clear();
         vec_RTPC__pos_posz.resize(nsize);
         memcpy(&vec_RTPC__pos_posz[0],RTPC__pos_posz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RTPC::pos","step")==true){
         int nsize = RTPC__pos_step->getLength();
         vec_RTPC__pos_step.clear();
         vec_RTPC__pos_step.resize(nsize);
         memcpy(&vec_RTPC__pos_step[0],RTPC__pos_step->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RTPC::pos","time")==true){
         int nsize = RTPC__pos_time->getLength();
         vec_RTPC__pos_time.clear();
         vec_RTPC__pos_time.resize(nsize);
         memcpy(&vec_RTPC__pos_time[0],RTPC__pos_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RUN::config")==true){
      if(dictionary->hasEntry("RUN::config","event")==true){
         int nsize = RUN__config_event->getLength();
         vec_RUN__config_event.clear();
         vec_RUN__config_event.resize(nsize);
         memcpy(&vec_RUN__config_event[0],RUN__config_event->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RUN::config","mode")==true){
         int nsize = RUN__config_mode->getLength();
         vec_RUN__config_mode.clear();
         vec_RUN__config_mode.resize(nsize);
         memcpy(&vec_RUN__config_mode[0],RUN__config_mode->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RUN::config","run")==true){
         int nsize = RUN__config_run->getLength();
         vec_RUN__config_run.clear();
         vec_RUN__config_run.resize(nsize);
         memcpy(&vec_RUN__config_run[0],RUN__config_run->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RUN::config","solenoid")==true){
         int nsize = RUN__config_solenoid->getLength();
         vec_RUN__config_solenoid.clear();
         vec_RUN__config_solenoid.resize(nsize);
         memcpy(&vec_RUN__config_solenoid[0],RUN__config_solenoid->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RUN::config","timestamp")==true){
         int nsize = RUN__config_timestamp->getLength();
         vec_RUN__config_timestamp.clear();
         vec_RUN__config_timestamp.resize(nsize);
         memcpy(&vec_RUN__config_timestamp[0],RUN__config_timestamp->getAddress(),nsize*sizeof(int64_t));
      }
      if(dictionary->hasEntry("RUN::config","torus")==true){
         int nsize = RUN__config_torus->getLength();
         vec_RUN__config_torus.clear();
         vec_RUN__config_torus.resize(nsize);
         memcpy(&vec_RUN__config_torus[0],RUN__config_torus->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("RUN::config","trigger")==true){
         int nsize = RUN__config_trigger->getLength();
         vec_RUN__config_trigger.clear();
         vec_RUN__config_trigger.resize(nsize);
         memcpy(&vec_RUN__config_trigger[0],RUN__config_trigger->getAddress(),nsize*sizeof(int64_t));
      }
      if(dictionary->hasEntry("RUN::config","type")==true){
         int nsize = RUN__config_type->getLength();
         vec_RUN__config_type.clear();
         vec_RUN__config_type.resize(nsize);
         memcpy(&vec_RUN__config_type[0],RUN__config_type->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("RUN::config","unixtime")==true){
         int nsize = RUN__config_unixtime->getLength();
         vec_RUN__config_unixtime.clear();
         vec_RUN__config_unixtime.resize(nsize);
         memcpy(&vec_RUN__config_unixtime[0],RUN__config_unixtime->getAddress(),nsize*sizeof(int32_t));
      }
   }
   if(dictionary->hasSchema("RUN::rf")==true){
      if(dictionary->hasEntry("RUN::rf","id")==true){
         int nsize = RUN__rf_id->getLength();
         vec_RUN__rf_id.clear();
         vec_RUN__rf_id.resize(nsize);
         memcpy(&vec_RUN__rf_id[0],RUN__rf_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("RUN::rf","time")==true){
         int nsize = RUN__rf_time->getLength();
         vec_RUN__rf_time.clear();
         vec_RUN__rf_time.resize(nsize);
         memcpy(&vec_RUN__rf_time[0],RUN__rf_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("RUN::trigger")==true){
      if(dictionary->hasEntry("RUN::trigger","id")==true){
         int nsize = RUN__trigger_id->getLength();
         vec_RUN__trigger_id.clear();
         vec_RUN__trigger_id.resize(nsize);
         memcpy(&vec_RUN__trigger_id[0],RUN__trigger_id->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("RUN::trigger","trigger")==true){
         int nsize = RUN__trigger_trigger->getLength();
         vec_RUN__trigger_trigger.clear();
         vec_RUN__trigger_trigger.resize(nsize);
         memcpy(&vec_RUN__trigger_trigger[0],RUN__trigger_trigger->getAddress(),nsize*sizeof(int32_t));
      }
   }
   if(dictionary->hasSchema("TAGGER::tgpb")==true){
      if(dictionary->hasEntry("TAGGER::tgpb","eid")==true){
         int nsize = TAGGER__tgpb_eid->getLength();
         vec_TAGGER__tgpb_eid.clear();
         vec_TAGGER__tgpb_eid.resize(nsize);
         memcpy(&vec_TAGGER__tgpb_eid[0],TAGGER__tgpb_eid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TAGGER::tgpb","energy")==true){
         int nsize = TAGGER__tgpb_energy->getLength();
         vec_TAGGER__tgpb_energy.clear();
         vec_TAGGER__tgpb_energy.resize(nsize);
         memcpy(&vec_TAGGER__tgpb_energy[0],TAGGER__tgpb_energy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TAGGER::tgpb","status")==true){
         int nsize = TAGGER__tgpb_status->getLength();
         vec_TAGGER__tgpb_status.clear();
         vec_TAGGER__tgpb_status.resize(nsize);
         memcpy(&vec_TAGGER__tgpb_status[0],TAGGER__tgpb_status->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TAGGER::tgpb","tid")==true){
         int nsize = TAGGER__tgpb_tid->getLength();
         vec_TAGGER__tgpb_tid.clear();
         vec_TAGGER__tgpb_tid.resize(nsize);
         memcpy(&vec_TAGGER__tgpb_tid[0],TAGGER__tgpb_tid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TAGGER::tgpb","time")==true){
         int nsize = TAGGER__tgpb_time->getLength();
         vec_TAGGER__tgpb_time.clear();
         vec_TAGGER__tgpb_time.resize(nsize);
         memcpy(&vec_TAGGER__tgpb_time[0],TAGGER__tgpb_time->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("TimeBasedTrkg::TBClusters")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit10_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit10_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit10_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit10_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit10_ID[0],TimeBasedTrkg__TBClusters_Hit10_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit11_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit11_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit11_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit11_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit11_ID[0],TimeBasedTrkg__TBClusters_Hit11_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit12_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit12_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit12_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit12_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit12_ID[0],TimeBasedTrkg__TBClusters_Hit12_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit1_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit1_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit1_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit1_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit1_ID[0],TimeBasedTrkg__TBClusters_Hit1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit2_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit2_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit2_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit2_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit2_ID[0],TimeBasedTrkg__TBClusters_Hit2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit3_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit3_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit3_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit3_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit3_ID[0],TimeBasedTrkg__TBClusters_Hit3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit4_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit4_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit4_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit4_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit4_ID[0],TimeBasedTrkg__TBClusters_Hit4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit5_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit5_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit5_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit5_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit5_ID[0],TimeBasedTrkg__TBClusters_Hit5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit6_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit6_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit6_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit6_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit6_ID[0],TimeBasedTrkg__TBClusters_Hit6_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit7_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit7_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit7_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit7_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit7_ID[0],TimeBasedTrkg__TBClusters_Hit7_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit8_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit8_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit8_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit8_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit8_ID[0],TimeBasedTrkg__TBClusters_Hit8_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","Hit9_ID")==true){
         int nsize = TimeBasedTrkg__TBClusters_Hit9_ID->getLength();
         vec_TimeBasedTrkg__TBClusters_Hit9_ID.clear();
         vec_TimeBasedTrkg__TBClusters_Hit9_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_Hit9_ID[0],TimeBasedTrkg__TBClusters_Hit9_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","avgWire")==true){
         int nsize = TimeBasedTrkg__TBClusters_avgWire->getLength();
         vec_TimeBasedTrkg__TBClusters_avgWire.clear();
         vec_TimeBasedTrkg__TBClusters_avgWire.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_avgWire[0],TimeBasedTrkg__TBClusters_avgWire->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitChisqProb")==true){
         int nsize = TimeBasedTrkg__TBClusters_fitChisqProb->getLength();
         vec_TimeBasedTrkg__TBClusters_fitChisqProb.clear();
         vec_TimeBasedTrkg__TBClusters_fitChisqProb.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_fitChisqProb[0],TimeBasedTrkg__TBClusters_fitChisqProb->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitInterc")==true){
         int nsize = TimeBasedTrkg__TBClusters_fitInterc->getLength();
         vec_TimeBasedTrkg__TBClusters_fitInterc.clear();
         vec_TimeBasedTrkg__TBClusters_fitInterc.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_fitInterc[0],TimeBasedTrkg__TBClusters_fitInterc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitIntercErr")==true){
         int nsize = TimeBasedTrkg__TBClusters_fitIntercErr->getLength();
         vec_TimeBasedTrkg__TBClusters_fitIntercErr.clear();
         vec_TimeBasedTrkg__TBClusters_fitIntercErr.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_fitIntercErr[0],TimeBasedTrkg__TBClusters_fitIntercErr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitSlope")==true){
         int nsize = TimeBasedTrkg__TBClusters_fitSlope->getLength();
         vec_TimeBasedTrkg__TBClusters_fitSlope.clear();
         vec_TimeBasedTrkg__TBClusters_fitSlope.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_fitSlope[0],TimeBasedTrkg__TBClusters_fitSlope->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","fitSlopeErr")==true){
         int nsize = TimeBasedTrkg__TBClusters_fitSlopeErr->getLength();
         vec_TimeBasedTrkg__TBClusters_fitSlopeErr.clear();
         vec_TimeBasedTrkg__TBClusters_fitSlopeErr.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_fitSlopeErr[0],TimeBasedTrkg__TBClusters_fitSlopeErr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","id")==true){
         int nsize = TimeBasedTrkg__TBClusters_id->getLength();
         vec_TimeBasedTrkg__TBClusters_id.clear();
         vec_TimeBasedTrkg__TBClusters_id.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_id[0],TimeBasedTrkg__TBClusters_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","sector")==true){
         int nsize = TimeBasedTrkg__TBClusters_sector->getLength();
         vec_TimeBasedTrkg__TBClusters_sector.clear();
         vec_TimeBasedTrkg__TBClusters_sector.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_sector[0],TimeBasedTrkg__TBClusters_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","size")==true){
         int nsize = TimeBasedTrkg__TBClusters_size->getLength();
         vec_TimeBasedTrkg__TBClusters_size.clear();
         vec_TimeBasedTrkg__TBClusters_size.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_size[0],TimeBasedTrkg__TBClusters_size->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","status")==true){
         int nsize = TimeBasedTrkg__TBClusters_status->getLength();
         vec_TimeBasedTrkg__TBClusters_status.clear();
         vec_TimeBasedTrkg__TBClusters_status.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_status[0],TimeBasedTrkg__TBClusters_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBClusters","superlayer")==true){
         int nsize = TimeBasedTrkg__TBClusters_superlayer->getLength();
         vec_TimeBasedTrkg__TBClusters_superlayer.clear();
         vec_TimeBasedTrkg__TBClusters_superlayer.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBClusters_superlayer[0],TimeBasedTrkg__TBClusters_superlayer->getAddress(),nsize*sizeof(int8_t));
      }
   }
   if(dictionary->hasSchema("TimeBasedTrkg::TBCovMat")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C11")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C11->getLength();
         vec_TimeBasedTrkg__TBCovMat_C11.clear();
         vec_TimeBasedTrkg__TBCovMat_C11.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C11[0],TimeBasedTrkg__TBCovMat_C11->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C12")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C12->getLength();
         vec_TimeBasedTrkg__TBCovMat_C12.clear();
         vec_TimeBasedTrkg__TBCovMat_C12.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C12[0],TimeBasedTrkg__TBCovMat_C12->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C13")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C13->getLength();
         vec_TimeBasedTrkg__TBCovMat_C13.clear();
         vec_TimeBasedTrkg__TBCovMat_C13.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C13[0],TimeBasedTrkg__TBCovMat_C13->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C14")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C14->getLength();
         vec_TimeBasedTrkg__TBCovMat_C14.clear();
         vec_TimeBasedTrkg__TBCovMat_C14.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C14[0],TimeBasedTrkg__TBCovMat_C14->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C15")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C15->getLength();
         vec_TimeBasedTrkg__TBCovMat_C15.clear();
         vec_TimeBasedTrkg__TBCovMat_C15.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C15[0],TimeBasedTrkg__TBCovMat_C15->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C21")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C21->getLength();
         vec_TimeBasedTrkg__TBCovMat_C21.clear();
         vec_TimeBasedTrkg__TBCovMat_C21.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C21[0],TimeBasedTrkg__TBCovMat_C21->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C22")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C22->getLength();
         vec_TimeBasedTrkg__TBCovMat_C22.clear();
         vec_TimeBasedTrkg__TBCovMat_C22.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C22[0],TimeBasedTrkg__TBCovMat_C22->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C23")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C23->getLength();
         vec_TimeBasedTrkg__TBCovMat_C23.clear();
         vec_TimeBasedTrkg__TBCovMat_C23.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C23[0],TimeBasedTrkg__TBCovMat_C23->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C24")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C24->getLength();
         vec_TimeBasedTrkg__TBCovMat_C24.clear();
         vec_TimeBasedTrkg__TBCovMat_C24.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C24[0],TimeBasedTrkg__TBCovMat_C24->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C25")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C25->getLength();
         vec_TimeBasedTrkg__TBCovMat_C25.clear();
         vec_TimeBasedTrkg__TBCovMat_C25.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C25[0],TimeBasedTrkg__TBCovMat_C25->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C31")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C31->getLength();
         vec_TimeBasedTrkg__TBCovMat_C31.clear();
         vec_TimeBasedTrkg__TBCovMat_C31.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C31[0],TimeBasedTrkg__TBCovMat_C31->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C32")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C32->getLength();
         vec_TimeBasedTrkg__TBCovMat_C32.clear();
         vec_TimeBasedTrkg__TBCovMat_C32.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C32[0],TimeBasedTrkg__TBCovMat_C32->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C33")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C33->getLength();
         vec_TimeBasedTrkg__TBCovMat_C33.clear();
         vec_TimeBasedTrkg__TBCovMat_C33.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C33[0],TimeBasedTrkg__TBCovMat_C33->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C34")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C34->getLength();
         vec_TimeBasedTrkg__TBCovMat_C34.clear();
         vec_TimeBasedTrkg__TBCovMat_C34.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C34[0],TimeBasedTrkg__TBCovMat_C34->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C35")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C35->getLength();
         vec_TimeBasedTrkg__TBCovMat_C35.clear();
         vec_TimeBasedTrkg__TBCovMat_C35.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C35[0],TimeBasedTrkg__TBCovMat_C35->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C41")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C41->getLength();
         vec_TimeBasedTrkg__TBCovMat_C41.clear();
         vec_TimeBasedTrkg__TBCovMat_C41.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C41[0],TimeBasedTrkg__TBCovMat_C41->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C42")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C42->getLength();
         vec_TimeBasedTrkg__TBCovMat_C42.clear();
         vec_TimeBasedTrkg__TBCovMat_C42.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C42[0],TimeBasedTrkg__TBCovMat_C42->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C43")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C43->getLength();
         vec_TimeBasedTrkg__TBCovMat_C43.clear();
         vec_TimeBasedTrkg__TBCovMat_C43.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C43[0],TimeBasedTrkg__TBCovMat_C43->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C44")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C44->getLength();
         vec_TimeBasedTrkg__TBCovMat_C44.clear();
         vec_TimeBasedTrkg__TBCovMat_C44.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C44[0],TimeBasedTrkg__TBCovMat_C44->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C45")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C45->getLength();
         vec_TimeBasedTrkg__TBCovMat_C45.clear();
         vec_TimeBasedTrkg__TBCovMat_C45.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C45[0],TimeBasedTrkg__TBCovMat_C45->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C51")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C51->getLength();
         vec_TimeBasedTrkg__TBCovMat_C51.clear();
         vec_TimeBasedTrkg__TBCovMat_C51.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C51[0],TimeBasedTrkg__TBCovMat_C51->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C52")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C52->getLength();
         vec_TimeBasedTrkg__TBCovMat_C52.clear();
         vec_TimeBasedTrkg__TBCovMat_C52.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C52[0],TimeBasedTrkg__TBCovMat_C52->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C53")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C53->getLength();
         vec_TimeBasedTrkg__TBCovMat_C53.clear();
         vec_TimeBasedTrkg__TBCovMat_C53.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C53[0],TimeBasedTrkg__TBCovMat_C53->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C54")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C54->getLength();
         vec_TimeBasedTrkg__TBCovMat_C54.clear();
         vec_TimeBasedTrkg__TBCovMat_C54.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C54[0],TimeBasedTrkg__TBCovMat_C54->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","C55")==true){
         int nsize = TimeBasedTrkg__TBCovMat_C55->getLength();
         vec_TimeBasedTrkg__TBCovMat_C55.clear();
         vec_TimeBasedTrkg__TBCovMat_C55.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_C55[0],TimeBasedTrkg__TBCovMat_C55->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCovMat","id")==true){
         int nsize = TimeBasedTrkg__TBCovMat_id->getLength();
         vec_TimeBasedTrkg__TBCovMat_id.clear();
         vec_TimeBasedTrkg__TBCovMat_id.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCovMat_id[0],TimeBasedTrkg__TBCovMat_id->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("TimeBasedTrkg::TBCrosses")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","Segment1_ID")==true){
         int nsize = TimeBasedTrkg__TBCrosses_Segment1_ID->getLength();
         vec_TimeBasedTrkg__TBCrosses_Segment1_ID.clear();
         vec_TimeBasedTrkg__TBCrosses_Segment1_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_Segment1_ID[0],TimeBasedTrkg__TBCrosses_Segment1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","Segment2_ID")==true){
         int nsize = TimeBasedTrkg__TBCrosses_Segment2_ID->getLength();
         vec_TimeBasedTrkg__TBCrosses_Segment2_ID.clear();
         vec_TimeBasedTrkg__TBCrosses_Segment2_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_Segment2_ID[0],TimeBasedTrkg__TBCrosses_Segment2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_ux")==true){
         int nsize = TimeBasedTrkg__TBCrosses_err_ux->getLength();
         vec_TimeBasedTrkg__TBCrosses_err_ux.clear();
         vec_TimeBasedTrkg__TBCrosses_err_ux.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_err_ux[0],TimeBasedTrkg__TBCrosses_err_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_uy")==true){
         int nsize = TimeBasedTrkg__TBCrosses_err_uy->getLength();
         vec_TimeBasedTrkg__TBCrosses_err_uy.clear();
         vec_TimeBasedTrkg__TBCrosses_err_uy.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_err_uy[0],TimeBasedTrkg__TBCrosses_err_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_uz")==true){
         int nsize = TimeBasedTrkg__TBCrosses_err_uz->getLength();
         vec_TimeBasedTrkg__TBCrosses_err_uz.clear();
         vec_TimeBasedTrkg__TBCrosses_err_uz.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_err_uz[0],TimeBasedTrkg__TBCrosses_err_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_x")==true){
         int nsize = TimeBasedTrkg__TBCrosses_err_x->getLength();
         vec_TimeBasedTrkg__TBCrosses_err_x.clear();
         vec_TimeBasedTrkg__TBCrosses_err_x.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_err_x[0],TimeBasedTrkg__TBCrosses_err_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_y")==true){
         int nsize = TimeBasedTrkg__TBCrosses_err_y->getLength();
         vec_TimeBasedTrkg__TBCrosses_err_y.clear();
         vec_TimeBasedTrkg__TBCrosses_err_y.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_err_y[0],TimeBasedTrkg__TBCrosses_err_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","err_z")==true){
         int nsize = TimeBasedTrkg__TBCrosses_err_z->getLength();
         vec_TimeBasedTrkg__TBCrosses_err_z.clear();
         vec_TimeBasedTrkg__TBCrosses_err_z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_err_z[0],TimeBasedTrkg__TBCrosses_err_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","id")==true){
         int nsize = TimeBasedTrkg__TBCrosses_id->getLength();
         vec_TimeBasedTrkg__TBCrosses_id.clear();
         vec_TimeBasedTrkg__TBCrosses_id.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_id[0],TimeBasedTrkg__TBCrosses_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","region")==true){
         int nsize = TimeBasedTrkg__TBCrosses_region->getLength();
         vec_TimeBasedTrkg__TBCrosses_region.clear();
         vec_TimeBasedTrkg__TBCrosses_region.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_region[0],TimeBasedTrkg__TBCrosses_region->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","sector")==true){
         int nsize = TimeBasedTrkg__TBCrosses_sector->getLength();
         vec_TimeBasedTrkg__TBCrosses_sector.clear();
         vec_TimeBasedTrkg__TBCrosses_sector.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_sector[0],TimeBasedTrkg__TBCrosses_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","status")==true){
         int nsize = TimeBasedTrkg__TBCrosses_status->getLength();
         vec_TimeBasedTrkg__TBCrosses_status.clear();
         vec_TimeBasedTrkg__TBCrosses_status.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_status[0],TimeBasedTrkg__TBCrosses_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","ux")==true){
         int nsize = TimeBasedTrkg__TBCrosses_ux->getLength();
         vec_TimeBasedTrkg__TBCrosses_ux.clear();
         vec_TimeBasedTrkg__TBCrosses_ux.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_ux[0],TimeBasedTrkg__TBCrosses_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","uy")==true){
         int nsize = TimeBasedTrkg__TBCrosses_uy->getLength();
         vec_TimeBasedTrkg__TBCrosses_uy.clear();
         vec_TimeBasedTrkg__TBCrosses_uy.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_uy[0],TimeBasedTrkg__TBCrosses_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","uz")==true){
         int nsize = TimeBasedTrkg__TBCrosses_uz->getLength();
         vec_TimeBasedTrkg__TBCrosses_uz.clear();
         vec_TimeBasedTrkg__TBCrosses_uz.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_uz[0],TimeBasedTrkg__TBCrosses_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","x")==true){
         int nsize = TimeBasedTrkg__TBCrosses_x->getLength();
         vec_TimeBasedTrkg__TBCrosses_x.clear();
         vec_TimeBasedTrkg__TBCrosses_x.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_x[0],TimeBasedTrkg__TBCrosses_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","y")==true){
         int nsize = TimeBasedTrkg__TBCrosses_y->getLength();
         vec_TimeBasedTrkg__TBCrosses_y.clear();
         vec_TimeBasedTrkg__TBCrosses_y.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_y[0],TimeBasedTrkg__TBCrosses_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBCrosses","z")==true){
         int nsize = TimeBasedTrkg__TBCrosses_z->getLength();
         vec_TimeBasedTrkg__TBCrosses_z.clear();
         vec_TimeBasedTrkg__TBCrosses_z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBCrosses_z[0],TimeBasedTrkg__TBCrosses_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("TimeBasedTrkg::TBHits")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","B")==true){
         int nsize = TimeBasedTrkg__TBHits_B->getLength();
         vec_TimeBasedTrkg__TBHits_B.clear();
         vec_TimeBasedTrkg__TBHits_B.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_B[0],TimeBasedTrkg__TBHits_B->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","LR")==true){
         int nsize = TimeBasedTrkg__TBHits_LR->getLength();
         vec_TimeBasedTrkg__TBHits_LR.clear();
         vec_TimeBasedTrkg__TBHits_LR.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_LR[0],TimeBasedTrkg__TBHits_LR->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","T0")==true){
         int nsize = TimeBasedTrkg__TBHits_T0->getLength();
         vec_TimeBasedTrkg__TBHits_T0.clear();
         vec_TimeBasedTrkg__TBHits_T0.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_T0[0],TimeBasedTrkg__TBHits_T0->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","TDC")==true){
         int nsize = TimeBasedTrkg__TBHits_TDC->getLength();
         vec_TimeBasedTrkg__TBHits_TDC.clear();
         vec_TimeBasedTrkg__TBHits_TDC.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_TDC[0],TimeBasedTrkg__TBHits_TDC->getAddress(),nsize*sizeof(int32_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","TFlight")==true){
         int nsize = TimeBasedTrkg__TBHits_TFlight->getLength();
         vec_TimeBasedTrkg__TBHits_TFlight.clear();
         vec_TimeBasedTrkg__TBHits_TFlight.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_TFlight[0],TimeBasedTrkg__TBHits_TFlight->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","TProp")==true){
         int nsize = TimeBasedTrkg__TBHits_TProp->getLength();
         vec_TimeBasedTrkg__TBHits_TProp.clear();
         vec_TimeBasedTrkg__TBHits_TProp.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_TProp[0],TimeBasedTrkg__TBHits_TProp->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","TStart")==true){
         int nsize = TimeBasedTrkg__TBHits_TStart->getLength();
         vec_TimeBasedTrkg__TBHits_TStart.clear();
         vec_TimeBasedTrkg__TBHits_TStart.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_TStart[0],TimeBasedTrkg__TBHits_TStart->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","X")==true){
         int nsize = TimeBasedTrkg__TBHits_X->getLength();
         vec_TimeBasedTrkg__TBHits_X.clear();
         vec_TimeBasedTrkg__TBHits_X.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_X[0],TimeBasedTrkg__TBHits_X->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","Z")==true){
         int nsize = TimeBasedTrkg__TBHits_Z->getLength();
         vec_TimeBasedTrkg__TBHits_Z.clear();
         vec_TimeBasedTrkg__TBHits_Z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_Z[0],TimeBasedTrkg__TBHits_Z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","beta")==true){
         int nsize = TimeBasedTrkg__TBHits_beta->getLength();
         vec_TimeBasedTrkg__TBHits_beta.clear();
         vec_TimeBasedTrkg__TBHits_beta.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_beta[0],TimeBasedTrkg__TBHits_beta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","clusterID")==true){
         int nsize = TimeBasedTrkg__TBHits_clusterID->getLength();
         vec_TimeBasedTrkg__TBHits_clusterID.clear();
         vec_TimeBasedTrkg__TBHits_clusterID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_clusterID[0],TimeBasedTrkg__TBHits_clusterID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","doca")==true){
         int nsize = TimeBasedTrkg__TBHits_doca->getLength();
         vec_TimeBasedTrkg__TBHits_doca.clear();
         vec_TimeBasedTrkg__TBHits_doca.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_doca[0],TimeBasedTrkg__TBHits_doca->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","docaError")==true){
         int nsize = TimeBasedTrkg__TBHits_docaError->getLength();
         vec_TimeBasedTrkg__TBHits_docaError.clear();
         vec_TimeBasedTrkg__TBHits_docaError.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_docaError[0],TimeBasedTrkg__TBHits_docaError->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","fitResidual")==true){
         int nsize = TimeBasedTrkg__TBHits_fitResidual->getLength();
         vec_TimeBasedTrkg__TBHits_fitResidual.clear();
         vec_TimeBasedTrkg__TBHits_fitResidual.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_fitResidual[0],TimeBasedTrkg__TBHits_fitResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","id")==true){
         int nsize = TimeBasedTrkg__TBHits_id->getLength();
         vec_TimeBasedTrkg__TBHits_id.clear();
         vec_TimeBasedTrkg__TBHits_id.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_id[0],TimeBasedTrkg__TBHits_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","layer")==true){
         int nsize = TimeBasedTrkg__TBHits_layer->getLength();
         vec_TimeBasedTrkg__TBHits_layer.clear();
         vec_TimeBasedTrkg__TBHits_layer.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_layer[0],TimeBasedTrkg__TBHits_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","sector")==true){
         int nsize = TimeBasedTrkg__TBHits_sector->getLength();
         vec_TimeBasedTrkg__TBHits_sector.clear();
         vec_TimeBasedTrkg__TBHits_sector.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_sector[0],TimeBasedTrkg__TBHits_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","status")==true){
         int nsize = TimeBasedTrkg__TBHits_status->getLength();
         vec_TimeBasedTrkg__TBHits_status.clear();
         vec_TimeBasedTrkg__TBHits_status.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_status[0],TimeBasedTrkg__TBHits_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","superlayer")==true){
         int nsize = TimeBasedTrkg__TBHits_superlayer->getLength();
         vec_TimeBasedTrkg__TBHits_superlayer.clear();
         vec_TimeBasedTrkg__TBHits_superlayer.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_superlayer[0],TimeBasedTrkg__TBHits_superlayer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","tBeta")==true){
         int nsize = TimeBasedTrkg__TBHits_tBeta->getLength();
         vec_TimeBasedTrkg__TBHits_tBeta.clear();
         vec_TimeBasedTrkg__TBHits_tBeta.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_tBeta[0],TimeBasedTrkg__TBHits_tBeta->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","time")==true){
         int nsize = TimeBasedTrkg__TBHits_time->getLength();
         vec_TimeBasedTrkg__TBHits_time.clear();
         vec_TimeBasedTrkg__TBHits_time.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_time[0],TimeBasedTrkg__TBHits_time->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","timeResidual")==true){
         int nsize = TimeBasedTrkg__TBHits_timeResidual->getLength();
         vec_TimeBasedTrkg__TBHits_timeResidual.clear();
         vec_TimeBasedTrkg__TBHits_timeResidual.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_timeResidual[0],TimeBasedTrkg__TBHits_timeResidual->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","trkDoca")==true){
         int nsize = TimeBasedTrkg__TBHits_trkDoca->getLength();
         vec_TimeBasedTrkg__TBHits_trkDoca.clear();
         vec_TimeBasedTrkg__TBHits_trkDoca.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_trkDoca[0],TimeBasedTrkg__TBHits_trkDoca->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","trkID")==true){
         int nsize = TimeBasedTrkg__TBHits_trkID->getLength();
         vec_TimeBasedTrkg__TBHits_trkID.clear();
         vec_TimeBasedTrkg__TBHits_trkID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_trkID[0],TimeBasedTrkg__TBHits_trkID->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBHits","wire")==true){
         int nsize = TimeBasedTrkg__TBHits_wire->getLength();
         vec_TimeBasedTrkg__TBHits_wire.clear();
         vec_TimeBasedTrkg__TBHits_wire.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBHits_wire[0],TimeBasedTrkg__TBHits_wire->getAddress(),nsize*sizeof(int16_t));
      }
   }
   if(dictionary->hasSchema("TimeBasedTrkg::TBSegmentTrajectory")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","layer")==true){
         int nsize = TimeBasedTrkg__TBSegmentTrajectory_layer->getLength();
         vec_TimeBasedTrkg__TBSegmentTrajectory_layer.clear();
         vec_TimeBasedTrkg__TBSegmentTrajectory_layer.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegmentTrajectory_layer[0],TimeBasedTrkg__TBSegmentTrajectory_layer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","matchedHitID")==true){
         int nsize = TimeBasedTrkg__TBSegmentTrajectory_matchedHitID->getLength();
         vec_TimeBasedTrkg__TBSegmentTrajectory_matchedHitID.clear();
         vec_TimeBasedTrkg__TBSegmentTrajectory_matchedHitID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegmentTrajectory_matchedHitID[0],TimeBasedTrkg__TBSegmentTrajectory_matchedHitID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","sector")==true){
         int nsize = TimeBasedTrkg__TBSegmentTrajectory_sector->getLength();
         vec_TimeBasedTrkg__TBSegmentTrajectory_sector.clear();
         vec_TimeBasedTrkg__TBSegmentTrajectory_sector.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegmentTrajectory_sector[0],TimeBasedTrkg__TBSegmentTrajectory_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","segmentID")==true){
         int nsize = TimeBasedTrkg__TBSegmentTrajectory_segmentID->getLength();
         vec_TimeBasedTrkg__TBSegmentTrajectory_segmentID.clear();
         vec_TimeBasedTrkg__TBSegmentTrajectory_segmentID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegmentTrajectory_segmentID[0],TimeBasedTrkg__TBSegmentTrajectory_segmentID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","superlayer")==true){
         int nsize = TimeBasedTrkg__TBSegmentTrajectory_superlayer->getLength();
         vec_TimeBasedTrkg__TBSegmentTrajectory_superlayer.clear();
         vec_TimeBasedTrkg__TBSegmentTrajectory_superlayer.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegmentTrajectory_superlayer[0],TimeBasedTrkg__TBSegmentTrajectory_superlayer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegmentTrajectory","trkDoca")==true){
         int nsize = TimeBasedTrkg__TBSegmentTrajectory_trkDoca->getLength();
         vec_TimeBasedTrkg__TBSegmentTrajectory_trkDoca.clear();
         vec_TimeBasedTrkg__TBSegmentTrajectory_trkDoca.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegmentTrajectory_trkDoca[0],TimeBasedTrkg__TBSegmentTrajectory_trkDoca->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("TimeBasedTrkg::TBSegments")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Cluster_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Cluster_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Cluster_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Cluster_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Cluster_ID[0],TimeBasedTrkg__TBSegments_Cluster_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit10_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit10_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit10_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit10_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit10_ID[0],TimeBasedTrkg__TBSegments_Hit10_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit11_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit11_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit11_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit11_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit11_ID[0],TimeBasedTrkg__TBSegments_Hit11_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit12_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit12_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit12_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit12_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit12_ID[0],TimeBasedTrkg__TBSegments_Hit12_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit1_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit1_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit1_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit1_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit1_ID[0],TimeBasedTrkg__TBSegments_Hit1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit2_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit2_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit2_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit2_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit2_ID[0],TimeBasedTrkg__TBSegments_Hit2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit3_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit3_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit3_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit3_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit3_ID[0],TimeBasedTrkg__TBSegments_Hit3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit4_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit4_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit4_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit4_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit4_ID[0],TimeBasedTrkg__TBSegments_Hit4_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit5_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit5_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit5_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit5_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit5_ID[0],TimeBasedTrkg__TBSegments_Hit5_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit6_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit6_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit6_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit6_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit6_ID[0],TimeBasedTrkg__TBSegments_Hit6_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit7_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit7_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit7_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit7_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit7_ID[0],TimeBasedTrkg__TBSegments_Hit7_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit8_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit8_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit8_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit8_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit8_ID[0],TimeBasedTrkg__TBSegments_Hit8_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","Hit9_ID")==true){
         int nsize = TimeBasedTrkg__TBSegments_Hit9_ID->getLength();
         vec_TimeBasedTrkg__TBSegments_Hit9_ID.clear();
         vec_TimeBasedTrkg__TBSegments_Hit9_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_Hit9_ID[0],TimeBasedTrkg__TBSegments_Hit9_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","SegEndPoint1X")==true){
         int nsize = TimeBasedTrkg__TBSegments_SegEndPoint1X->getLength();
         vec_TimeBasedTrkg__TBSegments_SegEndPoint1X.clear();
         vec_TimeBasedTrkg__TBSegments_SegEndPoint1X.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_SegEndPoint1X[0],TimeBasedTrkg__TBSegments_SegEndPoint1X->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","SegEndPoint1Z")==true){
         int nsize = TimeBasedTrkg__TBSegments_SegEndPoint1Z->getLength();
         vec_TimeBasedTrkg__TBSegments_SegEndPoint1Z.clear();
         vec_TimeBasedTrkg__TBSegments_SegEndPoint1Z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_SegEndPoint1Z[0],TimeBasedTrkg__TBSegments_SegEndPoint1Z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","SegEndPoint2X")==true){
         int nsize = TimeBasedTrkg__TBSegments_SegEndPoint2X->getLength();
         vec_TimeBasedTrkg__TBSegments_SegEndPoint2X.clear();
         vec_TimeBasedTrkg__TBSegments_SegEndPoint2X.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_SegEndPoint2X[0],TimeBasedTrkg__TBSegments_SegEndPoint2X->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","SegEndPoint2Z")==true){
         int nsize = TimeBasedTrkg__TBSegments_SegEndPoint2Z->getLength();
         vec_TimeBasedTrkg__TBSegments_SegEndPoint2Z.clear();
         vec_TimeBasedTrkg__TBSegments_SegEndPoint2Z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_SegEndPoint2Z[0],TimeBasedTrkg__TBSegments_SegEndPoint2Z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","avgWire")==true){
         int nsize = TimeBasedTrkg__TBSegments_avgWire->getLength();
         vec_TimeBasedTrkg__TBSegments_avgWire.clear();
         vec_TimeBasedTrkg__TBSegments_avgWire.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_avgWire[0],TimeBasedTrkg__TBSegments_avgWire->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitChisqProb")==true){
         int nsize = TimeBasedTrkg__TBSegments_fitChisqProb->getLength();
         vec_TimeBasedTrkg__TBSegments_fitChisqProb.clear();
         vec_TimeBasedTrkg__TBSegments_fitChisqProb.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_fitChisqProb[0],TimeBasedTrkg__TBSegments_fitChisqProb->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitInterc")==true){
         int nsize = TimeBasedTrkg__TBSegments_fitInterc->getLength();
         vec_TimeBasedTrkg__TBSegments_fitInterc.clear();
         vec_TimeBasedTrkg__TBSegments_fitInterc.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_fitInterc[0],TimeBasedTrkg__TBSegments_fitInterc->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitIntercErr")==true){
         int nsize = TimeBasedTrkg__TBSegments_fitIntercErr->getLength();
         vec_TimeBasedTrkg__TBSegments_fitIntercErr.clear();
         vec_TimeBasedTrkg__TBSegments_fitIntercErr.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_fitIntercErr[0],TimeBasedTrkg__TBSegments_fitIntercErr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitSlope")==true){
         int nsize = TimeBasedTrkg__TBSegments_fitSlope->getLength();
         vec_TimeBasedTrkg__TBSegments_fitSlope.clear();
         vec_TimeBasedTrkg__TBSegments_fitSlope.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_fitSlope[0],TimeBasedTrkg__TBSegments_fitSlope->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","fitSlopeErr")==true){
         int nsize = TimeBasedTrkg__TBSegments_fitSlopeErr->getLength();
         vec_TimeBasedTrkg__TBSegments_fitSlopeErr.clear();
         vec_TimeBasedTrkg__TBSegments_fitSlopeErr.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_fitSlopeErr[0],TimeBasedTrkg__TBSegments_fitSlopeErr->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","id")==true){
         int nsize = TimeBasedTrkg__TBSegments_id->getLength();
         vec_TimeBasedTrkg__TBSegments_id.clear();
         vec_TimeBasedTrkg__TBSegments_id.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_id[0],TimeBasedTrkg__TBSegments_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","resiSum")==true){
         int nsize = TimeBasedTrkg__TBSegments_resiSum->getLength();
         vec_TimeBasedTrkg__TBSegments_resiSum.clear();
         vec_TimeBasedTrkg__TBSegments_resiSum.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_resiSum[0],TimeBasedTrkg__TBSegments_resiSum->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","sector")==true){
         int nsize = TimeBasedTrkg__TBSegments_sector->getLength();
         vec_TimeBasedTrkg__TBSegments_sector.clear();
         vec_TimeBasedTrkg__TBSegments_sector.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_sector[0],TimeBasedTrkg__TBSegments_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","size")==true){
         int nsize = TimeBasedTrkg__TBSegments_size->getLength();
         vec_TimeBasedTrkg__TBSegments_size.clear();
         vec_TimeBasedTrkg__TBSegments_size.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_size[0],TimeBasedTrkg__TBSegments_size->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","status")==true){
         int nsize = TimeBasedTrkg__TBSegments_status->getLength();
         vec_TimeBasedTrkg__TBSegments_status.clear();
         vec_TimeBasedTrkg__TBSegments_status.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_status[0],TimeBasedTrkg__TBSegments_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","superlayer")==true){
         int nsize = TimeBasedTrkg__TBSegments_superlayer->getLength();
         vec_TimeBasedTrkg__TBSegments_superlayer.clear();
         vec_TimeBasedTrkg__TBSegments_superlayer.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_superlayer[0],TimeBasedTrkg__TBSegments_superlayer->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBSegments","timeSum")==true){
         int nsize = TimeBasedTrkg__TBSegments_timeSum->getLength();
         vec_TimeBasedTrkg__TBSegments_timeSum.clear();
         vec_TimeBasedTrkg__TBSegments_timeSum.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBSegments_timeSum[0],TimeBasedTrkg__TBSegments_timeSum->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("TimeBasedTrkg::TBTracks")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Cross1_ID")==true){
         int nsize = TimeBasedTrkg__TBTracks_Cross1_ID->getLength();
         vec_TimeBasedTrkg__TBTracks_Cross1_ID.clear();
         vec_TimeBasedTrkg__TBTracks_Cross1_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_Cross1_ID[0],TimeBasedTrkg__TBTracks_Cross1_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Cross2_ID")==true){
         int nsize = TimeBasedTrkg__TBTracks_Cross2_ID->getLength();
         vec_TimeBasedTrkg__TBTracks_Cross2_ID.clear();
         vec_TimeBasedTrkg__TBTracks_Cross2_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_Cross2_ID[0],TimeBasedTrkg__TBTracks_Cross2_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Cross3_ID")==true){
         int nsize = TimeBasedTrkg__TBTracks_Cross3_ID->getLength();
         vec_TimeBasedTrkg__TBTracks_Cross3_ID.clear();
         vec_TimeBasedTrkg__TBTracks_Cross3_ID.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_Cross3_ID[0],TimeBasedTrkg__TBTracks_Cross3_ID->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Vtx0_x")==true){
         int nsize = TimeBasedTrkg__TBTracks_Vtx0_x->getLength();
         vec_TimeBasedTrkg__TBTracks_Vtx0_x.clear();
         vec_TimeBasedTrkg__TBTracks_Vtx0_x.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_Vtx0_x[0],TimeBasedTrkg__TBTracks_Vtx0_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Vtx0_y")==true){
         int nsize = TimeBasedTrkg__TBTracks_Vtx0_y->getLength();
         vec_TimeBasedTrkg__TBTracks_Vtx0_y.clear();
         vec_TimeBasedTrkg__TBTracks_Vtx0_y.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_Vtx0_y[0],TimeBasedTrkg__TBTracks_Vtx0_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","Vtx0_z")==true){
         int nsize = TimeBasedTrkg__TBTracks_Vtx0_z->getLength();
         vec_TimeBasedTrkg__TBTracks_Vtx0_z.clear();
         vec_TimeBasedTrkg__TBTracks_Vtx0_z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_Vtx0_z[0],TimeBasedTrkg__TBTracks_Vtx0_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_ux")==true){
         int nsize = TimeBasedTrkg__TBTracks_c1_ux->getLength();
         vec_TimeBasedTrkg__TBTracks_c1_ux.clear();
         vec_TimeBasedTrkg__TBTracks_c1_ux.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c1_ux[0],TimeBasedTrkg__TBTracks_c1_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_uy")==true){
         int nsize = TimeBasedTrkg__TBTracks_c1_uy->getLength();
         vec_TimeBasedTrkg__TBTracks_c1_uy.clear();
         vec_TimeBasedTrkg__TBTracks_c1_uy.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c1_uy[0],TimeBasedTrkg__TBTracks_c1_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_uz")==true){
         int nsize = TimeBasedTrkg__TBTracks_c1_uz->getLength();
         vec_TimeBasedTrkg__TBTracks_c1_uz.clear();
         vec_TimeBasedTrkg__TBTracks_c1_uz.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c1_uz[0],TimeBasedTrkg__TBTracks_c1_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_x")==true){
         int nsize = TimeBasedTrkg__TBTracks_c1_x->getLength();
         vec_TimeBasedTrkg__TBTracks_c1_x.clear();
         vec_TimeBasedTrkg__TBTracks_c1_x.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c1_x[0],TimeBasedTrkg__TBTracks_c1_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_y")==true){
         int nsize = TimeBasedTrkg__TBTracks_c1_y->getLength();
         vec_TimeBasedTrkg__TBTracks_c1_y.clear();
         vec_TimeBasedTrkg__TBTracks_c1_y.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c1_y[0],TimeBasedTrkg__TBTracks_c1_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c1_z")==true){
         int nsize = TimeBasedTrkg__TBTracks_c1_z->getLength();
         vec_TimeBasedTrkg__TBTracks_c1_z.clear();
         vec_TimeBasedTrkg__TBTracks_c1_z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c1_z[0],TimeBasedTrkg__TBTracks_c1_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_ux")==true){
         int nsize = TimeBasedTrkg__TBTracks_c3_ux->getLength();
         vec_TimeBasedTrkg__TBTracks_c3_ux.clear();
         vec_TimeBasedTrkg__TBTracks_c3_ux.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c3_ux[0],TimeBasedTrkg__TBTracks_c3_ux->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_uy")==true){
         int nsize = TimeBasedTrkg__TBTracks_c3_uy->getLength();
         vec_TimeBasedTrkg__TBTracks_c3_uy.clear();
         vec_TimeBasedTrkg__TBTracks_c3_uy.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c3_uy[0],TimeBasedTrkg__TBTracks_c3_uy->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_uz")==true){
         int nsize = TimeBasedTrkg__TBTracks_c3_uz->getLength();
         vec_TimeBasedTrkg__TBTracks_c3_uz.clear();
         vec_TimeBasedTrkg__TBTracks_c3_uz.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c3_uz[0],TimeBasedTrkg__TBTracks_c3_uz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_x")==true){
         int nsize = TimeBasedTrkg__TBTracks_c3_x->getLength();
         vec_TimeBasedTrkg__TBTracks_c3_x.clear();
         vec_TimeBasedTrkg__TBTracks_c3_x.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c3_x[0],TimeBasedTrkg__TBTracks_c3_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_y")==true){
         int nsize = TimeBasedTrkg__TBTracks_c3_y->getLength();
         vec_TimeBasedTrkg__TBTracks_c3_y.clear();
         vec_TimeBasedTrkg__TBTracks_c3_y.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c3_y[0],TimeBasedTrkg__TBTracks_c3_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","c3_z")==true){
         int nsize = TimeBasedTrkg__TBTracks_c3_z->getLength();
         vec_TimeBasedTrkg__TBTracks_c3_z.clear();
         vec_TimeBasedTrkg__TBTracks_c3_z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_c3_z[0],TimeBasedTrkg__TBTracks_c3_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","chi2")==true){
         int nsize = TimeBasedTrkg__TBTracks_chi2->getLength();
         vec_TimeBasedTrkg__TBTracks_chi2.clear();
         vec_TimeBasedTrkg__TBTracks_chi2.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_chi2[0],TimeBasedTrkg__TBTracks_chi2->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","id")==true){
         int nsize = TimeBasedTrkg__TBTracks_id->getLength();
         vec_TimeBasedTrkg__TBTracks_id.clear();
         vec_TimeBasedTrkg__TBTracks_id.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_id[0],TimeBasedTrkg__TBTracks_id->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","ndf")==true){
         int nsize = TimeBasedTrkg__TBTracks_ndf->getLength();
         vec_TimeBasedTrkg__TBTracks_ndf.clear();
         vec_TimeBasedTrkg__TBTracks_ndf.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_ndf[0],TimeBasedTrkg__TBTracks_ndf->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","p0_x")==true){
         int nsize = TimeBasedTrkg__TBTracks_p0_x->getLength();
         vec_TimeBasedTrkg__TBTracks_p0_x.clear();
         vec_TimeBasedTrkg__TBTracks_p0_x.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_p0_x[0],TimeBasedTrkg__TBTracks_p0_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","p0_y")==true){
         int nsize = TimeBasedTrkg__TBTracks_p0_y->getLength();
         vec_TimeBasedTrkg__TBTracks_p0_y.clear();
         vec_TimeBasedTrkg__TBTracks_p0_y.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_p0_y[0],TimeBasedTrkg__TBTracks_p0_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","p0_z")==true){
         int nsize = TimeBasedTrkg__TBTracks_p0_z->getLength();
         vec_TimeBasedTrkg__TBTracks_p0_z.clear();
         vec_TimeBasedTrkg__TBTracks_p0_z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_p0_z[0],TimeBasedTrkg__TBTracks_p0_z->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","pathlength")==true){
         int nsize = TimeBasedTrkg__TBTracks_pathlength->getLength();
         vec_TimeBasedTrkg__TBTracks_pathlength.clear();
         vec_TimeBasedTrkg__TBTracks_pathlength.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_pathlength[0],TimeBasedTrkg__TBTracks_pathlength->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","q")==true){
         int nsize = TimeBasedTrkg__TBTracks_q->getLength();
         vec_TimeBasedTrkg__TBTracks_q.clear();
         vec_TimeBasedTrkg__TBTracks_q.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_q[0],TimeBasedTrkg__TBTracks_q->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","sector")==true){
         int nsize = TimeBasedTrkg__TBTracks_sector->getLength();
         vec_TimeBasedTrkg__TBTracks_sector.clear();
         vec_TimeBasedTrkg__TBTracks_sector.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_sector[0],TimeBasedTrkg__TBTracks_sector->getAddress(),nsize*sizeof(int8_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","status")==true){
         int nsize = TimeBasedTrkg__TBTracks_status->getLength();
         vec_TimeBasedTrkg__TBTracks_status.clear();
         vec_TimeBasedTrkg__TBTracks_status.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_status[0],TimeBasedTrkg__TBTracks_status->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_px")==true){
         int nsize = TimeBasedTrkg__TBTracks_t1_px->getLength();
         vec_TimeBasedTrkg__TBTracks_t1_px.clear();
         vec_TimeBasedTrkg__TBTracks_t1_px.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_t1_px[0],TimeBasedTrkg__TBTracks_t1_px->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_py")==true){
         int nsize = TimeBasedTrkg__TBTracks_t1_py->getLength();
         vec_TimeBasedTrkg__TBTracks_t1_py.clear();
         vec_TimeBasedTrkg__TBTracks_t1_py.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_t1_py[0],TimeBasedTrkg__TBTracks_t1_py->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_pz")==true){
         int nsize = TimeBasedTrkg__TBTracks_t1_pz->getLength();
         vec_TimeBasedTrkg__TBTracks_t1_pz.clear();
         vec_TimeBasedTrkg__TBTracks_t1_pz.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_t1_pz[0],TimeBasedTrkg__TBTracks_t1_pz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_x")==true){
         int nsize = TimeBasedTrkg__TBTracks_t1_x->getLength();
         vec_TimeBasedTrkg__TBTracks_t1_x.clear();
         vec_TimeBasedTrkg__TBTracks_t1_x.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_t1_x[0],TimeBasedTrkg__TBTracks_t1_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_y")==true){
         int nsize = TimeBasedTrkg__TBTracks_t1_y->getLength();
         vec_TimeBasedTrkg__TBTracks_t1_y.clear();
         vec_TimeBasedTrkg__TBTracks_t1_y.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_t1_y[0],TimeBasedTrkg__TBTracks_t1_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::TBTracks","t1_z")==true){
         int nsize = TimeBasedTrkg__TBTracks_t1_z->getLength();
         vec_TimeBasedTrkg__TBTracks_t1_z.clear();
         vec_TimeBasedTrkg__TBTracks_t1_z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__TBTracks_t1_z[0],TimeBasedTrkg__TBTracks_t1_z->getAddress(),nsize*sizeof(float));
      }
   }
   if(dictionary->hasSchema("TimeBasedTrkg::Trajectory")==true){
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","B")==true){
         int nsize = TimeBasedTrkg__Trajectory_B->getLength();
         vec_TimeBasedTrkg__Trajectory_B.clear();
         vec_TimeBasedTrkg__Trajectory_B.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_B[0],TimeBasedTrkg__Trajectory_B->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","L")==true){
         int nsize = TimeBasedTrkg__Trajectory_L->getLength();
         vec_TimeBasedTrkg__Trajectory_L.clear();
         vec_TimeBasedTrkg__Trajectory_L.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_L[0],TimeBasedTrkg__Trajectory_L->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","did")==true){
         int nsize = TimeBasedTrkg__Trajectory_did->getLength();
         vec_TimeBasedTrkg__Trajectory_did.clear();
         vec_TimeBasedTrkg__Trajectory_did.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_did[0],TimeBasedTrkg__Trajectory_did->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","tid")==true){
         int nsize = TimeBasedTrkg__Trajectory_tid->getLength();
         vec_TimeBasedTrkg__Trajectory_tid.clear();
         vec_TimeBasedTrkg__Trajectory_tid.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_tid[0],TimeBasedTrkg__Trajectory_tid->getAddress(),nsize*sizeof(int16_t));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","tx")==true){
         int nsize = TimeBasedTrkg__Trajectory_tx->getLength();
         vec_TimeBasedTrkg__Trajectory_tx.clear();
         vec_TimeBasedTrkg__Trajectory_tx.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_tx[0],TimeBasedTrkg__Trajectory_tx->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","ty")==true){
         int nsize = TimeBasedTrkg__Trajectory_ty->getLength();
         vec_TimeBasedTrkg__Trajectory_ty.clear();
         vec_TimeBasedTrkg__Trajectory_ty.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_ty[0],TimeBasedTrkg__Trajectory_ty->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","tz")==true){
         int nsize = TimeBasedTrkg__Trajectory_tz->getLength();
         vec_TimeBasedTrkg__Trajectory_tz.clear();
         vec_TimeBasedTrkg__Trajectory_tz.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_tz[0],TimeBasedTrkg__Trajectory_tz->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","x")==true){
         int nsize = TimeBasedTrkg__Trajectory_x->getLength();
         vec_TimeBasedTrkg__Trajectory_x.clear();
         vec_TimeBasedTrkg__Trajectory_x.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_x[0],TimeBasedTrkg__Trajectory_x->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","y")==true){
         int nsize = TimeBasedTrkg__Trajectory_y->getLength();
         vec_TimeBasedTrkg__Trajectory_y.clear();
         vec_TimeBasedTrkg__Trajectory_y.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_y[0],TimeBasedTrkg__Trajectory_y->getAddress(),nsize*sizeof(float));
      }
      if(dictionary->hasEntry("TimeBasedTrkg::Trajectory","z")==true){
         int nsize = TimeBasedTrkg__Trajectory_z->getLength();
         vec_TimeBasedTrkg__Trajectory_z.clear();
         vec_TimeBasedTrkg__Trajectory_z.resize(nsize);
         memcpy(&vec_TimeBasedTrkg__Trajectory_z[0],TimeBasedTrkg__Trajectory_z->getAddress(),nsize*sizeof(float));
      }
   }
      tree->Fill();
      if(entry%100000==0) printf("processed events....%d\n",entry);
   }
   f->Write();
   f->Close();
}
//### END OF GENERATED CODE
